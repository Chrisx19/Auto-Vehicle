
AV_ROS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ab8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  08008cb0  08008cb0  00018cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f7c  08008f7c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008f7c  08008f7c  00018f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f84  08008f84  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008f84  08008f84  00018f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008f8c  08008f8c  00018f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000088c0  20000078  08009008  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20008938  08009008  00028938  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e5ac  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f5f  00000000  00000000  0003e64e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  000415b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001318  00000000  00000000  00042990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a388  00000000  00000000  00043ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000156f0  00000000  00000000  0006e030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001050a0  00000000  00000000  00083720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001887c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aa0  00000000  00000000  00188810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000078 	.word	0x20000078
 8000214:	00000000 	.word	0x00000000
 8000218:	08008c98 	.word	0x08008c98

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000007c 	.word	0x2000007c
 8000234:	08008c98 	.word	0x08008c98

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <_ZN8RoboClawC1EP20__UART_HandleTypeDefm>:
#define SetWORDval(arg) (uint8_t)(((uint16_t)arg)>>8),(uint8_t)arg

//
// Constructor
//
RoboClaw::RoboClaw(UART_HandleTypeDef *serial, uint32_t tout)
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	60f8      	str	r0, [r7, #12]
 8000554:	60b9      	str	r1, [r7, #8]
 8000556:	607a      	str	r2, [r7, #4]
{
	timeout = tout;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	605a      	str	r2, [r3, #4]
	hserial = serial;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	68ba      	ldr	r2, [r7, #8]
 8000562:	609a      	str	r2, [r3, #8]
}
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	4618      	mov	r0, r3
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <_ZN8RoboClawD1Ev>:


//
// Destructor
//
RoboClaw::~RoboClaw()
 8000572:	b480      	push	{r7}
 8000574:	b083      	sub	sp, #12
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
{
}
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4618      	mov	r0, r3
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <_ZN8RoboClaw5writeEh>:
	return false;
}


HAL_StatusTypeDef RoboClaw::write(uint8_t byte)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	460b      	mov	r3, r1
 8000592:	70fb      	strb	r3, [r7, #3]
	return HAL_UART_Transmit(hserial, (uint8_t*) &byte, 1, HAL_MAX_DELAY);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6898      	ldr	r0, [r3, #8]
 8000598:	1cf9      	adds	r1, r7, #3
 800059a:	f04f 33ff 	mov.w	r3, #4294967295
 800059e:	2201      	movs	r2, #1
 80005a0:	f006 fdaa 	bl	80070f8 <HAL_UART_Transmit>
 80005a4:	4603      	mov	r3, r0
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}

080005ae <_ZN8RoboClaw4readEm>:
        return rdata;
    }
}

int RoboClaw::read(uint32_t timeout)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b084      	sub	sp, #16
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
 80005b6:	6039      	str	r1, [r7, #0]
    uint8_t rdata;
	if(hserial){
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d009      	beq.n	80005d4 <_ZN8RoboClaw4readEm+0x26>
		HAL_UART_Receive(hserial, (uint8_t*) &rdata, 1, timeout);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6898      	ldr	r0, [r3, #8]
 80005c4:	f107 010f 	add.w	r1, r7, #15
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	2201      	movs	r2, #1
 80005cc:	f006 fe17 	bl	80071fe <HAL_UART_Receive>
        return rdata;
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	e7ff      	b.n	80005d4 <_ZN8RoboClaw4readEm+0x26>
	}
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <_ZN8RoboClaw9crc_clearEv>:

void RoboClaw::crc_clear()
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	crc = 0;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2200      	movs	r2, #0
 80005e8:	801a      	strh	r2, [r3, #0]
}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <_ZN8RoboClaw10crc_updateEh>:

void RoboClaw::crc_update (uint8_t data)
{
 80005f6:	b480      	push	{r7}
 80005f8:	b085      	sub	sp, #20
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
 80005fe:	460b      	mov	r3, r1
 8000600:	70fb      	strb	r3, [r7, #3]
	int i;
	crc = crc ^ ((uint16_t)data << 8);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	b21a      	sxth	r2, r3
 8000608:	78fb      	ldrb	r3, [r7, #3]
 800060a:	021b      	lsls	r3, r3, #8
 800060c:	b21b      	sxth	r3, r3
 800060e:	4053      	eors	r3, r2
 8000610:	b21b      	sxth	r3, r3
 8000612:	b29a      	uxth	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	801a      	strh	r2, [r3, #0]
	for (i=0; i<8; i++)
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	2b07      	cmp	r3, #7
 8000620:	dc1a      	bgt.n	8000658 <_ZN8RoboClaw10crc_updateEh+0x62>
	{
		if (crc & 0x8000)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	b21b      	sxth	r3, r3
 8000628:	2b00      	cmp	r3, #0
 800062a:	da0b      	bge.n	8000644 <_ZN8RoboClaw10crc_updateEh+0x4e>
			crc = (crc << 1) ^ 0x1021;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	b21a      	sxth	r2, r3
 8000634:	f241 0321 	movw	r3, #4129	; 0x1021
 8000638:	4053      	eors	r3, r2
 800063a:	b21b      	sxth	r3, r3
 800063c:	b29a      	uxth	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	801a      	strh	r2, [r3, #0]
 8000642:	e005      	b.n	8000650 <_ZN8RoboClaw10crc_updateEh+0x5a>
		else
			crc <<= 1;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	b29a      	uxth	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	801a      	strh	r2, [r3, #0]
	for (i=0; i<8; i++)
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	3301      	adds	r3, #1
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	e7e1      	b.n	800061c <_ZN8RoboClaw10crc_updateEh+0x26>
	}
}
 8000658:	bf00      	nop
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <_ZN8RoboClaw7crc_getEv>:

uint16_t RoboClaw::crc_get()
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	return crc;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	881b      	ldrh	r3, [r3, #0]
}
 8000670:	4618      	mov	r0, r3
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <_ZN8RoboClaw7write_nEhz>:

bool RoboClaw::write_n(uint8_t cnt, ... )
{
 800067c:	b40e      	push	{r1, r2, r3}
 800067e:	b580      	push	{r7, lr}
 8000680:	b087      	sub	sp, #28
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
	uint8_t trys=MAXRETRY;
 8000686:	2302      	movs	r3, #2
 8000688:	75fb      	strb	r3, [r7, #23]
	do{
		crc_clear();
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f7ff ffa6 	bl	80005dc <_ZN8RoboClaw9crc_clearEv>
		//send data with crc
		va_list marker;
		va_start( marker, cnt );     /* Initialize variable arguments. */
 8000690:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000694:	60fb      	str	r3, [r7, #12]
		for(uint8_t index=0;index<cnt;index++){
 8000696:	2300      	movs	r3, #0
 8000698:	75bb      	strb	r3, [r7, #22]
 800069a:	7dba      	ldrb	r2, [r7, #22]
 800069c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d212      	bcs.n	80006ca <_ZN8RoboClaw7write_nEhz+0x4e>
			uint8_t data = va_arg(marker, int);
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	1d1a      	adds	r2, r3, #4
 80006a8:	60fa      	str	r2, [r7, #12]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	757b      	strb	r3, [r7, #21]
			crc_update(data);
 80006ae:	7d7b      	ldrb	r3, [r7, #21]
 80006b0:	4619      	mov	r1, r3
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f7ff ff9f 	bl	80005f6 <_ZN8RoboClaw10crc_updateEh>
			write(data);
 80006b8:	7d7b      	ldrb	r3, [r7, #21]
 80006ba:	4619      	mov	r1, r3
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff ff63 	bl	8000588 <_ZN8RoboClaw5writeEh>
		for(uint8_t index=0;index<cnt;index++){
 80006c2:	7dbb      	ldrb	r3, [r7, #22]
 80006c4:	3301      	adds	r3, #1
 80006c6:	75bb      	strb	r3, [r7, #22]
 80006c8:	e7e7      	b.n	800069a <_ZN8RoboClaw7write_nEhz+0x1e>
		}
		va_end( marker );              /* Reset variable arguments.      */
		uint16_t crc = crc_get();
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff ffca 	bl	8000664 <_ZN8RoboClaw7crc_getEv>
 80006d0:	4603      	mov	r3, r0
 80006d2:	827b      	strh	r3, [r7, #18]
		write(crc>>8);
 80006d4:	8a7b      	ldrh	r3, [r7, #18]
 80006d6:	0a1b      	lsrs	r3, r3, #8
 80006d8:	b29b      	uxth	r3, r3
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	4619      	mov	r1, r3
 80006de:	6878      	ldr	r0, [r7, #4]
 80006e0:	f7ff ff52 	bl	8000588 <_ZN8RoboClaw5writeEh>
		write(crc);
 80006e4:	8a7b      	ldrh	r3, [r7, #18]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	4619      	mov	r1, r3
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f7ff ff4c 	bl	8000588 <_ZN8RoboClaw5writeEh>
		if(read(timeout)==0xFF)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	685b      	ldr	r3, [r3, #4]
 80006f4:	4619      	mov	r1, r3
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff ff59 	bl	80005ae <_ZN8RoboClaw4readEm>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2bff      	cmp	r3, #255	; 0xff
 8000700:	bf0c      	ite	eq
 8000702:	2301      	moveq	r3, #1
 8000704:	2300      	movne	r3, #0
 8000706:	b2db      	uxtb	r3, r3
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <_ZN8RoboClaw7write_nEhz+0x94>
			return true;
 800070c:	2301      	movs	r3, #1
 800070e:	e00b      	b.n	8000728 <_ZN8RoboClaw7write_nEhz+0xac>
	}while(trys--);
 8000710:	7dfb      	ldrb	r3, [r7, #23]
 8000712:	1e5a      	subs	r2, r3, #1
 8000714:	75fa      	strb	r2, [r7, #23]
 8000716:	2b00      	cmp	r3, #0
 8000718:	bf14      	ite	ne
 800071a:	2301      	movne	r3, #1
 800071c:	2300      	moveq	r3, #0
 800071e:	b2db      	uxtb	r3, r3
 8000720:	2b00      	cmp	r3, #0
 8000722:	d000      	beq.n	8000726 <_ZN8RoboClaw7write_nEhz+0xaa>
	do{
 8000724:	e7b1      	b.n	800068a <_ZN8RoboClaw7write_nEhz+0xe>
	return false;
 8000726:	2300      	movs	r3, #0
}
 8000728:	4618      	mov	r0, r3
 800072a:	371c      	adds	r7, #28
 800072c:	46bd      	mov	sp, r7
 800072e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000732:	b003      	add	sp, #12
 8000734:	4770      	bx	lr

08000736 <_ZN8RoboClaw17ForwardBackwardM1Ehh>:

bool RoboClaw::BackwardM2(uint8_t address, uint8_t speed){
	return write_n(3,address,M2BACKWARD,speed);
}

bool RoboClaw::ForwardBackwardM1(uint8_t address, uint8_t speed){
 8000736:	b580      	push	{r7, lr}
 8000738:	b084      	sub	sp, #16
 800073a:	af02      	add	r7, sp, #8
 800073c:	6078      	str	r0, [r7, #4]
 800073e:	460b      	mov	r3, r1
 8000740:	70fb      	strb	r3, [r7, #3]
 8000742:	4613      	mov	r3, r2
 8000744:	70bb      	strb	r3, [r7, #2]
	return write_n(3,address,M17BIT,speed);
 8000746:	78fa      	ldrb	r2, [r7, #3]
 8000748:	78bb      	ldrb	r3, [r7, #2]
 800074a:	9300      	str	r3, [sp, #0]
 800074c:	2306      	movs	r3, #6
 800074e:	2103      	movs	r1, #3
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ff93 	bl	800067c <_ZN8RoboClaw7write_nEhz>
 8000756:	4603      	mov	r3, r0
}
 8000758:	4618      	mov	r0, r3
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	0a5a      	lsrs	r2, r3, #9
 8000770:	490f      	ldr	r1, [pc, #60]	; (80007b0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000772:	fba1 1202 	umull	r1, r2, r1, r2
 8000776:	09d2      	lsrs	r2, r2, #7
 8000778:	490e      	ldr	r1, [pc, #56]	; (80007b4 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800077a:	fb01 f202 	mul.w	r2, r1, r2
 800077e:	1a9b      	subs	r3, r3, r2
 8000780:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	0a5b      	lsrs	r3, r3, #9
 8000788:	4a09      	ldr	r2, [pc, #36]	; (80007b0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800078a:	fba2 2303 	umull	r2, r3, r2, r3
 800078e:	09db      	lsrs	r3, r3, #7
 8000790:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	441a      	add	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	68fa      	ldr	r2, [r7, #12]
 80007a2:	601a      	str	r2, [r3, #0]
}
 80007a4:	bf00      	nop
 80007a6:	3714      	adds	r7, #20
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	00044b83 	.word	0x00044b83
 80007b4:	3b9aca00 	.word	0x3b9aca00

080007b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007bc:	f003 fac9 	bl	8003d52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c0:	f000 f810 	bl	80007e4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c4:	f000 f9ae 	bl	8000b24 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80007c8:	f000 f96a 	bl	8000aa0 <_ZL11MX_DMA_Initv>
  MX_TIM2_Init();
 80007cc:	f000 f870 	bl	80008b0 <_ZL12MX_TIM2_Initv>
  MX_USART1_UART_Init();
 80007d0:	f000 f8fe 	bl	80009d0 <_ZL19MX_USART1_UART_Initv>
  MX_USART3_UART_Init();
 80007d4:	f000 f930 	bl	8000a38 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
  setup();
 80007d8:	f002 f8ea 	bl	80029b0 <setup>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    loop();
 80007dc:	f002 f8fe 	bl	80029dc <loop>
 80007e0:	e7fc      	b.n	80007dc <main+0x24>
	...

080007e4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b094      	sub	sp, #80	; 0x50
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	2234      	movs	r2, #52	; 0x34
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f008 f8c6 	bl	8008984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000808:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <_Z18SystemClock_Configv+0xc4>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	4a26      	ldr	r2, [pc, #152]	; (80008a8 <_Z18SystemClock_Configv+0xc4>)
 800080e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000812:	6413      	str	r3, [r2, #64]	; 0x40
 8000814:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <_Z18SystemClock_Configv+0xc4>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000820:	4b22      	ldr	r3, [pc, #136]	; (80008ac <_Z18SystemClock_Configv+0xc8>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000828:	4a20      	ldr	r2, [pc, #128]	; (80008ac <_Z18SystemClock_Configv+0xc8>)
 800082a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082e:	6013      	str	r3, [r2, #0]
 8000830:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <_Z18SystemClock_Configv+0xc8>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800083c:	2302      	movs	r3, #2
 800083e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000840:	2301      	movs	r3, #1
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000844:	2310      	movs	r3, #16
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000848:	2300      	movs	r3, #0
 800084a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4618      	mov	r0, r3
 8000852:	f004 f9bd 	bl	8004bd0 <HAL_RCC_OscConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	bf14      	ite	ne
 800085c:	2301      	movne	r3, #1
 800085e:	2300      	moveq	r3, #0
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8000866:	f000 fa73 	bl	8000d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086a:	230f      	movs	r3, #15
 800086c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800087e:	f107 0308 	add.w	r3, r7, #8
 8000882:	2100      	movs	r1, #0
 8000884:	4618      	mov	r0, r3
 8000886:	f004 fc51 	bl	800512c <HAL_RCC_ClockConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	bf14      	ite	ne
 8000890:	2301      	movne	r3, #1
 8000892:	2300      	moveq	r3, #0
 8000894:	b2db      	uxtb	r3, r3
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 800089a:	f000 fa59 	bl	8000d50 <Error_Handler>
  }
}
 800089e:	bf00      	nop
 80008a0:	3750      	adds	r7, #80	; 0x50
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40007000 	.word	0x40007000

080008b0 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08e      	sub	sp, #56	; 0x38
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d0:	463b      	mov	r3, r7
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]
 80008de:	615a      	str	r2, [r3, #20]
 80008e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008e2:	4b3a      	ldr	r3, [pc, #232]	; (80009cc <_ZL12MX_TIM2_Initv+0x11c>)
 80008e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 320-1;
 80008ea:	4b38      	ldr	r3, [pc, #224]	; (80009cc <_ZL12MX_TIM2_Initv+0x11c>)
 80008ec:	f240 123f 	movw	r2, #319	; 0x13f
 80008f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f2:	4b36      	ldr	r3, [pc, #216]	; (80009cc <_ZL12MX_TIM2_Initv+0x11c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80008f8:	4b34      	ldr	r3, [pc, #208]	; (80009cc <_ZL12MX_TIM2_Initv+0x11c>)
 80008fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000900:	4b32      	ldr	r3, [pc, #200]	; (80009cc <_ZL12MX_TIM2_Initv+0x11c>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000906:	4b31      	ldr	r3, [pc, #196]	; (80009cc <_ZL12MX_TIM2_Initv+0x11c>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800090c:	482f      	ldr	r0, [pc, #188]	; (80009cc <_ZL12MX_TIM2_Initv+0x11c>)
 800090e:	f005 fa59 	bl	8005dc4 <HAL_TIM_Base_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	bf14      	ite	ne
 8000918:	2301      	movne	r3, #1
 800091a:	2300      	moveq	r3, #0
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <_ZL12MX_TIM2_Initv+0x76>
  {
    Error_Handler();
 8000922:	f000 fa15 	bl	8000d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800092c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000930:	4619      	mov	r1, r3
 8000932:	4826      	ldr	r0, [pc, #152]	; (80009cc <_ZL12MX_TIM2_Initv+0x11c>)
 8000934:	f005 fe2c 	bl	8006590 <HAL_TIM_ConfigClockSource>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	bf14      	ite	ne
 800093e:	2301      	movne	r3, #1
 8000940:	2300      	moveq	r3, #0
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <_ZL12MX_TIM2_Initv+0x9c>
  {
    Error_Handler();
 8000948:	f000 fa02 	bl	8000d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800094c:	481f      	ldr	r0, [pc, #124]	; (80009cc <_ZL12MX_TIM2_Initv+0x11c>)
 800094e:	f005 fa90 	bl	8005e72 <HAL_TIM_PWM_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	bf14      	ite	ne
 8000958:	2301      	movne	r3, #1
 800095a:	2300      	moveq	r3, #0
 800095c:	b2db      	uxtb	r3, r3
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <_ZL12MX_TIM2_Initv+0xb6>
  {
    Error_Handler();
 8000962:	f000 f9f5 	bl	8000d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4815      	ldr	r0, [pc, #84]	; (80009cc <_ZL12MX_TIM2_Initv+0x11c>)
 8000976:	f006 fac5 	bl	8006f04 <HAL_TIMEx_MasterConfigSynchronization>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	bf14      	ite	ne
 8000980:	2301      	movne	r3, #1
 8000982:	2300      	moveq	r3, #0
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <_ZL12MX_TIM2_Initv+0xde>
  {
    Error_Handler();
 800098a:	f000 f9e1 	bl	8000d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800098e:	2360      	movs	r3, #96	; 0x60
 8000990:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800099e:	463b      	mov	r3, r7
 80009a0:	2200      	movs	r2, #0
 80009a2:	4619      	mov	r1, r3
 80009a4:	4809      	ldr	r0, [pc, #36]	; (80009cc <_ZL12MX_TIM2_Initv+0x11c>)
 80009a6:	f005 fcdf 	bl	8006368 <HAL_TIM_PWM_ConfigChannel>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	bf14      	ite	ne
 80009b0:	2301      	movne	r3, #1
 80009b2:	2300      	moveq	r3, #0
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 80009ba:	f000 f9c9 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009be:	4803      	ldr	r0, [pc, #12]	; (80009cc <_ZL12MX_TIM2_Initv+0x11c>)
 80009c0:	f002 fef2 	bl	80037a8 <HAL_TIM_MspPostInit>

}
 80009c4:	bf00      	nop
 80009c6:	3738      	adds	r7, #56	; 0x38
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000094 	.word	0x20000094

080009d0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009d4:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <_ZL19MX_USART1_UART_Initv+0x60>)
 80009d6:	4a17      	ldr	r2, [pc, #92]	; (8000a34 <_ZL19MX_USART1_UART_Initv+0x64>)
 80009d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <_ZL19MX_USART1_UART_Initv+0x60>)
 80009dc:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80009e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <_ZL19MX_USART1_UART_Initv+0x60>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <_ZL19MX_USART1_UART_Initv+0x60>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <_ZL19MX_USART1_UART_Initv+0x60>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <_ZL19MX_USART1_UART_Initv+0x60>)
 80009f6:	220c      	movs	r2, #12
 80009f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fa:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <_ZL19MX_USART1_UART_Initv+0x60>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a06:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a12:	4807      	ldr	r0, [pc, #28]	; (8000a30 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a14:	f006 fb22 	bl	800705c <HAL_UART_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	bf14      	ite	ne
 8000a1e:	2301      	movne	r3, #1
 8000a20:	2300      	moveq	r3, #0
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8000a28:	f000 f992 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200000e0 	.word	0x200000e0
 8000a34:	40011000 	.word	0x40011000

08000a38 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a3c:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000a3e:	4a17      	ldr	r2, [pc, #92]	; (8000a9c <_ZL19MX_USART3_UART_Initv+0x64>)
 8000a40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000a44:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000a48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a7a:	4807      	ldr	r0, [pc, #28]	; (8000a98 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000a7c:	f006 faee 	bl	800705c <HAL_UART_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	bf14      	ite	ne
 8000a86:	2301      	movne	r3, #1
 8000a88:	2300      	moveq	r3, #0
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 8000a90:	f000 f95e 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000168 	.word	0x20000168
 8000a9c:	40004800 	.word	0x40004800

08000aa0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <_ZL11MX_DMA_Initv+0x80>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a1d      	ldr	r2, [pc, #116]	; (8000b20 <_ZL11MX_DMA_Initv+0x80>)
 8000aac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <_ZL11MX_DMA_Initv+0x80>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <_ZL11MX_DMA_Initv+0x80>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a17      	ldr	r2, [pc, #92]	; (8000b20 <_ZL11MX_DMA_Initv+0x80>)
 8000ac4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <_ZL11MX_DMA_Initv+0x80>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	200c      	movs	r0, #12
 8000adc:	f003 fa71 	bl	8003fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ae0:	200c      	movs	r0, #12
 8000ae2:	f003 fa8a 	bl	8003ffa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	200e      	movs	r0, #14
 8000aec:	f003 fa69 	bl	8003fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000af0:	200e      	movs	r0, #14
 8000af2:	f003 fa82 	bl	8003ffa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	203a      	movs	r0, #58	; 0x3a
 8000afc:	f003 fa61 	bl	8003fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b00:	203a      	movs	r0, #58	; 0x3a
 8000b02:	f003 fa7a 	bl	8003ffa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2046      	movs	r0, #70	; 0x46
 8000b0c:	f003 fa59 	bl	8003fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000b10:	2046      	movs	r0, #70	; 0x46
 8000b12:	f003 fa72 	bl	8003ffa <HAL_NVIC_EnableIRQ>

}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800

08000b24 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08c      	sub	sp, #48	; 0x30
 8000b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3a:	4b7f      	ldr	r3, [pc, #508]	; (8000d38 <_ZL12MX_GPIO_Initv+0x214>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a7e      	ldr	r2, [pc, #504]	; (8000d38 <_ZL12MX_GPIO_Initv+0x214>)
 8000b40:	f043 0304 	orr.w	r3, r3, #4
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b7c      	ldr	r3, [pc, #496]	; (8000d38 <_ZL12MX_GPIO_Initv+0x214>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0304 	and.w	r3, r3, #4
 8000b4e:	61bb      	str	r3, [r7, #24]
 8000b50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b52:	4b79      	ldr	r3, [pc, #484]	; (8000d38 <_ZL12MX_GPIO_Initv+0x214>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a78      	ldr	r2, [pc, #480]	; (8000d38 <_ZL12MX_GPIO_Initv+0x214>)
 8000b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b76      	ldr	r3, [pc, #472]	; (8000d38 <_ZL12MX_GPIO_Initv+0x214>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	4b73      	ldr	r3, [pc, #460]	; (8000d38 <_ZL12MX_GPIO_Initv+0x214>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a72      	ldr	r2, [pc, #456]	; (8000d38 <_ZL12MX_GPIO_Initv+0x214>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b70      	ldr	r3, [pc, #448]	; (8000d38 <_ZL12MX_GPIO_Initv+0x214>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	4b6d      	ldr	r3, [pc, #436]	; (8000d38 <_ZL12MX_GPIO_Initv+0x214>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a6c      	ldr	r2, [pc, #432]	; (8000d38 <_ZL12MX_GPIO_Initv+0x214>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b6a      	ldr	r3, [pc, #424]	; (8000d38 <_ZL12MX_GPIO_Initv+0x214>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9a:	4b67      	ldr	r3, [pc, #412]	; (8000d38 <_ZL12MX_GPIO_Initv+0x214>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a66      	ldr	r2, [pc, #408]	; (8000d38 <_ZL12MX_GPIO_Initv+0x214>)
 8000ba0:	f043 0308 	orr.w	r3, r3, #8
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b64      	ldr	r3, [pc, #400]	; (8000d38 <_ZL12MX_GPIO_Initv+0x214>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0308 	and.w	r3, r3, #8
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb2:	4b61      	ldr	r3, [pc, #388]	; (8000d38 <_ZL12MX_GPIO_Initv+0x214>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a60      	ldr	r2, [pc, #384]	; (8000d38 <_ZL12MX_GPIO_Initv+0x214>)
 8000bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b5e      	ldr	r3, [pc, #376]	; (8000d38 <_ZL12MX_GPIO_Initv+0x214>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2101      	movs	r1, #1
 8000bce:	485b      	ldr	r0, [pc, #364]	; (8000d3c <_ZL12MX_GPIO_Initv+0x218>)
 8000bd0:	f003 ffe4 	bl	8004b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2140      	movs	r1, #64	; 0x40
 8000bd8:	4859      	ldr	r0, [pc, #356]	; (8000d40 <_ZL12MX_GPIO_Initv+0x21c>)
 8000bda:	f003 ffdf 	bl	8004b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4853      	ldr	r0, [pc, #332]	; (8000d44 <_ZL12MX_GPIO_Initv+0x220>)
 8000bf6:	f003 fe25 	bl	8004844 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bfa:	2332      	movs	r3, #50	; 0x32
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c0a:	230b      	movs	r3, #11
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	484b      	ldr	r0, [pc, #300]	; (8000d44 <_ZL12MX_GPIO_Initv+0x220>)
 8000c16:	f003 fe15 	bl	8004844 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8000c1a:	2306      	movs	r3, #6
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c2a:	230b      	movs	r3, #11
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	4844      	ldr	r0, [pc, #272]	; (8000d48 <_ZL12MX_GPIO_Initv+0x224>)
 8000c36:	f003 fe05 	bl	8004844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c3a:	2380      	movs	r3, #128	; 0x80
 8000c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4619      	mov	r1, r3
 8000c54:	483c      	ldr	r0, [pc, #240]	; (8000d48 <_ZL12MX_GPIO_Initv+0x224>)
 8000c56:	f003 fdf5 	bl	8004844 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4832      	ldr	r0, [pc, #200]	; (8000d3c <_ZL12MX_GPIO_Initv+0x218>)
 8000c72:	f003 fde7 	bl	8004844 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c84:	2303      	movs	r3, #3
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c88:	230b      	movs	r3, #11
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	4619      	mov	r1, r3
 8000c92:	482a      	ldr	r0, [pc, #168]	; (8000d3c <_ZL12MX_GPIO_Initv+0x218>)
 8000c94:	f003 fdd6 	bl	8004844 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c98:	2340      	movs	r3, #64	; 0x40
 8000c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f107 031c 	add.w	r3, r7, #28
 8000cac:	4619      	mov	r1, r3
 8000cae:	4824      	ldr	r0, [pc, #144]	; (8000d40 <_ZL12MX_GPIO_Initv+0x21c>)
 8000cb0:	f003 fdc8 	bl	8004844 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cb4:	2380      	movs	r3, #128	; 0x80
 8000cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	481e      	ldr	r0, [pc, #120]	; (8000d40 <_ZL12MX_GPIO_Initv+0x21c>)
 8000cc8:	f003 fdbc 	bl	8004844 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ccc:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cde:	230a      	movs	r3, #10
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4817      	ldr	r0, [pc, #92]	; (8000d48 <_ZL12MX_GPIO_Initv+0x224>)
 8000cea:	f003 fdab 	bl	8004844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cee:	2340      	movs	r3, #64	; 0x40
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cfe:	2307      	movs	r3, #7
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	4810      	ldr	r0, [pc, #64]	; (8000d4c <_ZL12MX_GPIO_Initv+0x228>)
 8000d0a:	f003 fd9b 	bl	8004844 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d0e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d20:	230b      	movs	r3, #11
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <_ZL12MX_GPIO_Initv+0x21c>)
 8000d2c:	f003 fd8a 	bl	8004844 <HAL_GPIO_Init>

}
 8000d30:	bf00      	nop
 8000d32:	3730      	adds	r7, #48	; 0x30
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40020400 	.word	0x40020400
 8000d40:	40021800 	.word	0x40021800
 8000d44:	40020800 	.word	0x40020800
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	40020c00 	.word	0x40020c00

08000d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d54:	b672      	cpsid	i
}
 8000d56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <Error_Handler+0x8>

08000d5a <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4618      	mov	r0, r3
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <_ZN3ros3MsgC1Ev+0x1c>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	08008f4c 	.word	0x08008f4c

08000d9c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
      data()
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff ffe8 	bl	8000d7c <_ZN3ros3MsgC1Ev>
 8000dac:	4a06      	ldr	r2, [pc, #24]	; (8000dc8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3304      	adds	r3, #4
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ffcf 	bl	8000d5a <_ZN3ros4TimeC1Ev>
    {
    }
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	08008f34 	.word	0x08008f34

08000dcc <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6859      	ldr	r1, [r3, #4]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	683a      	ldr	r2, [r7, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	b2ca      	uxtb	r2, r1
 8000de6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	0a19      	lsrs	r1, r3, #8
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	3301      	adds	r3, #1
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	4413      	add	r3, r2
 8000df6:	b2ca      	uxtb	r2, r1
 8000df8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	0c19      	lsrs	r1, r3, #16
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	3302      	adds	r3, #2
 8000e04:	683a      	ldr	r2, [r7, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	b2ca      	uxtb	r2, r1
 8000e0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	0e19      	lsrs	r1, r3, #24
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	3303      	adds	r3, #3
 8000e16:	683a      	ldr	r2, [r7, #0]
 8000e18:	4413      	add	r3, r2
 8000e1a:	b2ca      	uxtb	r2, r1
 8000e1c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	3304      	adds	r3, #4
 8000e22:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6899      	ldr	r1, [r3, #8]
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	683a      	ldr	r2, [r7, #0]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	b2ca      	uxtb	r2, r1
 8000e30:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	0a19      	lsrs	r1, r3, #8
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	683a      	ldr	r2, [r7, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	b2ca      	uxtb	r2, r1
 8000e42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	0c19      	lsrs	r1, r3, #16
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	3302      	adds	r3, #2
 8000e4e:	683a      	ldr	r2, [r7, #0]
 8000e50:	4413      	add	r3, r2
 8000e52:	b2ca      	uxtb	r2, r1
 8000e54:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	0e19      	lsrs	r1, r3, #24
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	3303      	adds	r3, #3
 8000e60:	683a      	ldr	r2, [r7, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	b2ca      	uxtb	r2, r1
 8000e66:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	3304      	adds	r3, #4
 8000e6c:	60fb      	str	r3, [r7, #12]
      return offset;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
    }
 8000e70:	4618      	mov	r0, r3
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	683a      	ldr	r2, [r7, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685a      	ldr	r2, [r3, #4]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	6839      	ldr	r1, [r7, #0]
 8000ea2:	440b      	add	r3, r1
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	021b      	lsls	r3, r3, #8
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	6839      	ldr	r1, [r7, #0]
 8000eb8:	440b      	add	r3, r1
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	041b      	lsls	r3, r3, #16
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	3303      	adds	r3, #3
 8000ecc:	6839      	ldr	r1, [r7, #0]
 8000ece:	440b      	add	r3, r1
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	061b      	lsls	r3, r3, #24
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	3304      	adds	r3, #4
 8000ede:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	683a      	ldr	r2, [r7, #0]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	6839      	ldr	r1, [r7, #0]
 8000ef8:	440b      	add	r3, r1
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	021b      	lsls	r3, r3, #8
 8000efe:	431a      	orrs	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689a      	ldr	r2, [r3, #8]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	3302      	adds	r3, #2
 8000f0c:	6839      	ldr	r1, [r7, #0]
 8000f0e:	440b      	add	r3, r1
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	041b      	lsls	r3, r3, #16
 8000f14:	431a      	orrs	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	3303      	adds	r3, #3
 8000f22:	6839      	ldr	r1, [r7, #0]
 8000f24:	440b      	add	r3, r1
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	061b      	lsls	r3, r3, #24
 8000f2a:	431a      	orrs	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	3304      	adds	r3, #4
 8000f34:	60fb      	str	r3, [r7, #12]
     return offset;
 8000f36:	68fb      	ldr	r3, [r7, #12]
    }
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	08008cb0 	.word	0x08008cb0

08000f60 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	08008cc0 	.word	0x08008cc0

08000f7c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fef8 	bl	8000d7c <_ZN3ros3MsgC1Ev>
 8000f8c:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	809a      	strh	r2, [r3, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a09      	ldr	r2, [pc, #36]	; (8000fc0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a06      	ldr	r2, [pc, #24]	; (8000fc0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000fa8:	611a      	str	r2, [r3, #16]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	615a      	str	r2, [r3, #20]
    {
    }
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	08008f1c 	.word	0x08008f1c
 8000fc0:	08008ce4 	.word	0x08008ce4

08000fc4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	8899      	ldrh	r1, [r3, #4]
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	b2ca      	uxtb	r2, r1
 8000fde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	889b      	ldrh	r3, [r3, #4]
 8000fe4:	0a1b      	lsrs	r3, r3, #8
 8000fe6:	b299      	uxth	r1, r3
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	3301      	adds	r3, #1
 8000fec:	683a      	ldr	r2, [r7, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	b2ca      	uxtb	r2, r1
 8000ff2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff f91a 	bl	8000238 <strlen>
 8001004:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	4413      	add	r3, r2
 800100c:	69b9      	ldr	r1, [r7, #24]
 800100e:	4618      	mov	r0, r3
 8001010:	f001 fd26 	bl	8002a60 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	3304      	adds	r3, #4
 8001018:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	18d0      	adds	r0, r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4619      	mov	r1, r3
 8001028:	f007 fc9e 	bl	8008968 <memcpy>
      offset += length_topic_name;
 800102c:	69fa      	ldr	r2, [r7, #28]
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	4413      	add	r3, r2
 8001032:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff f8fd 	bl	8000238 <strlen>
 800103e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	4413      	add	r3, r2
 8001046:	6979      	ldr	r1, [r7, #20]
 8001048:	4618      	mov	r0, r3
 800104a:	f001 fd09 	bl	8002a60 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3304      	adds	r3, #4
 8001052:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	18d0      	adds	r0, r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	4619      	mov	r1, r3
 8001062:	f007 fc81 	bl	8008968 <memcpy>
      offset += length_message_type;
 8001066:	69fa      	ldr	r2, [r7, #28]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	4413      	add	r3, r2
 800106c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	691b      	ldr	r3, [r3, #16]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff f8e0 	bl	8000238 <strlen>
 8001078:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	4413      	add	r3, r2
 8001080:	6939      	ldr	r1, [r7, #16]
 8001082:	4618      	mov	r0, r3
 8001084:	f001 fcec 	bl	8002a60 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	3304      	adds	r3, #4
 800108c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	18d0      	adds	r0, r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4619      	mov	r1, r3
 800109c:	f007 fc64 	bl	8008968 <memcpy>
      offset += length_md5sum;
 80010a0:	69fa      	ldr	r2, [r7, #28]
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	4413      	add	r3, r2
 80010a6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80010ae:	68f9      	ldr	r1, [r7, #12]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	4413      	add	r3, r2
 80010b6:	b2ca      	uxtb	r2, r1
 80010b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	0a19      	lsrs	r1, r3, #8
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3301      	adds	r3, #1
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	4413      	add	r3, r2
 80010c6:	b2ca      	uxtb	r2, r1
 80010c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	0c19      	lsrs	r1, r3, #16
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3302      	adds	r3, #2
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	4413      	add	r3, r2
 80010d6:	b2ca      	uxtb	r2, r1
 80010d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	0e19      	lsrs	r1, r3, #24
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3303      	adds	r3, #3
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	4413      	add	r3, r2
 80010e6:	b2ca      	uxtb	r2, r1
 80010e8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	61fb      	str	r3, [r7, #28]
      return offset;
 80010f0:	69fb      	ldr	r3, [r7, #28]
    }
 80010f2:	4618      	mov	r0, r3
 80010f4:	3720      	adds	r7, #32
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b08a      	sub	sp, #40	; 0x28
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	4413      	add	r3, r2
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b29a      	uxth	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	889b      	ldrh	r3, [r3, #4]
 800111a:	b21a      	sxth	r2, r3
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	3301      	adds	r3, #1
 8001120:	6839      	ldr	r1, [r7, #0]
 8001122:	440b      	add	r3, r1
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	b21b      	sxth	r3, r3
 800112a:	4313      	orrs	r3, r2
 800112c:	b21b      	sxth	r3, r3
 800112e:	b29a      	uxth	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	3302      	adds	r3, #2
 8001138:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	441a      	add	r2, r3
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4611      	mov	r1, r2
 8001146:	4618      	mov	r0, r3
 8001148:	f001 fca8 	bl	8002a9c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	3304      	adds	r3, #4
 8001150:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	4413      	add	r3, r2
 800115c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800115e:	429a      	cmp	r2, r3
 8001160:	d20c      	bcs.n	800117c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	441a      	add	r2, r3
 8001168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116a:	3b01      	subs	r3, #1
 800116c:	6839      	ldr	r1, [r7, #0]
 800116e:	440b      	add	r3, r1
 8001170:	7812      	ldrb	r2, [r2, #0]
 8001172:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001176:	3301      	adds	r3, #1
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
 800117a:	e7ec      	b.n	8001156 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	4413      	add	r3, r2
 8001182:	3b01      	subs	r3, #1
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	4413      	add	r3, r2
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	3b01      	subs	r3, #1
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	441a      	add	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	4413      	add	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	441a      	add	r2, r3
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f001 fc75 	bl	8002a9c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	3304      	adds	r3, #4
 80011b6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	623b      	str	r3, [r7, #32]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4413      	add	r3, r2
 80011c2:	6a3a      	ldr	r2, [r7, #32]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d20c      	bcs.n	80011e2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	6a3b      	ldr	r3, [r7, #32]
 80011cc:	441a      	add	r2, r3
 80011ce:	6a3b      	ldr	r3, [r7, #32]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	6839      	ldr	r1, [r7, #0]
 80011d4:	440b      	add	r3, r1
 80011d6:	7812      	ldrb	r2, [r2, #0]
 80011d8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80011da:	6a3b      	ldr	r3, [r7, #32]
 80011dc:	3301      	adds	r3, #1
 80011de:	623b      	str	r3, [r7, #32]
 80011e0:	e7ec      	b.n	80011bc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4413      	add	r3, r2
 80011e8:	3b01      	subs	r3, #1
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	4413      	add	r3, r2
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	441a      	add	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4413      	add	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	441a      	add	r2, r3
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	4611      	mov	r1, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f001 fc42 	bl	8002a9c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	3304      	adds	r3, #4
 800121c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	61fb      	str	r3, [r7, #28]
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4413      	add	r3, r2
 8001228:	69fa      	ldr	r2, [r7, #28]
 800122a:	429a      	cmp	r2, r3
 800122c:	d20c      	bcs.n	8001248 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	441a      	add	r2, r3
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	3b01      	subs	r3, #1
 8001238:	6839      	ldr	r1, [r7, #0]
 800123a:	440b      	add	r3, r1
 800123c:	7812      	ldrb	r2, [r2, #0]
 800123e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	3301      	adds	r3, #1
 8001244:	61fb      	str	r3, [r7, #28]
 8001246:	e7ec      	b.n	8001222 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4413      	add	r3, r2
 800124e:	3b01      	subs	r3, #1
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	4413      	add	r3, r2
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	3b01      	subs	r3, #1
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	441a      	add	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4413      	add	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	6839      	ldr	r1, [r7, #0]
 8001276:	440a      	add	r2, r1
 8001278:	7812      	ldrb	r2, [r2, #0]
 800127a:	4313      	orrs	r3, r2
 800127c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	3301      	adds	r3, #1
 8001284:	6839      	ldr	r1, [r7, #0]
 8001286:	440b      	add	r3, r1
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	4313      	orrs	r3, r2
 800128e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	3302      	adds	r3, #2
 8001296:	6839      	ldr	r1, [r7, #0]
 8001298:	440b      	add	r3, r1
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	041b      	lsls	r3, r3, #16
 800129e:	4313      	orrs	r3, r2
 80012a0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	3303      	adds	r3, #3
 80012a8:	6839      	ldr	r1, [r7, #0]
 80012aa:	440b      	add	r3, r1
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	061b      	lsls	r3, r3, #24
 80012b0:	4313      	orrs	r3, r2
 80012b2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	3304      	adds	r3, #4
 80012be:	61bb      	str	r3, [r7, #24]
     return offset;
 80012c0:	69bb      	ldr	r3, [r7, #24]
    }
 80012c2:	4618      	mov	r0, r3
 80012c4:	3728      	adds	r7, #40	; 0x28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	08008ce8 	.word	0x08008ce8

080012e8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	08008d04 	.word	0x08008d04

08001304 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fd34 	bl	8000d7c <_ZN3ros3MsgC1Ev>
 8001314:	4a06      	ldr	r2, [pc, #24]	; (8001330 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	711a      	strb	r2, [r3, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a04      	ldr	r2, [pc, #16]	; (8001334 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001324:	609a      	str	r2, [r3, #8]
    {
    }
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	08008f04 	.word	0x08008f04
 8001334:	08008ce4 	.word	0x08008ce4

08001338 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	4413      	add	r3, r2
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	7912      	ldrb	r2, [r2, #4]
 8001350:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	3301      	adds	r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	4618      	mov	r0, r3
 800135e:	f7fe ff6b 	bl	8000238 <strlen>
 8001362:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	4413      	add	r3, r2
 800136a:	68b9      	ldr	r1, [r7, #8]
 800136c:	4618      	mov	r0, r3
 800136e:	f001 fb77 	bl	8002a60 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	3304      	adds	r3, #4
 8001376:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	18d0      	adds	r0, r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	4619      	mov	r1, r3
 8001386:	f007 faef 	bl	8008968 <memcpy>
      offset += length_msg;
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4413      	add	r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
      return offset;
 8001392:	68fb      	ldr	r3, [r7, #12]
    }
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	4413      	add	r3, r2
 80013b0:	781a      	ldrb	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	3301      	adds	r3, #1
 80013ba:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	441a      	add	r2, r3
 80013c2:	f107 030c 	add.w	r3, r7, #12
 80013c6:	4611      	mov	r1, r2
 80013c8:	4618      	mov	r0, r3
 80013ca:	f001 fb67 	bl	8002a9c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	3304      	adds	r3, #4
 80013d2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4413      	add	r3, r2
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d20c      	bcs.n	80013fe <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	441a      	add	r2, r3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	6839      	ldr	r1, [r7, #0]
 80013f0:	440b      	add	r3, r1
 80013f2:	7812      	ldrb	r2, [r2, #0]
 80013f4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	3301      	adds	r3, #1
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	e7ec      	b.n	80013d8 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4413      	add	r3, r2
 8001404:	3b01      	subs	r3, #1
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	4413      	add	r3, r2
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	3b01      	subs	r3, #1
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	441a      	add	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4413      	add	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
     return offset;
 8001422:	693b      	ldr	r3, [r7, #16]
    }
 8001424:	4618      	mov	r0, r3
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	08008d28 	.word	0x08008d28

08001448 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	08008d3c 	.word	0x08008d3c

08001464 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fc84 	bl	8000d7c <_ZN3ros3MsgC1Ev>
 8001474:	4a11      	ldr	r2, [pc, #68]	; (80014bc <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	611a      	str	r2, [r3, #16]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	615a      	str	r2, [r3, #20]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	08008eec 	.word	0x08008eec

080014c0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6859      	ldr	r1, [r3, #4]
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	4413      	add	r3, r2
 80014d8:	b2ca      	uxtb	r2, r1
 80014da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	0a19      	lsrs	r1, r3, #8
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	3301      	adds	r3, #1
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	4413      	add	r3, r2
 80014ea:	b2ca      	uxtb	r2, r1
 80014ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	0c19      	lsrs	r1, r3, #16
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	3302      	adds	r3, #2
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	b2ca      	uxtb	r2, r1
 80014fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	0e19      	lsrs	r1, r3, #24
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	3303      	adds	r3, #3
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	4413      	add	r3, r2
 800150e:	b2ca      	uxtb	r2, r1
 8001510:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	3304      	adds	r3, #4
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001518:	2300      	movs	r3, #0
 800151a:	623b      	str	r3, [r7, #32]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	6a3a      	ldr	r2, [r7, #32]
 8001522:	429a      	cmp	r2, r3
 8001524:	d22b      	bcs.n	800157e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68da      	ldr	r2, [r3, #12]
 800152a:	6a3b      	ldr	r3, [r7, #32]
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001534:	6939      	ldr	r1, [r7, #16]
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	4413      	add	r3, r2
 800153c:	b2ca      	uxtb	r2, r1
 800153e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	0a19      	lsrs	r1, r3, #8
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	3301      	adds	r3, #1
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	4413      	add	r3, r2
 800154c:	b2ca      	uxtb	r2, r1
 800154e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	0c19      	lsrs	r1, r3, #16
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	3302      	adds	r3, #2
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	4413      	add	r3, r2
 800155c:	b2ca      	uxtb	r2, r1
 800155e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	0e19      	lsrs	r1, r3, #24
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	3303      	adds	r3, #3
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	4413      	add	r3, r2
 800156c:	b2ca      	uxtb	r2, r1
 800156e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	3304      	adds	r3, #4
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001576:	6a3b      	ldr	r3, [r7, #32]
 8001578:	3301      	adds	r3, #1
 800157a:	623b      	str	r3, [r7, #32]
 800157c:	e7ce      	b.n	800151c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6919      	ldr	r1, [r3, #16]
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	4413      	add	r3, r2
 8001588:	b2ca      	uxtb	r2, r1
 800158a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	0a19      	lsrs	r1, r3, #8
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	3301      	adds	r3, #1
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	4413      	add	r3, r2
 800159a:	b2ca      	uxtb	r2, r1
 800159c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	0c19      	lsrs	r1, r3, #16
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	3302      	adds	r3, #2
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	4413      	add	r3, r2
 80015ac:	b2ca      	uxtb	r2, r1
 80015ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	0e19      	lsrs	r1, r3, #24
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	3303      	adds	r3, #3
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	4413      	add	r3, r2
 80015be:	b2ca      	uxtb	r2, r1
 80015c0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	3304      	adds	r3, #4
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	69fa      	ldr	r2, [r7, #28]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d22b      	bcs.n	800162e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699a      	ldr	r2, [r3, #24]
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80015e4:	68f9      	ldr	r1, [r7, #12]
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	b2ca      	uxtb	r2, r1
 80015ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	0a19      	lsrs	r1, r3, #8
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	3301      	adds	r3, #1
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	b2ca      	uxtb	r2, r1
 80015fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	0c19      	lsrs	r1, r3, #16
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	3302      	adds	r3, #2
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	4413      	add	r3, r2
 800160c:	b2ca      	uxtb	r2, r1
 800160e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	0e19      	lsrs	r1, r3, #24
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	3303      	adds	r3, #3
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	4413      	add	r3, r2
 800161c:	b2ca      	uxtb	r2, r1
 800161e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	3304      	adds	r3, #4
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3301      	adds	r3, #1
 800162a:	61fb      	str	r3, [r7, #28]
 800162c:	e7ce      	b.n	80015cc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69d9      	ldr	r1, [r3, #28]
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	4413      	add	r3, r2
 8001638:	b2ca      	uxtb	r2, r1
 800163a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69db      	ldr	r3, [r3, #28]
 8001640:	0a19      	lsrs	r1, r3, #8
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	3301      	adds	r3, #1
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	4413      	add	r3, r2
 800164a:	b2ca      	uxtb	r2, r1
 800164c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	0c19      	lsrs	r1, r3, #16
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	3302      	adds	r3, #2
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	4413      	add	r3, r2
 800165c:	b2ca      	uxtb	r2, r1
 800165e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	0e19      	lsrs	r1, r3, #24
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	3303      	adds	r3, #3
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	4413      	add	r3, r2
 800166e:	b2ca      	uxtb	r2, r1
 8001670:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	3304      	adds	r3, #4
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001678:	2300      	movs	r3, #0
 800167a:	61bb      	str	r3, [r7, #24]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	429a      	cmp	r2, r3
 8001684:	d228      	bcs.n	80016d8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe fdd0 	bl	8000238 <strlen>
 8001698:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	6979      	ldr	r1, [r7, #20]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f001 f9dc 	bl	8002a60 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	3304      	adds	r3, #4
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	18d0      	adds	r0, r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	4619      	mov	r1, r3
 80016c4:	f007 f950 	bl	8008968 <memcpy>
      offset += length_stringsi;
 80016c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	4413      	add	r3, r2
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	3301      	adds	r3, #1
 80016d4:	61bb      	str	r3, [r7, #24]
 80016d6:	e7d1      	b.n	800167c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80016da:	4618      	mov	r0, r3
 80016dc:	3728      	adds	r7, #40	; 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b08e      	sub	sp, #56	; 0x38
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80016f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	4413      	add	r3, r2
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80016fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016fc:	3301      	adds	r3, #1
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	4413      	add	r3, r2
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	021b      	lsls	r3, r3, #8
 8001706:	6a3a      	ldr	r2, [r7, #32]
 8001708:	4313      	orrs	r3, r2
 800170a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800170c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800170e:	3302      	adds	r3, #2
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	4413      	add	r3, r2
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	041b      	lsls	r3, r3, #16
 8001718:	6a3a      	ldr	r2, [r7, #32]
 800171a:	4313      	orrs	r3, r2
 800171c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800171e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001720:	3303      	adds	r3, #3
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	4413      	add	r3, r2
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	061b      	lsls	r3, r3, #24
 800172a:	6a3a      	ldr	r2, [r7, #32]
 800172c:	4313      	orrs	r3, r2
 800172e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001732:	3304      	adds	r3, #4
 8001734:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	6a3a      	ldr	r2, [r7, #32]
 800173c:	429a      	cmp	r2, r3
 800173e:	d90a      	bls.n	8001756 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	6a3b      	ldr	r3, [r7, #32]
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4619      	mov	r1, r3
 800174a:	4610      	mov	r0, r2
 800174c:	f007 f922 	bl	8008994 <realloc>
 8001750:	4602      	mov	r2, r0
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a3a      	ldr	r2, [r7, #32]
 800175a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 800175c:	2300      	movs	r3, #0
 800175e:	633b      	str	r3, [r7, #48]	; 0x30
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001766:	429a      	cmp	r2, r3
 8001768:	d236      	bcs.n	80017d8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001772:	6839      	ldr	r1, [r7, #0]
 8001774:	440a      	add	r2, r1
 8001776:	7812      	ldrb	r2, [r2, #0]
 8001778:	4313      	orrs	r3, r2
 800177a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001780:	3301      	adds	r3, #1
 8001782:	6839      	ldr	r1, [r7, #0]
 8001784:	440b      	add	r3, r1
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	021b      	lsls	r3, r3, #8
 800178a:	4313      	orrs	r3, r2
 800178c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001792:	3302      	adds	r3, #2
 8001794:	6839      	ldr	r1, [r7, #0]
 8001796:	440b      	add	r3, r1
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	041b      	lsls	r3, r3, #16
 800179c:	4313      	orrs	r3, r2
 800179e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a4:	3303      	adds	r3, #3
 80017a6:	6839      	ldr	r1, [r7, #0]
 80017a8:	440b      	add	r3, r1
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	061b      	lsls	r3, r3, #24
 80017ae:	4313      	orrs	r3, r2
 80017b0:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80017b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ba:	3304      	adds	r3, #4
 80017bc:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	3208      	adds	r2, #8
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80017d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d2:	3301      	adds	r3, #1
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
 80017d6:	e7c3      	b.n	8001760 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80017d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	4413      	add	r3, r2
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80017e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e4:	3301      	adds	r3, #1
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	4413      	add	r3, r2
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80017f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f6:	3302      	adds	r3, #2
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	041b      	lsls	r3, r3, #16
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	4313      	orrs	r3, r2
 8001804:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001808:	3303      	adds	r3, #3
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	4413      	add	r3, r2
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	061b      	lsls	r3, r3, #24
 8001812:	69fa      	ldr	r2, [r7, #28]
 8001814:	4313      	orrs	r3, r2
 8001816:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800181a:	3304      	adds	r3, #4
 800181c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	429a      	cmp	r2, r3
 8001826:	d90a      	bls.n	800183e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	699a      	ldr	r2, [r3, #24]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4619      	mov	r1, r3
 8001832:	4610      	mov	r0, r2
 8001834:	f007 f8ae 	bl	8008994 <realloc>
 8001838:	4602      	mov	r2, r0
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69fa      	ldr	r2, [r7, #28]
 8001842:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001844:	2300      	movs	r3, #0
 8001846:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800184e:	429a      	cmp	r2, r3
 8001850:	d236      	bcs.n	80018c0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800185a:	6839      	ldr	r1, [r7, #0]
 800185c:	440a      	add	r2, r1
 800185e:	7812      	ldrb	r2, [r2, #0]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001868:	3301      	adds	r3, #1
 800186a:	6839      	ldr	r1, [r7, #0]
 800186c:	440b      	add	r3, r1
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	021b      	lsls	r3, r3, #8
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800187a:	3302      	adds	r3, #2
 800187c:	6839      	ldr	r1, [r7, #0]
 800187e:	440b      	add	r3, r1
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	041b      	lsls	r3, r3, #16
 8001884:	4313      	orrs	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800188c:	3303      	adds	r3, #3
 800188e:	6839      	ldr	r1, [r7, #0]
 8001890:	440b      	add	r3, r1
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	061b      	lsls	r3, r3, #24
 8001896:	4313      	orrs	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80018a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a2:	3304      	adds	r3, #4
 80018a4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	699a      	ldr	r2, [r3, #24]
 80018aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	3214      	adds	r2, #20
 80018b4:	6812      	ldr	r2, [r2, #0]
 80018b6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80018b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ba:	3301      	adds	r3, #1
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018be:	e7c3      	b.n	8001848 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80018c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	4413      	add	r3, r2
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80018ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018cc:	3301      	adds	r3, #1
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	4413      	add	r3, r2
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	021b      	lsls	r3, r3, #8
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80018dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018de:	3302      	adds	r3, #2
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	041b      	lsls	r3, r3, #16
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80018ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f0:	3303      	adds	r3, #3
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	4413      	add	r3, r2
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	061b      	lsls	r3, r3, #24
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001902:	3304      	adds	r3, #4
 8001904:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	429a      	cmp	r2, r3
 800190e:	d90a      	bls.n	8001926 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4619      	mov	r1, r3
 800191a:	4610      	mov	r0, r2
 800191c:	f007 f83a 	bl	8008994 <realloc>
 8001920:	4602      	mov	r2, r0
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800192c:	2300      	movs	r3, #0
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001936:	429a      	cmp	r2, r3
 8001938:	d23f      	bcs.n	80019ba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800193a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	441a      	add	r2, r3
 8001940:	f107 030c 	add.w	r3, r7, #12
 8001944:	4611      	mov	r1, r2
 8001946:	4618      	mov	r0, r3
 8001948:	f001 f8a8 	bl	8002a9c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800194c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800194e:	3304      	adds	r3, #4
 8001950:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
 8001956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4413      	add	r3, r2
 800195c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800195e:	429a      	cmp	r2, r3
 8001960:	d20c      	bcs.n	800197c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	441a      	add	r2, r3
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	3b01      	subs	r3, #1
 800196c:	6839      	ldr	r1, [r7, #0]
 800196e:	440b      	add	r3, r1
 8001970:	7812      	ldrb	r2, [r2, #0]
 8001972:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	3301      	adds	r3, #1
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
 800197a:	e7ec      	b.n	8001956 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800197c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4413      	add	r3, r2
 8001982:	3b01      	subs	r3, #1
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	4413      	add	r3, r2
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800198c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198e:	3b01      	subs	r3, #1
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	441a      	add	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001998:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4413      	add	r3, r2
 800199e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	3220      	adds	r2, #32
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80019b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b4:	3301      	adds	r3, #1
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80019b8:	e7ba      	b.n	8001930 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80019ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80019bc:	4618      	mov	r0, r3
 80019be:	3738      	adds	r7, #56	; 0x38
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80019ce:	4618      	mov	r0, r3
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	08008e40 	.word	0x08008e40

080019e0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	08008d60 	.word	0x08008d60

080019fc <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
  }
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 16384;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f5c3 4380 	rsb	r3, r3, #16384	; 0x4000
 8001a2a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 16384;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a0d      	ldr	r2, [pc, #52]	; (8001a7c <_ZN13STM32HardwareC1Ev+0x40>)
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001a50:	461a      	mov	r2, r3
 8001a52:	2300      	movs	r3, #0
 8001a54:	6053      	str	r3, [r2, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	2300      	movs	r3, #0
 8001a60:	6093      	str	r3, [r2, #8]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001a68:	461a      	mov	r2, r3
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60d3      	str	r3, [r2, #12]
    }
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	20000168 	.word	0x20000168

08001a80 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f804 	bl	8001a96 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6818      	ldr	r0, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f005 fce8 	bl	8007480 <HAL_UART_Receive_DMA>
    }
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac4:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001acc:	685c      	ldr	r4, [r3, #4]
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ffa0 	bl	8001a14 <_ZN13STM32Hardware10getRdmaIndEv>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	429c      	cmp	r4, r3
 8001ad8:	bf14      	ite	ne
 8001ada:	2301      	movne	r3, #1
 8001adc:	2300      	moveq	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d016      	beq.n	8001b12 <_ZN13STM32Hardware4readEv+0x5a>
        c = rbuf[rind++];
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	1c5a      	adds	r2, r3, #1
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8001af4:	604a      	str	r2, [r1, #4]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	791b      	ldrb	r3, [r3, #4]
 8001afc:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001b10:	6053      	str	r3, [r2, #4]
      }
      return c;
 8001b12:	68fb      	ldr	r3, [r7, #12]
    }
 8001b14:	4618      	mov	r0, r3
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd90      	pop	{r4, r7, pc}

08001b1c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b2a:	2b20      	cmp	r3, #32
 8001b2c:	d108      	bne.n	8001b40 <_ZN13STM32Hardware5flushEv+0x24>
 8001b2e:	4b3a      	ldr	r3, [pc, #232]	; (8001c18 <_ZN13STM32Hardware5flushEv+0xfc>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	f083 0301 	eor.w	r3, r3, #1
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <_ZN13STM32Hardware5flushEv+0x24>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <_ZN13STM32Hardware5flushEv+0x26>
 8001b40:	2300      	movs	r3, #0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d064      	beq.n	8001c10 <_ZN13STM32Hardware5flushEv+0xf4>
        mutex = true;
 8001b46:	4b34      	ldr	r3, [pc, #208]	; (8001c18 <_ZN13STM32Hardware5flushEv+0xfc>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d054      	beq.n	8001c0a <_ZN13STM32Hardware5flushEv+0xee>
          uint16_t len = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d21b      	bcs.n	8001bb0 <_ZN13STM32Hardware5flushEv+0x94>
			len = twind - tfind;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	f244 0308 	movw	r3, #16392	; 0x4008
 8001ba0:	4413      	add	r3, r2
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	89fa      	ldrh	r2, [r7, #14]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f005 fbed 	bl	8007388 <HAL_UART_Transmit_DMA>
 8001bae:	e024      	b.n	8001bfa <_ZN13STM32Hardware5flushEv+0xde>
		  }else{
			len = tbuflen - tfind;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	f5c3 4380 	rsb	r3, r3, #16384	; 0x4000
 8001bbe:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	f244 0308 	movw	r3, #16392	; 0x4008
 8001bd0:	4413      	add	r3, r2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	89fa      	ldrh	r2, [r7, #14]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f005 fbd5 	bl	8007388 <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, tbuf, twind);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	f244 0308 	movw	r3, #16392	; 0x4008
 8001be8:	4413      	add	r3, r2
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001bf0:	6892      	ldr	r2, [r2, #8]
 8001bf2:	b292      	uxth	r2, r2
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f005 fbc7 	bl	8007388 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001c08:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8001c0a:	4b03      	ldr	r3, [pc, #12]	; (8001c18 <_ZN13STM32Hardware5flushEv+0xfc>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
      }
    }
 8001c10:	bf00      	nop
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000370 	.word	0x20000370

08001c1c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
      int n = length;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c32:	bfa8      	it	ge
 8001c34:	f44f 4380 	movge.w	r3, #16384	; 0x4000
 8001c38:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f5c3 4280 	rsb	r2, r3, #16384	; 0x4000
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	bf28      	it	cs
 8001c4c:	4613      	movcs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	f244 0308 	movw	r3, #16392	; 0x4008
 8001c5c:	4413      	add	r3, r2
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	4413      	add	r3, r2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	68b9      	ldr	r1, [r7, #8]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f006 fe7e 	bl	8008968 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	4413      	add	r3, r2
 8001c78:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001c82:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d00d      	beq.n	8001ca8 <_ZN13STM32Hardware5writeEPhi+0x8c>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	f244 0308 	movw	r3, #16392	; 0x4008
 8001c92:	4413      	add	r3, r2
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	68b9      	ldr	r1, [r7, #8]
 8001c98:	1888      	adds	r0, r1, r2
 8001c9a:	6979      	ldr	r1, [r7, #20]
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	1a8a      	subs	r2, r1, r2
 8001ca0:	4601      	mov	r1, r0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f006 fe60 	bl	8008968 <memcpy>
      }

      flush();
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f7ff ff37 	bl	8001b1c <_ZN13STM32Hardware5flushEv>
    }
 8001cae:	bf00      	nop
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	f002 f899 	bl	8003df4 <HAL_GetTick>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff f850 	bl	8000d7c <_ZN3ros3MsgC1Ev>
 8001cdc:	4a0e      	ldr	r2, [pc, #56]	; (8001d18 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	08008ea8 	.word	0x08008ea8

08001d1c <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001d1c:	b480      	push	{r7}
 8001d1e:	b08b      	sub	sp, #44	; 0x2c
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d30:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8001d34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d3a:	6838      	ldr	r0, [r7, #0]
 8001d3c:	4401      	add	r1, r0
 8001d3e:	b2d3      	uxtb	r3, r2
 8001d40:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8001d42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	0a02      	lsrs	r2, r0, #8
 8001d50:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001d54:	0a0b      	lsrs	r3, r1, #8
 8001d56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d58:	3101      	adds	r1, #1
 8001d5a:	6838      	ldr	r0, [r7, #0]
 8001d5c:	4401      	add	r1, r0
 8001d5e:	b2d3      	uxtb	r3, r2
 8001d60:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8001d62:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	0c02      	lsrs	r2, r0, #16
 8001d70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001d74:	0c0b      	lsrs	r3, r1, #16
 8001d76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d78:	3102      	adds	r1, #2
 8001d7a:	6838      	ldr	r0, [r7, #0]
 8001d7c:	4401      	add	r1, r0
 8001d7e:	b2d3      	uxtb	r3, r2
 8001d80:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8001d82:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	0e02      	lsrs	r2, r0, #24
 8001d90:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d94:	0e0b      	lsrs	r3, r1, #24
 8001d96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d98:	3103      	adds	r1, #3
 8001d9a:	6838      	ldr	r0, [r7, #0]
 8001d9c:	4401      	add	r1, r0
 8001d9e:	b2d3      	uxtb	r3, r2
 8001da0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8001da2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	000a      	movs	r2, r1
 8001db0:	2300      	movs	r3, #0
 8001db2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001db4:	3104      	adds	r1, #4
 8001db6:	6838      	ldr	r0, [r7, #0]
 8001db8:	4401      	add	r1, r0
 8001dba:	b2d3      	uxtb	r3, r2
 8001dbc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8001dbe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	0a0a      	lsrs	r2, r1, #8
 8001dcc:	2300      	movs	r3, #0
 8001dce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dd0:	3105      	adds	r1, #5
 8001dd2:	6838      	ldr	r0, [r7, #0]
 8001dd4:	4401      	add	r1, r0
 8001dd6:	b2d3      	uxtb	r3, r2
 8001dd8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8001dda:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	f04f 0300 	mov.w	r3, #0
 8001de6:	0c0a      	lsrs	r2, r1, #16
 8001de8:	2300      	movs	r3, #0
 8001dea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dec:	3106      	adds	r1, #6
 8001dee:	6838      	ldr	r0, [r7, #0]
 8001df0:	4401      	add	r1, r0
 8001df2:	b2d3      	uxtb	r3, r2
 8001df4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8001df6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	0e0a      	lsrs	r2, r1, #24
 8001e04:	2300      	movs	r3, #0
 8001e06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e08:	3107      	adds	r1, #7
 8001e0a:	6838      	ldr	r0, [r7, #0]
 8001e0c:	4401      	add	r1, r0
 8001e0e:	b2d3      	uxtb	r3, r2
 8001e10:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	3308      	adds	r3, #8
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e1e:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8001e22:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e28:	6838      	ldr	r0, [r7, #0]
 8001e2a:	4401      	add	r1, r0
 8001e2c:	b2d3      	uxtb	r3, r2
 8001e2e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8001e30:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	f04f 0300 	mov.w	r3, #0
 8001e3c:	0a02      	lsrs	r2, r0, #8
 8001e3e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001e42:	0a0b      	lsrs	r3, r1, #8
 8001e44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e46:	3101      	adds	r1, #1
 8001e48:	6838      	ldr	r0, [r7, #0]
 8001e4a:	4401      	add	r1, r0
 8001e4c:	b2d3      	uxtb	r3, r2
 8001e4e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8001e50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	f04f 0300 	mov.w	r3, #0
 8001e5c:	0c02      	lsrs	r2, r0, #16
 8001e5e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001e62:	0c0b      	lsrs	r3, r1, #16
 8001e64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e66:	3102      	adds	r1, #2
 8001e68:	6838      	ldr	r0, [r7, #0]
 8001e6a:	4401      	add	r1, r0
 8001e6c:	b2d3      	uxtb	r3, r2
 8001e6e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8001e70:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	0e02      	lsrs	r2, r0, #24
 8001e7e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e82:	0e0b      	lsrs	r3, r1, #24
 8001e84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e86:	3103      	adds	r1, #3
 8001e88:	6838      	ldr	r0, [r7, #0]
 8001e8a:	4401      	add	r1, r0
 8001e8c:	b2d3      	uxtb	r3, r2
 8001e8e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8001e90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	000a      	movs	r2, r1
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ea2:	3104      	adds	r1, #4
 8001ea4:	6838      	ldr	r0, [r7, #0]
 8001ea6:	4401      	add	r1, r0
 8001ea8:	b2d3      	uxtb	r3, r2
 8001eaa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8001eac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	f04f 0300 	mov.w	r3, #0
 8001eb8:	0a0a      	lsrs	r2, r1, #8
 8001eba:	2300      	movs	r3, #0
 8001ebc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ebe:	3105      	adds	r1, #5
 8001ec0:	6838      	ldr	r0, [r7, #0]
 8001ec2:	4401      	add	r1, r0
 8001ec4:	b2d3      	uxtb	r3, r2
 8001ec6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8001ec8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	0c0a      	lsrs	r2, r1, #16
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eda:	3106      	adds	r1, #6
 8001edc:	6838      	ldr	r0, [r7, #0]
 8001ede:	4401      	add	r1, r0
 8001ee0:	b2d3      	uxtb	r3, r2
 8001ee2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8001ee4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	f04f 0300 	mov.w	r3, #0
 8001ef0:	0e0a      	lsrs	r2, r1, #24
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ef6:	3107      	adds	r1, #7
 8001ef8:	6838      	ldr	r0, [r7, #0]
 8001efa:	4401      	add	r1, r0
 8001efc:	b2d3      	uxtb	r3, r2
 8001efe:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	3308      	adds	r3, #8
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001f0c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8001f10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f16:	6838      	ldr	r0, [r7, #0]
 8001f18:	4401      	add	r1, r0
 8001f1a:	b2d3      	uxtb	r3, r2
 8001f1c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8001f1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	f04f 0300 	mov.w	r3, #0
 8001f2a:	0a02      	lsrs	r2, r0, #8
 8001f2c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001f30:	0a0b      	lsrs	r3, r1, #8
 8001f32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f34:	3101      	adds	r1, #1
 8001f36:	6838      	ldr	r0, [r7, #0]
 8001f38:	4401      	add	r1, r0
 8001f3a:	b2d3      	uxtb	r3, r2
 8001f3c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8001f3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	f04f 0300 	mov.w	r3, #0
 8001f4a:	0c02      	lsrs	r2, r0, #16
 8001f4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001f50:	0c0b      	lsrs	r3, r1, #16
 8001f52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f54:	3102      	adds	r1, #2
 8001f56:	6838      	ldr	r0, [r7, #0]
 8001f58:	4401      	add	r1, r0
 8001f5a:	b2d3      	uxtb	r3, r2
 8001f5c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8001f5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	0e02      	lsrs	r2, r0, #24
 8001f6c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f70:	0e0b      	lsrs	r3, r1, #24
 8001f72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f74:	3103      	adds	r1, #3
 8001f76:	6838      	ldr	r0, [r7, #0]
 8001f78:	4401      	add	r1, r0
 8001f7a:	b2d3      	uxtb	r3, r2
 8001f7c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8001f7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	000a      	movs	r2, r1
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f90:	3104      	adds	r1, #4
 8001f92:	6838      	ldr	r0, [r7, #0]
 8001f94:	4401      	add	r1, r0
 8001f96:	b2d3      	uxtb	r3, r2
 8001f98:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8001f9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	0a0a      	lsrs	r2, r1, #8
 8001fa8:	2300      	movs	r3, #0
 8001faa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fac:	3105      	adds	r1, #5
 8001fae:	6838      	ldr	r0, [r7, #0]
 8001fb0:	4401      	add	r1, r0
 8001fb2:	b2d3      	uxtb	r3, r2
 8001fb4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8001fb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	f04f 0300 	mov.w	r3, #0
 8001fc2:	0c0a      	lsrs	r2, r1, #16
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fc8:	3106      	adds	r1, #6
 8001fca:	6838      	ldr	r0, [r7, #0]
 8001fcc:	4401      	add	r1, r0
 8001fce:	b2d3      	uxtb	r3, r2
 8001fd0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8001fd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	f04f 0300 	mov.w	r3, #0
 8001fde:	0e0a      	lsrs	r2, r1, #24
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fe4:	3107      	adds	r1, #7
 8001fe6:	6838      	ldr	r0, [r7, #0]
 8001fe8:	4401      	add	r1, r0
 8001fea:	b2d3      	uxtb	r3, r2
 8001fec:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	3308      	adds	r3, #8
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	372c      	adds	r7, #44	; 0x2c
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002002:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002006:	b0eb      	sub	sp, #428	; 0x1ac
 8002008:	af00      	add	r7, sp, #0
 800200a:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800200e:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002024:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002028:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800202c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002030:	4413      	add	r3, r2
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2200      	movs	r2, #0
 8002038:	461c      	mov	r4, r3
 800203a:	4615      	mov	r5, r2
 800203c:	ea40 0804 	orr.w	r8, r0, r4
 8002040:	ea41 0905 	orr.w	r9, r1, r5
 8002044:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002048:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800204c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002056:	4413      	add	r3, r2
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2200      	movs	r2, #0
 800205e:	469a      	mov	sl, r3
 8002060:	4693      	mov	fp, r2
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	f04f 0300 	mov.w	r3, #0
 800206a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800206e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002072:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002076:	ea40 0402 	orr.w	r4, r0, r2
 800207a:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800207e:	430b      	orrs	r3, r1
 8002080:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002084:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002088:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800208c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002090:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002094:	1c9a      	adds	r2, r3, #2
 8002096:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800209a:	4413      	add	r3, r2
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2200      	movs	r2, #0
 80020a2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80020a6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	f04f 0300 	mov.w	r3, #0
 80020b2:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 80020b6:	464c      	mov	r4, r9
 80020b8:	0423      	lsls	r3, r4, #16
 80020ba:	4644      	mov	r4, r8
 80020bc:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80020c0:	4644      	mov	r4, r8
 80020c2:	0422      	lsls	r2, r4, #16
 80020c4:	ea40 0402 	orr.w	r4, r0, r2
 80020c8:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80020cc:	430b      	orrs	r3, r1
 80020ce:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80020d2:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80020d6:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80020da:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80020de:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80020e2:	1cda      	adds	r2, r3, #3
 80020e4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020e8:	4413      	add	r3, r2
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2200      	movs	r2, #0
 80020f0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80020f4:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80020f8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80020fc:	4623      	mov	r3, r4
 80020fe:	0a1b      	lsrs	r3, r3, #8
 8002100:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002104:	4623      	mov	r3, r4
 8002106:	061b      	lsls	r3, r3, #24
 8002108:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800210c:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002110:	4623      	mov	r3, r4
 8002112:	4303      	orrs	r3, r0
 8002114:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002118:	462b      	mov	r3, r5
 800211a:	430b      	orrs	r3, r1
 800211c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002120:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002124:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002128:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800212c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002130:	1d1a      	adds	r2, r3, #4
 8002132:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002136:	4413      	add	r3, r2
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2200      	movs	r2, #0
 800213e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002142:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8002152:	0023      	movs	r3, r4
 8002154:	2200      	movs	r2, #0
 8002156:	ea40 0402 	orr.w	r4, r0, r2
 800215a:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800215e:	430b      	orrs	r3, r1
 8002160:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002164:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002168:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800216c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002170:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002174:	1d5a      	adds	r2, r3, #5
 8002176:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800217a:	4413      	add	r3, r2
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2200      	movs	r2, #0
 8002182:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002186:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002196:	0223      	lsls	r3, r4, #8
 8002198:	2200      	movs	r2, #0
 800219a:	ea40 0402 	orr.w	r4, r0, r2
 800219e:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80021a2:	430b      	orrs	r3, r1
 80021a4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80021a8:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80021ac:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80021b0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80021b4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80021b8:	1d9a      	adds	r2, r3, #6
 80021ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80021be:	4413      	add	r3, r2
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2200      	movs	r2, #0
 80021c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80021ca:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80021da:	0423      	lsls	r3, r4, #16
 80021dc:	2200      	movs	r2, #0
 80021de:	ea40 0402 	orr.w	r4, r0, r2
 80021e2:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80021e6:	430b      	orrs	r3, r1
 80021e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80021ec:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80021f0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80021f4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80021f8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80021fc:	1dda      	adds	r2, r3, #7
 80021fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002202:	4413      	add	r3, r2
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2200      	movs	r2, #0
 800220a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800220e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800221e:	0623      	lsls	r3, r4, #24
 8002220:	2200      	movs	r2, #0
 8002222:	ea40 0402 	orr.w	r4, r0, r2
 8002226:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 800222a:	430b      	orrs	r3, r1
 800222c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002230:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002234:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002238:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800223c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002240:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002244:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002248:	3308      	adds	r3, #8
 800224a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	f04f 0300 	mov.w	r3, #0
 8002256:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800225a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800225e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002262:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002266:	4413      	add	r3, r2
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2200      	movs	r2, #0
 800226e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002272:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002276:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800227a:	4623      	mov	r3, r4
 800227c:	4303      	orrs	r3, r0
 800227e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002282:	462b      	mov	r3, r5
 8002284:	430b      	orrs	r3, r1
 8002286:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800228a:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800228e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002292:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002296:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800229a:	1c5a      	adds	r2, r3, #1
 800229c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80022a0:	4413      	add	r3, r2
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2200      	movs	r2, #0
 80022a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80022ac:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 80022bc:	464c      	mov	r4, r9
 80022be:	0223      	lsls	r3, r4, #8
 80022c0:	4644      	mov	r4, r8
 80022c2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80022c6:	4644      	mov	r4, r8
 80022c8:	0222      	lsls	r2, r4, #8
 80022ca:	ea40 0402 	orr.w	r4, r0, r2
 80022ce:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 80022d2:	430b      	orrs	r3, r1
 80022d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80022d8:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80022dc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80022e0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80022e4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80022e8:	1c9a      	adds	r2, r3, #2
 80022ea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80022ee:	4413      	add	r3, r2
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2200      	movs	r2, #0
 80022f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80022fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800230a:	464c      	mov	r4, r9
 800230c:	0423      	lsls	r3, r4, #16
 800230e:	4644      	mov	r4, r8
 8002310:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002314:	4644      	mov	r4, r8
 8002316:	0422      	lsls	r2, r4, #16
 8002318:	ea40 0402 	orr.w	r4, r0, r2
 800231c:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002320:	430b      	orrs	r3, r1
 8002322:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002326:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800232a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800232e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002332:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002336:	1cda      	adds	r2, r3, #3
 8002338:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800233c:	4413      	add	r3, r2
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2200      	movs	r2, #0
 8002344:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002348:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800234c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002350:	4623      	mov	r3, r4
 8002352:	0a1b      	lsrs	r3, r3, #8
 8002354:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002358:	4623      	mov	r3, r4
 800235a:	061b      	lsls	r3, r3, #24
 800235c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002360:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002364:	4623      	mov	r3, r4
 8002366:	4303      	orrs	r3, r0
 8002368:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800236c:	462b      	mov	r3, r5
 800236e:	430b      	orrs	r3, r1
 8002370:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002374:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002378:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800237c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002380:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002384:	1d1a      	adds	r2, r3, #4
 8002386:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800238a:	4413      	add	r3, r2
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2200      	movs	r2, #0
 8002392:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002396:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80023a6:	0023      	movs	r3, r4
 80023a8:	2200      	movs	r2, #0
 80023aa:	ea40 0402 	orr.w	r4, r0, r2
 80023ae:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 80023b2:	430b      	orrs	r3, r1
 80023b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80023b8:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80023bc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80023c0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80023c4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80023c8:	1d5a      	adds	r2, r3, #5
 80023ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80023ce:	4413      	add	r3, r2
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2200      	movs	r2, #0
 80023d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80023da:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	f04f 0300 	mov.w	r3, #0
 80023e6:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80023ea:	0223      	lsls	r3, r4, #8
 80023ec:	2200      	movs	r2, #0
 80023ee:	ea40 0402 	orr.w	r4, r0, r2
 80023f2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80023f6:	430b      	orrs	r3, r1
 80023f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80023fc:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002400:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002404:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002408:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800240c:	1d9a      	adds	r2, r3, #6
 800240e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002412:	4413      	add	r3, r2
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2200      	movs	r2, #0
 800241a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800241e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800242e:	0423      	lsls	r3, r4, #16
 8002430:	2200      	movs	r2, #0
 8002432:	ea40 0402 	orr.w	r4, r0, r2
 8002436:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800243a:	430b      	orrs	r3, r1
 800243c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002440:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002444:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002448:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800244c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002450:	1dda      	adds	r2, r3, #7
 8002452:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002456:	4413      	add	r3, r2
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2200      	movs	r2, #0
 800245e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002462:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002472:	0623      	lsls	r3, r4, #24
 8002474:	2200      	movs	r2, #0
 8002476:	ea40 0402 	orr.w	r4, r0, r2
 800247a:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800247e:	430b      	orrs	r3, r1
 8002480:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002484:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002488:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 800248c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002490:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002494:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002498:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800249c:	3308      	adds	r3, #8
 800249e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80024ae:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80024b2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80024b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80024ba:	4413      	add	r3, r2
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2200      	movs	r2, #0
 80024c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024c6:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80024ca:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80024ce:	4623      	mov	r3, r4
 80024d0:	4303      	orrs	r3, r0
 80024d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80024d4:	462b      	mov	r3, r5
 80024d6:	430b      	orrs	r3, r1
 80024d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80024da:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80024de:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80024e2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80024e6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80024f0:	4413      	add	r3, r2
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2200      	movs	r2, #0
 80024f8:	673b      	str	r3, [r7, #112]	; 0x70
 80024fa:	677a      	str	r2, [r7, #116]	; 0x74
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	f04f 0300 	mov.w	r3, #0
 8002504:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002508:	464c      	mov	r4, r9
 800250a:	0223      	lsls	r3, r4, #8
 800250c:	4644      	mov	r4, r8
 800250e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002512:	4644      	mov	r4, r8
 8002514:	0222      	lsls	r2, r4, #8
 8002516:	ea40 0402 	orr.w	r4, r0, r2
 800251a:	66bc      	str	r4, [r7, #104]	; 0x68
 800251c:	430b      	orrs	r3, r1
 800251e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002520:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002524:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002528:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800252c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002530:	1c9a      	adds	r2, r3, #2
 8002532:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002536:	4413      	add	r3, r2
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2200      	movs	r2, #0
 800253e:	663b      	str	r3, [r7, #96]	; 0x60
 8002540:	667a      	str	r2, [r7, #100]	; 0x64
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	f04f 0300 	mov.w	r3, #0
 800254a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800254e:	464c      	mov	r4, r9
 8002550:	0423      	lsls	r3, r4, #16
 8002552:	4644      	mov	r4, r8
 8002554:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002558:	4644      	mov	r4, r8
 800255a:	0422      	lsls	r2, r4, #16
 800255c:	ea40 0402 	orr.w	r4, r0, r2
 8002560:	65bc      	str	r4, [r7, #88]	; 0x58
 8002562:	430b      	orrs	r3, r1
 8002564:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002566:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800256a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800256e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002572:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002576:	1cda      	adds	r2, r3, #3
 8002578:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800257c:	4413      	add	r3, r2
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2200      	movs	r2, #0
 8002584:	653b      	str	r3, [r7, #80]	; 0x50
 8002586:	657a      	str	r2, [r7, #84]	; 0x54
 8002588:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800258c:	4623      	mov	r3, r4
 800258e:	0a1b      	lsrs	r3, r3, #8
 8002590:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002592:	4623      	mov	r3, r4
 8002594:	061b      	lsls	r3, r3, #24
 8002596:	64bb      	str	r3, [r7, #72]	; 0x48
 8002598:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800259c:	4623      	mov	r3, r4
 800259e:	4303      	orrs	r3, r0
 80025a0:	643b      	str	r3, [r7, #64]	; 0x40
 80025a2:	462b      	mov	r3, r5
 80025a4:	430b      	orrs	r3, r1
 80025a6:	647b      	str	r3, [r7, #68]	; 0x44
 80025a8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80025ac:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80025b0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80025b4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025b8:	1d1a      	adds	r2, r3, #4
 80025ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025be:	4413      	add	r3, r2
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2200      	movs	r2, #0
 80025c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80025c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80025d4:	0023      	movs	r3, r4
 80025d6:	2200      	movs	r2, #0
 80025d8:	ea40 0402 	orr.w	r4, r0, r2
 80025dc:	633c      	str	r4, [r7, #48]	; 0x30
 80025de:	430b      	orrs	r3, r1
 80025e0:	637b      	str	r3, [r7, #52]	; 0x34
 80025e2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80025e6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80025ea:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80025ee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025f2:	1d5a      	adds	r2, r3, #5
 80025f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025f8:	4413      	add	r3, r2
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2200      	movs	r2, #0
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
 8002602:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800260e:	0223      	lsls	r3, r4, #8
 8002610:	2200      	movs	r2, #0
 8002612:	ea40 0402 	orr.w	r4, r0, r2
 8002616:	623c      	str	r4, [r7, #32]
 8002618:	430b      	orrs	r3, r1
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
 800261c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002620:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002624:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002628:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800262c:	3306      	adds	r3, #6
 800262e:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002632:	4413      	add	r3, r2
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2200      	movs	r2, #0
 800263a:	61bb      	str	r3, [r7, #24]
 800263c:	61fa      	str	r2, [r7, #28]
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	69bc      	ldr	r4, [r7, #24]
 8002648:	0423      	lsls	r3, r4, #16
 800264a:	2200      	movs	r2, #0
 800264c:	ea40 0402 	orr.w	r4, r0, r2
 8002650:	613c      	str	r4, [r7, #16]
 8002652:	430b      	orrs	r3, r1
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800265a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800265e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002662:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002666:	3307      	adds	r3, #7
 8002668:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800266c:	4413      	add	r3, r2
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2200      	movs	r2, #0
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	60fa      	str	r2, [r7, #12]
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	68bc      	ldr	r4, [r7, #8]
 8002682:	0623      	lsls	r3, r4, #24
 8002684:	2200      	movs	r2, #0
 8002686:	ea40 0402 	orr.w	r4, r0, r2
 800268a:	603c      	str	r4, [r7, #0]
 800268c:	430b      	orrs	r3, r1
 800268e:	607b      	str	r3, [r7, #4]
 8002690:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002694:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002698:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800269c:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 80026a0:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80026a4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026a8:	3308      	adds	r3, #8
 80026aa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 80026ae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 80026b2:	4618      	mov	r0, r3
 80026b4:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 80026b8:	46bd      	mov	sp, r7
 80026ba:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80026be:	4770      	bx	lr

080026c0 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 80026ca:	4618      	mov	r0, r3
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	08008d84 	.word	0x08008d84

080026dc <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	4b03      	ldr	r3, [pc, #12]	; (80026f4 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	08008d9c 	.word	0x08008d9c

080026f8 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4618      	mov	r0, r3
 8002704:	f7fe fb3a 	bl	8000d7c <_ZN3ros3MsgC1Ev>
 8002708:	4a08      	ldr	r2, [pc, #32]	; (800272c <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3308      	adds	r3, #8
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fada 	bl	8001ccc <_ZN13geometry_msgs7Vector3C1Ev>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3328      	adds	r3, #40	; 0x28
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff fad5 	bl	8001ccc <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	08008e90 	.word	0x08008e90

08002730 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f103 0008 	add.w	r0, r3, #8
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	4413      	add	r3, r2
 800274a:	4619      	mov	r1, r3
 800274c:	f7ff fae6 	bl	8001d1c <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002750:	4602      	mov	r2, r0
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4413      	add	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	4413      	add	r3, r2
 8002764:	4619      	mov	r1, r3
 8002766:	f7ff fad9 	bl	8001d1c <_ZNK13geometry_msgs7Vector39serializeEPh>
 800276a:	4602      	mov	r2, r0
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4413      	add	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]
      return offset;
 8002772:	68fb      	ldr	r3, [r7, #12]
    }
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f103 0008 	add.w	r0, r3, #8
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	4413      	add	r3, r2
 8002796:	4619      	mov	r1, r3
 8002798:	f7ff fc33 	bl	8002002 <_ZN13geometry_msgs7Vector311deserializeEPh>
 800279c:	4602      	mov	r2, r0
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4413      	add	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	4413      	add	r3, r2
 80027b0:	4619      	mov	r1, r3
 80027b2:	f7ff fc26 	bl	8002002 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80027b6:	4602      	mov	r2, r0
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4413      	add	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
     return offset;
 80027be:	68fb      	ldr	r3, [r7, #12]
    }
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	4b03      	ldr	r3, [pc, #12]	; (80027e0 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 80027d2:	4618      	mov	r0, r3
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	08008dc0 	.word	0x08008dc0

080027e4 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	4b03      	ldr	r3, [pc, #12]	; (80027fc <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 80027ee:	4618      	mov	r0, r3
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	08008dd4 	.word	0x08008dd4

08002800 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	4a04      	ldr	r2, [pc, #16]	; (800281c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	08008ed8 	.word	0x08008ed8

08002820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff ffe8 	bl	8002800 <_ZN3ros15NodeHandleBase_C1Ev>
 8002830:	4a4c      	ldr	r2, [pc, #304]	; (8002964 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x144>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3304      	adds	r3, #4
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff f8fe 	bl	8001a3c <_ZN13STM32HardwareC1Ev>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002846:	461a      	mov	r2, r3
 8002848:	2300      	movs	r3, #0
 800284a:	6153      	str	r3, [r2, #20]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002852:	461a      	mov	r2, r3
 8002854:	2300      	movs	r3, #0
 8002856:	6193      	str	r3, [r2, #24]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800285e:	461a      	mov	r2, r3
 8002860:	2300      	movs	r3, #0
 8002862:	61d3      	str	r3, [r2, #28]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800286a:	461a      	mov	r2, r3
 800286c:	2300      	movs	r3, #0
 800286e:	6213      	str	r3, [r2, #32]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002876:	3324      	adds	r3, #36	; 0x24
 8002878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800287c:	2100      	movs	r1, #0
 800287e:	4618      	mov	r0, r3
 8002880:	f006 f880 	bl	8008984 <memset>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800288a:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800288e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002892:	2100      	movs	r1, #0
 8002894:	4618      	mov	r0, r3
 8002896:	f006 f875 	bl	8008984 <memset>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80028a0:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80028a4:	2264      	movs	r2, #100	; 0x64
 80028a6:	2100      	movs	r1, #0
 80028a8:	4618      	mov	r0, r3
 80028aa:	f006 f86b 	bl	8008984 <memset>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80028b4:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 80028b8:	2264      	movs	r2, #100	; 0x64
 80028ba:	2100      	movs	r1, #0
 80028bc:	4618      	mov	r0, r3
 80028be:	f006 f861 	bl	8008984 <memset>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80028c8:	461a      	mov	r2, r3
 80028ca:	2300      	movs	r3, #0
 80028cc:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80028d6:	461a      	mov	r2, r3
 80028d8:	2300      	movs	r3, #0
 80028da:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80028e4:	461a      	mov	r2, r3
 80028e6:	2300      	movs	r3, #0
 80028e8:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80028f2:	461a      	mov	r2, r3
 80028f4:	2300      	movs	r3, #0
 80028f6:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002900:	461a      	mov	r2, r3
 8002902:	2300      	movs	r3, #0
 8002904:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800291a:	461a      	mov	r2, r3
 800291c:	2300      	movs	r3, #0
 800291e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002928:	461a      	mov	r2, r3
 800292a:	2300      	movs	r3, #0
 800292c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002936:	461a      	mov	r2, r3
 8002938:	2300      	movs	r3, #0
 800293a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	f248 5314 	movw	r3, #34068	; 0x8514
 8002950:	4413      	add	r3, r2
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe fd86 	bl	8001464 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	08008e7c 	.word	0x08008e7c

08002968 <HAL_UART_TxCpltCallback>:

void AV_vel_cb(const geometry_msgs::Twist& AV_vel_msg);

ros::Subscriber<geometry_msgs::Twist> AV_vel_sub("cmd_vel_AV", &AV_vel_cb);	//subscribing a topic from rpi's topic

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8002970:	4805      	ldr	r0, [pc, #20]	; (8002988 <HAL_UART_TxCpltCallback+0x20>)
 8002972:	f000 f8ed 	bl	8002b50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002976:	4603      	mov	r3, r0
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff f8cf 	bl	8001b1c <_ZN13STM32Hardware5flushEv>
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000374 	.word	0x20000374

0800298c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8002994:	4805      	ldr	r0, [pc, #20]	; (80029ac <HAL_UART_RxCpltCallback+0x20>)
 8002996:	f000 f8db 	bl	8002b50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800299a:	4603      	mov	r3, r0
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff f87a 	bl	8001a96 <_ZN13STM32Hardware10reset_rbufEv>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000374 	.word	0x20000374

080029b0 <setup>:

void setup(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  nh.initNode();
 80029b4:	4806      	ldr	r0, [pc, #24]	; (80029d0 <setup+0x20>)
 80029b6:	f000 f8d7 	bl	8002b68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.subscribe(AV_vel_sub);
 80029ba:	4906      	ldr	r1, [pc, #24]	; (80029d4 <setup+0x24>)
 80029bc:	4804      	ldr	r0, [pc, #16]	; (80029d0 <setup+0x20>)
 80029be:	f000 f8fc 	bl	8002bba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
//  nh.advertise(enc_pub);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80029c2:	2100      	movs	r1, #0
 80029c4:	4804      	ldr	r0, [pc, #16]	; (80029d8 <setup+0x28>)
 80029c6:	f003 fab5 	bl	8005f34 <HAL_TIM_PWM_Start>
}
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20000374 	.word	0x20000374
 80029d4:	200088c0 	.word	0x200088c0
 80029d8:	20000094 	.word	0x20000094

080029dc <loop>:

void loop(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
//  HAL_Delay(1);								//rate of 1hz
  nh.spinOnce();
 80029e0:	4802      	ldr	r0, [pc, #8]	; (80029ec <loop+0x10>)
 80029e2:	f000 f917 	bl	8002c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000374 	.word	0x20000374

080029f0 <_Z9AV_vel_cbRKN13geometry_msgs5TwistE>:

void AV_vel_cb(const geometry_msgs::Twist& AV_vel_msg)	//callback function from subscribe
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
	int drive_duty_cycle = AV_vel_msg.linear.x;//val: -63 <-> 63
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	ed93 7b04 	vldr	d7, [r3, #16]
 80029fe:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002a02:	ee17 3a90 	vmov	r3, s15
 8002a06:	60fb      	str	r3, [r7, #12]
	int servo = AV_vel_msg.angular.z;			//val: -50 <-> 50
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8002a0e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002a12:	ee17 3a90 	vmov	r3, s15
 8002a16:	60bb      	str	r3, [r7, #8]

	htim2.Instance -> CCR1 = 75 + servo;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f103 024b 	add.w	r2, r3, #75	; 0x4b
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <_Z9AV_vel_cbRKN13geometry_msgs5TwistE+0x68>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	635a      	str	r2, [r3, #52]	; 0x34

	if (drive_duty_cycle < 64)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2b3f      	cmp	r3, #63	; 0x3f
 8002a28:	dc09      	bgt.n	8002a3e <_Z9AV_vel_cbRKN13geometry_msgs5TwistE+0x4e>
	{
		roboclaw.ForwardBackwardM1(0x80, (drive_duty_cycle + 64 ) - 1);		//Backwards
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	333f      	adds	r3, #63	; 0x3f
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	461a      	mov	r2, r3
 8002a34:	2180      	movs	r1, #128	; 0x80
 8002a36:	4809      	ldr	r0, [pc, #36]	; (8002a5c <_Z9AV_vel_cbRKN13geometry_msgs5TwistE+0x6c>)
 8002a38:	f7fd fe7d 	bl	8000736 <_ZN8RoboClaw17ForwardBackwardM1Ehh>
		roboclaw.ForwardBackwardM1(0x80, drive_duty_cycle + 64);			//Forward
	}
//	encoder_val.data = roboclaw.ReadEncM1(0x80);
//	enc_pub.publish(&encoder_val);

}
 8002a3c:	e008      	b.n	8002a50 <_Z9AV_vel_cbRKN13geometry_msgs5TwistE+0x60>
		roboclaw.ForwardBackwardM1(0x80, drive_duty_cycle + 64);			//Forward
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	3340      	adds	r3, #64	; 0x40
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	461a      	mov	r2, r3
 8002a48:	2180      	movs	r1, #128	; 0x80
 8002a4a:	4804      	ldr	r0, [pc, #16]	; (8002a5c <_Z9AV_vel_cbRKN13geometry_msgs5TwistE+0x6c>)
 8002a4c:	f7fd fe73 	bl	8000736 <_ZN8RoboClaw17ForwardBackwardM1Ehh>
}
 8002a50:	bf00      	nop
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20000094 	.word	0x20000094
 8002a5c:	200088b0 	.word	0x200088b0

08002a60 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d80d      	bhi.n	8002a90 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	fa22 f103 	lsr.w	r1, r2, r3
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4413      	add	r3, r2
 8002a84:	b2ca      	uxtb	r2, r1
 8002a86:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	e7ee      	b.n	8002a6e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8002a90:	bf00      	nop
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	d811      	bhi.n	8002ada <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6839      	ldr	r1, [r7, #0]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	440a      	add	r2, r1
 8002ac0:	7812      	ldrb	r2, [r2, #0]
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	00d2      	lsls	r2, r2, #3
 8002ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	e7ea      	b.n	8002ab0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002ada:	bf00      	nop
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
	...

08002ae8 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	4a04      	ldr	r2, [pc, #16]	; (8002b04 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4618      	mov	r0, r3
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	08008ec0 	.word	0x08008ec0

08002b08 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff ffe5 	bl	8002ae8 <_ZN3ros11Subscriber_C1Ev>
 8002b1e:	4a0b      	ldr	r2, [pc, #44]	; (8002b4c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	3310      	adds	r3, #16
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fde5 	bl	80026f8 <_ZN13geometry_msgs5TwistC1Ev>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	659a      	str	r2, [r3, #88]	; 0x58
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	609a      	str	r2, [r3, #8]
  };
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	08008e64 	.word	0x08008e64

08002b50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3304      	adds	r3, #4
  }
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3304      	adds	r3, #4
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fe ff83 	bl	8001a80 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b80:	461a      	mov	r2, r3
 8002b82:	2300      	movs	r3, #0
 8002b84:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b8e:	461a      	mov	r2, r3
 8002b90:	2300      	movs	r3, #0
 8002b92:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002baa:	461a      	mov	r2, r3
 8002bac:	2300      	movs	r3, #0
 8002bae:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8002bba:	b480      	push	{r7}
 8002bbc:	b085      	sub	sp, #20
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2b18      	cmp	r3, #24
 8002bcc:	dc1b      	bgt.n	8002c06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	68f9      	ldr	r1, [r7, #12]
 8002bd2:	f242 1322 	movw	r3, #8482	; 0x2122
 8002bd6:	440b      	add	r3, r1
 8002bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10e      	bne.n	8002bfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x44>
      {
        subscribers[i] = &s;
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	68f9      	ldr	r1, [r7, #12]
 8002be4:	f242 1322 	movw	r3, #8482	; 0x2122
 8002be8:	440b      	add	r3, r1
 8002bea:	6839      	ldr	r1, [r7, #0]
 8002bec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        s.id_ = i + 100;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
        return true;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e004      	b.n	8002c08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	3301      	adds	r3, #1
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	e7e0      	b.n	8002bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 8002c06:	2300      	movs	r3, #0
  }
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3304      	adds	r3, #4
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff f848 	bl	8001cb6 <_ZN13STM32Hardware4timeEv>
 8002c26:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d905      	bls.n	8002c4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c50:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00e      	beq.n	8002c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c5e:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d906      	bls.n	8002c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c6e:	461a      	mov	r2, r3
 8002c70:	2300      	movs	r3, #0
 8002c72:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d015      	beq.n	8002cae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	3304      	adds	r3, #4
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff f815 	bl	8001cb6 <_ZN13STM32Hardware4timeEv>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1ad2      	subs	r2, r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	bf8c      	ite	hi
 8002c9e:	2301      	movhi	r3, #1
 8002ca0:	2300      	movls	r3, #0
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 8002ca8:	f06f 0301 	mvn.w	r3, #1
 8002cac:	e229      	b.n	8003102 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ee>
      int data = hardware_.read();
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fe ff00 	bl	8001ab8 <_ZN13STM32Hardware4readEv>
 8002cb8:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f2c0 8202 	blt.w	80030c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4b2>
      checksum_ += data;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002cc8:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4413      	add	r3, r2
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002cd6:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002ce0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002ce4:	2b07      	cmp	r3, #7
 8002ce6:	d12d      	bne.n	8002d44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002cee:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8002cfa:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	b2d1      	uxtb	r1, r2
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	441a      	add	r2, r3
 8002d06:	f248 0324 	movw	r3, #32804	; 0x8024
 8002d0a:	4413      	add	r3, r2
 8002d0c:	460a      	mov	r2, r1
 8002d0e:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002d16:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002d22:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002d2c:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1a0      	bne.n	8002c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	2308      	movs	r3, #8
 8002d3e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8002d42:	e798      	b.n	8002c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002d4a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d130      	bne.n	8002db4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2bff      	cmp	r3, #255	; 0xff
 8002d56:	d112      	bne.n	8002d7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002d5e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002d62:	3301      	adds	r3, #1
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002d6a:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	3314      	adds	r3, #20
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002d78:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 8002d7c:	e77b      	b.n	8002c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3304      	adds	r3, #4
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fe ff97 	bl	8001cb6 <_ZN13STM32Hardware4timeEv>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d92:	4293      	cmp	r3, r2
 8002d94:	bf8c      	ite	hi
 8002d96:	2301      	movhi	r3, #1
 8002d98:	2300      	movls	r3, #0
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f43f af6a 	beq.w	8002c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 8002dae:	f06f 0301 	mvn.w	r3, #1
 8002db2:	e1a6      	b.n	8003102 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ee>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002dba:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d121      	bne.n	8002e06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2bfe      	cmp	r3, #254	; 0xfe
 8002dc6:	d10b      	bne.n	8002de0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002dce:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002dda:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8002dde:	e74a      	b.n	8002c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002de6:	461a      	mov	r2, r3
 8002de8:	2300      	movs	r3, #0
 8002dea:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002df4:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f47f af3c 	bne.w	8002c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f983 	bl	800310a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8002e04:	e737      	b.n	8002c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002e0c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d120      	bne.n	8002e56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002e28:	461a      	mov	r2, r3
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002e36:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002e42:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8002e54:	e70f      	b.n	8002c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002e5c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d118      	bne.n	8002e96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002e6a:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	021b      	lsls	r3, r3, #8
 8002e72:	4413      	add	r3, r2
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002e7a:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002e84:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002e88:	3301      	adds	r3, #1
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002e90:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8002e94:	e6ef      	b.n	8002c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002e9c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d11f      	bne.n	8002ee4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002eaa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002eae:	425a      	negs	r2, r3
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	bf58      	it	pl
 8002eb6:	4253      	negpl	r3, r2
 8002eb8:	2bff      	cmp	r3, #255	; 0xff
 8002eba:	d10b      	bne.n	8002ed4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002ec2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002ece:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8002ed2:	e6d0      	b.n	8002c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002eda:	461a      	mov	r2, r3
 8002edc:	2300      	movs	r3, #0
 8002ede:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8002ee2:	e6c8      	b.n	8002c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002eea:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002eee:	2b05      	cmp	r3, #5
 8002ef0:	d119      	bne.n	8002f26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002ef8:	461a      	mov	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002f06:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002f12:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8002f24:	e6a7      	b.n	8002c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002f2c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002f30:	2b06      	cmp	r3, #6
 8002f32:	d123      	bne.n	8002f7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002f3a:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	021b      	lsls	r3, r3, #8
 8002f42:	4413      	add	r3, r2
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002f4a:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002f54:	461a      	mov	r2, r3
 8002f56:	2307      	movs	r3, #7
 8002f58:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002f62:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f47f ae85 	bne.w	8002c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002f72:	461a      	mov	r2, r3
 8002f74:	2308      	movs	r3, #8
 8002f76:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8002f7a:	e67c      	b.n	8002c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002f82:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	f47f ae75 	bne.w	8002c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002f92:	461a      	mov	r2, r3
 8002f94:	2300      	movs	r3, #0
 8002f96:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002fa0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002fa4:	425a      	negs	r2, r3
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	bf58      	it	pl
 8002fac:	4253      	negpl	r3, r2
 8002fae:	2bff      	cmp	r3, #255	; 0xff
 8002fb0:	f47f ae61 	bne.w	8002c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002fba:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d116      	bne.n	8002ff0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f8a1 	bl	800310a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f8bd 	bl	8003148 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 8002fea:	f04f 33ff 	mov.w	r3, #4294967295
 8002fee:	e088      	b.n	8003102 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ee>
          else if (topic_ == TopicInfo::ID_TIME)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002ff6:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8002ffa:	2b0a      	cmp	r3, #10
 8002ffc:	d108      	bne.n	8003010 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	f248 0324 	movw	r3, #32804	; 0x8024
 8003004:	4413      	add	r3, r2
 8003006:	4619      	mov	r1, r3
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f98b 	bl	8003324 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800300e:	e632      	b.n	8002c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003016:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800301a:	2b06      	cmp	r3, #6
 800301c:	d112      	bne.n	8003044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	f248 5314 	movw	r3, #34068	; 0x8514
 8003024:	4413      	add	r3, r2
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	f248 0224 	movw	r2, #32804	; 0x8024
 800302c:	440a      	add	r2, r1
 800302e:	4611      	mov	r1, r2
 8003030:	4618      	mov	r0, r3
 8003032:	f7fe fb56 	bl	80016e2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8003042:	e618      	b.n	8002c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800304a:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800304e:	2b0b      	cmp	r3, #11
 8003050:	d106      	bne.n	8003060 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 800305e:	e60a      	b.n	8002c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003066:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800306a:	f1a3 0164 	sub.w	r1, r3, #100	; 0x64
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	f242 1322 	movw	r3, #8482	; 0x2122
 8003074:	440b      	add	r3, r1
 8003076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800307a:	2b00      	cmp	r3, #0
 800307c:	f43f adfb 	beq.w	8002c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003086:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800308a:	f1a3 0164 	sub.w	r1, r3, #100	; 0x64
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	f242 1322 	movw	r3, #8482	; 0x2122
 8003094:	440b      	add	r3, r1
 8003096:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80030a0:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80030a4:	f1a3 0164 	sub.w	r1, r3, #100	; 0x64
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	f242 1322 	movw	r3, #8482	; 0x2122
 80030ae:	440b      	add	r3, r1
 80030b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	f248 0324 	movw	r3, #32804	; 0x8024
 80030be:	440b      	add	r3, r1
 80030c0:	4619      	mov	r1, r3
 80030c2:	4790      	blx	r2
    while (true)
 80030c4:	e5d7      	b.n	8002c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 80030c6:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80030ce:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d014      	beq.n	8003100 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ec>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80030dc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d909      	bls.n	8003100 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ec>
      requestSyncTime();
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f80c 	bl	800310a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80030f8:	461a      	mov	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 8003100:	2300      	movs	r3, #0
  }
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800310a:	b580      	push	{r7, lr}
 800310c:	b086      	sub	sp, #24
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003112:	f107 030c 	add.w	r3, r7, #12
 8003116:	4618      	mov	r0, r3
 8003118:	f7fd fe40 	bl	8000d9c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f107 020c 	add.w	r2, r7, #12
 8003126:	210a      	movs	r1, #10
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	4798      	blx	r3
    rt_time = hardware_.time();
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3304      	adds	r3, #4
 8003130:	4618      	mov	r0, r3
 8003132:	f7fe fdc0 	bl	8001cb6 <_ZN13STM32Hardware4timeEv>
 8003136:	4602      	mov	r2, r0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800313e:	615a      	str	r2, [r3, #20]
  }
 8003140:	bf00      	nop
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	b08b      	sub	sp, #44	; 0x2c
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003150:	f107 030c 	add.w	r3, r7, #12
 8003154:	4618      	mov	r0, r3
 8003156:	f7fd ff11 	bl	8000f7c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800315a:	2300      	movs	r3, #0
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	2b18      	cmp	r3, #24
 8003162:	dc69      	bgt.n	8003238 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xf0>
    {
      if (publishers[i] != 0) // non-empty slot
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003168:	f242 1308 	movw	r3, #8456	; 0x2108
 800316c:	440b      	add	r3, r1
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d05b      	beq.n	8003230 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      {
        ti.topic_id = publishers[i]->id_;
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800317c:	f242 1308 	movw	r3, #8456	; 0x2108
 8003180:	440b      	add	r3, r1
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	b29b      	uxth	r3, r3
 800318c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003192:	f242 1308 	movw	r3, #8456	; 0x2108
 8003196:	440b      	add	r3, r1
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031a6:	f242 1308 	movw	r3, #8456	; 0x2108
 80031aa:	440b      	add	r3, r1
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	6858      	ldr	r0, [r3, #4]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031b8:	f242 1308 	movw	r3, #8456	; 0x2108
 80031bc:	440b      	add	r3, r1
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3308      	adds	r3, #8
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4798      	blx	r3
 80031ce:	4603      	mov	r3, r0
 80031d0:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031d6:	f242 1308 	movw	r3, #8456	; 0x2108
 80031da:	440b      	add	r3, r1
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	6858      	ldr	r0, [r3, #4]
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031e8:	f242 1308 	movw	r3, #8456	; 0x2108
 80031ec:	440b      	add	r3, r1
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	330c      	adds	r3, #12
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4798      	blx	r3
 80031fe:	4603      	mov	r3, r0
 8003200:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003202:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003206:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681c      	ldr	r4, [r3, #0]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003212:	f242 1308 	movw	r3, #8456	; 0x2108
 8003216:	440b      	add	r3, r1
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	4618      	mov	r0, r3
 8003220:	f7fe fbec 	bl	80019fc <_ZN3ros9Publisher15getEndpointTypeEv>
 8003224:	4601      	mov	r1, r0
 8003226:	f107 030c 	add.w	r3, r7, #12
 800322a:	461a      	mov	r2, r3
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	3301      	adds	r3, #1
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
 8003236:	e792      	b.n	800315e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003238:	2300      	movs	r3, #0
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	2b18      	cmp	r3, #24
 8003240:	dc65      	bgt.n	800330e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1c6>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003246:	f242 1322 	movw	r3, #8482	; 0x2122
 800324a:	440b      	add	r3, r1
 800324c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d058      	beq.n	8003306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1be>
      {
        ti.topic_id = subscribers[i]->id_;
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003258:	f242 1322 	movw	r3, #8482	; 0x2122
 800325c:	440b      	add	r3, r1
 800325e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	b29b      	uxth	r3, r3
 8003266:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800326c:	f242 1322 	movw	r3, #8482	; 0x2122
 8003270:	440b      	add	r3, r1
 8003272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800327e:	f242 1322 	movw	r3, #8482	; 0x2122
 8003282:	440b      	add	r3, r1
 8003284:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800328c:	f242 1322 	movw	r3, #8482	; 0x2122
 8003290:	440b      	add	r3, r1
 8003292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	3308      	adds	r3, #8
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4798      	blx	r3
 800329e:	4603      	mov	r3, r0
 80032a0:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032a6:	f242 1322 	movw	r3, #8482	; 0x2122
 80032aa:	440b      	add	r3, r1
 80032ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032b4:	f242 1322 	movw	r3, #8482	; 0x2122
 80032b8:	440b      	add	r3, r1
 80032ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	330c      	adds	r3, #12
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4798      	blx	r3
 80032c6:	4603      	mov	r3, r0
 80032c8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80032ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032ce:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681c      	ldr	r4, [r3, #0]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032da:	f242 1322 	movw	r3, #8482	; 0x2122
 80032de:	440b      	add	r3, r1
 80032e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032e8:	f242 1322 	movw	r3, #8482	; 0x2122
 80032ec:	440b      	add	r3, r1
 80032ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	3304      	adds	r3, #4
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4798      	blx	r3
 80032fa:	4601      	mov	r1, r0
 80032fc:	f107 030c 	add.w	r3, r7, #12
 8003300:	461a      	mov	r2, r3
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	3301      	adds	r3, #1
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
 800330c:	e796      	b.n	800323c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xf4>
      }
    }
    configured_ = true;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 800331a:	bf00      	nop
 800331c:	372c      	adds	r7, #44	; 0x2c
 800331e:	46bd      	mov	sp, r7
 8003320:	bd90      	pop	{r4, r7, pc}
	...

08003324 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800332e:	f107 0308 	add.w	r3, r7, #8
 8003332:	4618      	mov	r0, r3
 8003334:	f7fd fd32 	bl	8000d9c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3304      	adds	r3, #4
 800333c:	4618      	mov	r0, r3
 800333e:	f7fe fcba 	bl	8001cb6 <_ZN13STM32Hardware4timeEv>
 8003342:	4602      	mov	r2, r0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003350:	f107 0308 	add.w	r3, r7, #8
 8003354:	6839      	ldr	r1, [r7, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f7fd fd90 	bl	8000e7c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	4915      	ldr	r1, [pc, #84]	; (80033b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003362:	fba1 1303 	umull	r1, r3, r1, r3
 8003366:	099b      	lsrs	r3, r3, #6
 8003368:	4413      	add	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800336c:	6939      	ldr	r1, [r7, #16]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003372:	fba3 0302 	umull	r0, r3, r3, r2
 8003376:	099b      	lsrs	r3, r3, #6
 8003378:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800337c:	fb00 f303 	mul.w	r3, r0, r3
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	4a0e      	ldr	r2, [pc, #56]	; (80033bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8003384:	fb02 f303 	mul.w	r3, r2, r3
 8003388:	440b      	add	r3, r1
 800338a:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800338c:	f107 0308 	add.w	r3, r7, #8
 8003390:	3304      	adds	r3, #4
 8003392:	4619      	mov	r1, r3
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f8bf 	bl	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3304      	adds	r3, #4
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe fc89 	bl	8001cb6 <_ZN13STM32Hardware4timeEv>
 80033a4:	4602      	mov	r2, r0
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80033ac:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 80033b0:	bf00      	nop
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	10624dd3 	.word	0x10624dd3
 80033bc:	000f4240 	.word	0x000f4240

080033c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b63      	cmp	r3, #99	; 0x63
 80033d0:	dd0b      	ble.n	80033ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80033d8:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80033dc:	f083 0301 	eor.w	r3, r3, #1
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 80033e6:	2300      	movs	r3, #0
 80033e8:	e090      	b.n	800350c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68f9      	ldr	r1, [r7, #12]
 80033f2:	f248 2324 	movw	r3, #33316	; 0x8224
 80033f6:	440b      	add	r3, r1
 80033f8:	3307      	adds	r3, #7
 80033fa:	4619      	mov	r1, r3
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	4790      	blx	r2
 8003400:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003408:	22ff      	movs	r2, #255	; 0xff
 800340a:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003414:	22fe      	movs	r2, #254	; 0xfe
 8003416:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	b2da      	uxtb	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003424:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	b29b      	uxth	r3, r3
 800342c:	0a1b      	lsrs	r3, r3, #8
 800342e:	b29b      	uxth	r3, r3
 8003430:	b2da      	uxtb	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003438:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003442:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800344c:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 8003450:	4413      	add	r3, r2
 8003452:	b2db      	uxtb	r3, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	b2da      	uxtb	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800345e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	b2da      	uxtb	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800346c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	b21b      	sxth	r3, r3
 8003474:	121b      	asrs	r3, r3, #8
 8003476:	b21b      	sxth	r3, r3
 8003478:	b2da      	uxtb	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003480:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 8003484:	2300      	movs	r3, #0
 8003486:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003488:	2305      	movs	r3, #5
 800348a:	61bb      	str	r3, [r7, #24]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	3306      	adds	r3, #6
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	429a      	cmp	r2, r3
 8003494:	dc0e      	bgt.n	80034b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	441a      	add	r2, r3
 800349c:	f248 2324 	movw	r3, #33316	; 0x8224
 80034a0:	4413      	add	r3, r2
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	461a      	mov	r2, r3
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	4413      	add	r3, r2
 80034aa:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	3301      	adds	r3, #1
 80034b0:	61bb      	str	r3, [r7, #24]
 80034b2:	e7eb      	b.n	800348c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	3307      	adds	r3, #7
 80034b8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	425a      	negs	r2, r3
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	bf58      	it	pl
 80034c4:	4253      	negpl	r3, r2
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	1c59      	adds	r1, r3, #1
 80034cc:	6179      	str	r1, [r7, #20]
 80034ce:	43d2      	mvns	r2, r2
 80034d0:	b2d1      	uxtb	r1, r2
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	441a      	add	r2, r3
 80034d6:	f248 2324 	movw	r3, #33316	; 0x8224
 80034da:	4413      	add	r3, r2
 80034dc:	460a      	mov	r2, r1
 80034de:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e6:	dc0b      	bgt.n	8003500 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	1d18      	adds	r0, r3, #4
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	f248 2324 	movw	r3, #33316	; 0x8224
 80034f2:	4413      	add	r3, r2
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4619      	mov	r1, r3
 80034f8:	f7fe fb90 	bl	8001c1c <_ZN13STM32Hardware5writeEPhi>
      return l;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	e005      	b.n	800350c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003500:	4904      	ldr	r1, [pc, #16]	; (8003514 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f84c 	bl	80035a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003508:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800350c:	4618      	mov	r0, r3
 800350e:	3720      	adds	r7, #32
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	08008df8 	.word	0x08008df8

08003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3304      	adds	r3, #4
 8003526:	4618      	mov	r0, r3
 8003528:	f7fe fbc5 	bl	8001cb6 <_ZN13STM32Hardware4timeEv>
 800352c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4917      	ldr	r1, [pc, #92]	; (8003594 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8003536:	fba1 1303 	umull	r1, r3, r1, r3
 800353a:	099b      	lsrs	r3, r3, #6
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8003546:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	6859      	ldr	r1, [r3, #4]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	4b11      	ldr	r3, [pc, #68]	; (8003594 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8003550:	fba3 0302 	umull	r0, r3, r3, r2
 8003554:	099b      	lsrs	r3, r3, #6
 8003556:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800355a:	fb00 f303 	mul.w	r3, r0, r3
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	4a0d      	ldr	r2, [pc, #52]	; (8003598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x80>)
 8003562:	fb02 f303 	mul.w	r3, r2, r3
 8003566:	1aca      	subs	r2, r1, r3
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x84>)
 800356a:	4413      	add	r3, r2
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8003572:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	f248 0318 	movw	r3, #32792	; 0x8018
 800357a:	4413      	add	r3, r2
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	f248 021c 	movw	r2, #32796	; 0x801c
 8003582:	440a      	add	r2, r1
 8003584:	4611      	mov	r1, r2
 8003586:	4618      	mov	r0, r3
 8003588:	f7fd f8ea 	bl	8000760 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800358c:	bf00      	nop
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	10624dd3 	.word	0x10624dd3
 8003598:	000f4240 	.word	0x000f4240
 800359c:	3b9aca00 	.word	0x3b9aca00

080035a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	2103      	movs	r1, #3
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f804 	bl	80035bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80035b4:	bf00      	nop
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	460b      	mov	r3, r1
 80035c6:	607a      	str	r2, [r7, #4]
 80035c8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80035ca:	f107 0314 	add.w	r3, r7, #20
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fd fe98 	bl	8001304 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80035d4:	7afb      	ldrb	r3, [r7, #11]
 80035d6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f107 0214 	add.w	r2, r7, #20
 80035e6:	2107      	movs	r1, #7
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	4798      	blx	r3
  }
 80035ec:	bf00      	nop
 80035ee:	3720      	adds	r7, #32
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <_Z41__static_initialization_and_destruction_0ii>:
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d112      	bne.n	800362a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800360a:	4293      	cmp	r3, r2
 800360c:	d10d      	bne.n	800362a <_Z41__static_initialization_and_destruction_0ii+0x36>
ros::NodeHandle nh;
 800360e:	480e      	ldr	r0, [pc, #56]	; (8003648 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003610:	f7ff f906 	bl	8002820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
RoboClaw roboclaw = RoboClaw(&huart1, 100);
 8003614:	2264      	movs	r2, #100	; 0x64
 8003616:	490d      	ldr	r1, [pc, #52]	; (800364c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003618:	480d      	ldr	r0, [pc, #52]	; (8003650 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800361a:	f7fc ff97 	bl	800054c <_ZN8RoboClawC1EP20__UART_HandleTypeDefm>
ros::Subscriber<geometry_msgs::Twist> AV_vel_sub("cmd_vel_AV", &AV_vel_cb);	//subscribing a topic from rpi's topic
 800361e:	2301      	movs	r3, #1
 8003620:	4a0c      	ldr	r2, [pc, #48]	; (8003654 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003622:	490d      	ldr	r1, [pc, #52]	; (8003658 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003624:	480d      	ldr	r0, [pc, #52]	; (800365c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003626:	f7ff fa6f 	bl	8002b08 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d107      	bne.n	8003640 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003636:	4293      	cmp	r3, r2
 8003638:	d102      	bne.n	8003640 <_Z41__static_initialization_and_destruction_0ii+0x4c>
RoboClaw roboclaw = RoboClaw(&huart1, 100);
 800363a:	4805      	ldr	r0, [pc, #20]	; (8003650 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800363c:	f7fc ff99 	bl	8000572 <_ZN8RoboClawD1Ev>
}
 8003640:	bf00      	nop
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	20000374 	.word	0x20000374
 800364c:	200000e0 	.word	0x200000e0
 8003650:	200088b0 	.word	0x200088b0
 8003654:	080029f1 	.word	0x080029f1
 8003658:	08008e34 	.word	0x08008e34
 800365c:	200088c0 	.word	0x200088c0

08003660 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3310      	adds	r3, #16
 800366e:	6839      	ldr	r1, [r7, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff f883 	bl	800277c <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	3210      	adds	r2, #16
 800367e:	4610      	mov	r0, r2
 8003680:	4798      	blx	r3
  }
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8003696:	4618      	mov	r0, r3
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	3310      	adds	r3, #16
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff f88a 	bl	80027c8 <_ZN13geometry_msgs5Twist7getTypeEv>
 80036b4:	4603      	mov	r3, r0
  }
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 80036be:	b580      	push	{r7, lr}
 80036c0:	b082      	sub	sp, #8
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3310      	adds	r3, #16
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff f88a 	bl	80027e4 <_ZN13geometry_msgs5Twist6getMD5Ev>
 80036d0:	4603      	mov	r3, r0
  }
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
    return configured_;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80036e8:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 80036ec:	4618      	mov	r0, r3
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <_GLOBAL__sub_I_nh>:
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003700:	2001      	movs	r0, #1
 8003702:	f7ff ff77 	bl	80035f4 <_Z41__static_initialization_and_destruction_0ii>
 8003706:	bd80      	pop	{r7, pc}

08003708 <_GLOBAL__sub_D_nh>:
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
 800370c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003710:	2000      	movs	r0, #0
 8003712:	f7ff ff6f 	bl	80035f4 <_Z41__static_initialization_and_destruction_0ii>
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800371e:	4b0f      	ldr	r3, [pc, #60]	; (800375c <HAL_MspInit+0x44>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	4a0e      	ldr	r2, [pc, #56]	; (800375c <HAL_MspInit+0x44>)
 8003724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003728:	6413      	str	r3, [r2, #64]	; 0x40
 800372a:	4b0c      	ldr	r3, [pc, #48]	; (800375c <HAL_MspInit+0x44>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003732:	607b      	str	r3, [r7, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003736:	4b09      	ldr	r3, [pc, #36]	; (800375c <HAL_MspInit+0x44>)
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	4a08      	ldr	r2, [pc, #32]	; (800375c <HAL_MspInit+0x44>)
 800373c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003740:	6453      	str	r3, [r2, #68]	; 0x44
 8003742:	4b06      	ldr	r3, [pc, #24]	; (800375c <HAL_MspInit+0x44>)
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374a:	603b      	str	r3, [r7, #0]
 800374c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40023800 	.word	0x40023800

08003760 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003770:	d113      	bne.n	800379a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003772:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <HAL_TIM_Base_MspInit+0x44>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	4a0b      	ldr	r2, [pc, #44]	; (80037a4 <HAL_TIM_Base_MspInit+0x44>)
 8003778:	f043 0301 	orr.w	r3, r3, #1
 800377c:	6413      	str	r3, [r2, #64]	; 0x40
 800377e:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <HAL_TIM_Base_MspInit+0x44>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800378a:	2200      	movs	r2, #0
 800378c:	2100      	movs	r1, #0
 800378e:	201c      	movs	r0, #28
 8003790:	f000 fc17 	bl	8003fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003794:	201c      	movs	r0, #28
 8003796:	f000 fc30 	bl	8003ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800379a:	bf00      	nop
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40023800 	.word	0x40023800

080037a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b0:	f107 030c 	add.w	r3, r7, #12
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	605a      	str	r2, [r3, #4]
 80037ba:	609a      	str	r2, [r3, #8]
 80037bc:	60da      	str	r2, [r3, #12]
 80037be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c8:	d11b      	bne.n	8003802 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ca:	4b10      	ldr	r3, [pc, #64]	; (800380c <HAL_TIM_MspPostInit+0x64>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	4a0f      	ldr	r2, [pc, #60]	; (800380c <HAL_TIM_MspPostInit+0x64>)
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	6313      	str	r3, [r2, #48]	; 0x30
 80037d6:	4b0d      	ldr	r3, [pc, #52]	; (800380c <HAL_TIM_MspPostInit+0x64>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80037e2:	2320      	movs	r3, #32
 80037e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e6:	2302      	movs	r3, #2
 80037e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ee:	2300      	movs	r3, #0
 80037f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037f2:	2301      	movs	r3, #1
 80037f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037f6:	f107 030c 	add.w	r3, r7, #12
 80037fa:	4619      	mov	r1, r3
 80037fc:	4804      	ldr	r0, [pc, #16]	; (8003810 <HAL_TIM_MspPostInit+0x68>)
 80037fe:	f001 f821 	bl	8004844 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003802:	bf00      	nop
 8003804:	3720      	adds	r7, #32
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40023800 	.word	0x40023800
 8003810:	40020000 	.word	0x40020000

08003814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b0b0      	sub	sp, #192	; 0xc0
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800381c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	609a      	str	r2, [r3, #8]
 8003828:	60da      	str	r2, [r3, #12]
 800382a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800382c:	f107 031c 	add.w	r3, r7, #28
 8003830:	2290      	movs	r2, #144	; 0x90
 8003832:	2100      	movs	r1, #0
 8003834:	4618      	mov	r0, r3
 8003836:	f005 f8a5 	bl	8008984 <memset>
  if(huart->Instance==USART1)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a5e      	ldr	r2, [pc, #376]	; (80039b8 <HAL_UART_MspInit+0x1a4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	f040 80c7 	bne.w	80039d4 <HAL_UART_MspInit+0x1c0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003846:	2340      	movs	r3, #64	; 0x40
 8003848:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800384a:	2300      	movs	r3, #0
 800384c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800384e:	f107 031c 	add.w	r3, r7, #28
 8003852:	4618      	mov	r0, r3
 8003854:	f001 fe8e 	bl	8005574 <HAL_RCCEx_PeriphCLKConfig>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800385e:	f7fd fa77 	bl	8000d50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003862:	4b56      	ldr	r3, [pc, #344]	; (80039bc <HAL_UART_MspInit+0x1a8>)
 8003864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003866:	4a55      	ldr	r2, [pc, #340]	; (80039bc <HAL_UART_MspInit+0x1a8>)
 8003868:	f043 0310 	orr.w	r3, r3, #16
 800386c:	6453      	str	r3, [r2, #68]	; 0x44
 800386e:	4b53      	ldr	r3, [pc, #332]	; (80039bc <HAL_UART_MspInit+0x1a8>)
 8003870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	61bb      	str	r3, [r7, #24]
 8003878:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800387a:	4b50      	ldr	r3, [pc, #320]	; (80039bc <HAL_UART_MspInit+0x1a8>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	4a4f      	ldr	r2, [pc, #316]	; (80039bc <HAL_UART_MspInit+0x1a8>)
 8003880:	f043 0302 	orr.w	r3, r3, #2
 8003884:	6313      	str	r3, [r2, #48]	; 0x30
 8003886:	4b4d      	ldr	r3, [pc, #308]	; (80039bc <HAL_UART_MspInit+0x1a8>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003896:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389a:	2302      	movs	r3, #2
 800389c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038a6:	2303      	movs	r3, #3
 80038a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80038ac:	2304      	movs	r3, #4
 80038ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038b6:	4619      	mov	r1, r3
 80038b8:	4841      	ldr	r0, [pc, #260]	; (80039c0 <HAL_UART_MspInit+0x1ac>)
 80038ba:	f000 ffc3 	bl	8004844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80038be:	2340      	movs	r3, #64	; 0x40
 80038c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c4:	2302      	movs	r3, #2
 80038c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ca:	2300      	movs	r3, #0
 80038cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038d0:	2303      	movs	r3, #3
 80038d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80038d6:	2307      	movs	r3, #7
 80038d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038dc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038e0:	4619      	mov	r1, r3
 80038e2:	4837      	ldr	r0, [pc, #220]	; (80039c0 <HAL_UART_MspInit+0x1ac>)
 80038e4:	f000 ffae 	bl	8004844 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80038e8:	4b36      	ldr	r3, [pc, #216]	; (80039c4 <HAL_UART_MspInit+0x1b0>)
 80038ea:	4a37      	ldr	r2, [pc, #220]	; (80039c8 <HAL_UART_MspInit+0x1b4>)
 80038ec:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80038ee:	4b35      	ldr	r3, [pc, #212]	; (80039c4 <HAL_UART_MspInit+0x1b0>)
 80038f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038f4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038f6:	4b33      	ldr	r3, [pc, #204]	; (80039c4 <HAL_UART_MspInit+0x1b0>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038fc:	4b31      	ldr	r3, [pc, #196]	; (80039c4 <HAL_UART_MspInit+0x1b0>)
 80038fe:	2200      	movs	r2, #0
 8003900:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003902:	4b30      	ldr	r3, [pc, #192]	; (80039c4 <HAL_UART_MspInit+0x1b0>)
 8003904:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003908:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800390a:	4b2e      	ldr	r3, [pc, #184]	; (80039c4 <HAL_UART_MspInit+0x1b0>)
 800390c:	2200      	movs	r2, #0
 800390e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003910:	4b2c      	ldr	r3, [pc, #176]	; (80039c4 <HAL_UART_MspInit+0x1b0>)
 8003912:	2200      	movs	r2, #0
 8003914:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003916:	4b2b      	ldr	r3, [pc, #172]	; (80039c4 <HAL_UART_MspInit+0x1b0>)
 8003918:	2200      	movs	r2, #0
 800391a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800391c:	4b29      	ldr	r3, [pc, #164]	; (80039c4 <HAL_UART_MspInit+0x1b0>)
 800391e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003922:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003924:	4b27      	ldr	r3, [pc, #156]	; (80039c4 <HAL_UART_MspInit+0x1b0>)
 8003926:	2200      	movs	r2, #0
 8003928:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800392a:	4826      	ldr	r0, [pc, #152]	; (80039c4 <HAL_UART_MspInit+0x1b0>)
 800392c:	f000 fb80 	bl	8004030 <HAL_DMA_Init>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_UART_MspInit+0x126>
    {
      Error_Handler();
 8003936:	f7fd fa0b 	bl	8000d50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a21      	ldr	r2, [pc, #132]	; (80039c4 <HAL_UART_MspInit+0x1b0>)
 800393e:	675a      	str	r2, [r3, #116]	; 0x74
 8003940:	4a20      	ldr	r2, [pc, #128]	; (80039c4 <HAL_UART_MspInit+0x1b0>)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003946:	4b21      	ldr	r3, [pc, #132]	; (80039cc <HAL_UART_MspInit+0x1b8>)
 8003948:	4a21      	ldr	r2, [pc, #132]	; (80039d0 <HAL_UART_MspInit+0x1bc>)
 800394a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800394c:	4b1f      	ldr	r3, [pc, #124]	; (80039cc <HAL_UART_MspInit+0x1b8>)
 800394e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003952:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003954:	4b1d      	ldr	r3, [pc, #116]	; (80039cc <HAL_UART_MspInit+0x1b8>)
 8003956:	2240      	movs	r2, #64	; 0x40
 8003958:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800395a:	4b1c      	ldr	r3, [pc, #112]	; (80039cc <HAL_UART_MspInit+0x1b8>)
 800395c:	2200      	movs	r2, #0
 800395e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003960:	4b1a      	ldr	r3, [pc, #104]	; (80039cc <HAL_UART_MspInit+0x1b8>)
 8003962:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003966:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003968:	4b18      	ldr	r3, [pc, #96]	; (80039cc <HAL_UART_MspInit+0x1b8>)
 800396a:	2200      	movs	r2, #0
 800396c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800396e:	4b17      	ldr	r3, [pc, #92]	; (80039cc <HAL_UART_MspInit+0x1b8>)
 8003970:	2200      	movs	r2, #0
 8003972:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003974:	4b15      	ldr	r3, [pc, #84]	; (80039cc <HAL_UART_MspInit+0x1b8>)
 8003976:	2200      	movs	r2, #0
 8003978:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800397a:	4b14      	ldr	r3, [pc, #80]	; (80039cc <HAL_UART_MspInit+0x1b8>)
 800397c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003980:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003982:	4b12      	ldr	r3, [pc, #72]	; (80039cc <HAL_UART_MspInit+0x1b8>)
 8003984:	2200      	movs	r2, #0
 8003986:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003988:	4810      	ldr	r0, [pc, #64]	; (80039cc <HAL_UART_MspInit+0x1b8>)
 800398a:	f000 fb51 	bl	8004030 <HAL_DMA_Init>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <HAL_UART_MspInit+0x184>
    {
      Error_Handler();
 8003994:	f7fd f9dc 	bl	8000d50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a0c      	ldr	r2, [pc, #48]	; (80039cc <HAL_UART_MspInit+0x1b8>)
 800399c:	671a      	str	r2, [r3, #112]	; 0x70
 800399e:	4a0b      	ldr	r2, [pc, #44]	; (80039cc <HAL_UART_MspInit+0x1b8>)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80039a4:	2200      	movs	r2, #0
 80039a6:	2100      	movs	r1, #0
 80039a8:	2025      	movs	r0, #37	; 0x25
 80039aa:	f000 fb0a 	bl	8003fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80039ae:	2025      	movs	r0, #37	; 0x25
 80039b0:	f000 fb23 	bl	8003ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80039b4:	e0b7      	b.n	8003b26 <HAL_UART_MspInit+0x312>
 80039b6:	bf00      	nop
 80039b8:	40011000 	.word	0x40011000
 80039bc:	40023800 	.word	0x40023800
 80039c0:	40020400 	.word	0x40020400
 80039c4:	200001f0 	.word	0x200001f0
 80039c8:	40026440 	.word	0x40026440
 80039cc:	20000250 	.word	0x20000250
 80039d0:	400264b8 	.word	0x400264b8
  else if(huart->Instance==USART3)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a55      	ldr	r2, [pc, #340]	; (8003b30 <HAL_UART_MspInit+0x31c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	f040 80a3 	bne.w	8003b26 <HAL_UART_MspInit+0x312>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80039e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039e4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80039e6:	2300      	movs	r3, #0
 80039e8:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039ea:	f107 031c 	add.w	r3, r7, #28
 80039ee:	4618      	mov	r0, r3
 80039f0:	f001 fdc0 	bl	8005574 <HAL_RCCEx_PeriphCLKConfig>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_UART_MspInit+0x1ea>
      Error_Handler();
 80039fa:	f7fd f9a9 	bl	8000d50 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80039fe:	4b4d      	ldr	r3, [pc, #308]	; (8003b34 <HAL_UART_MspInit+0x320>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	4a4c      	ldr	r2, [pc, #304]	; (8003b34 <HAL_UART_MspInit+0x320>)
 8003a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a08:	6413      	str	r3, [r2, #64]	; 0x40
 8003a0a:	4b4a      	ldr	r3, [pc, #296]	; (8003b34 <HAL_UART_MspInit+0x320>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a12:	613b      	str	r3, [r7, #16]
 8003a14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a16:	4b47      	ldr	r3, [pc, #284]	; (8003b34 <HAL_UART_MspInit+0x320>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	4a46      	ldr	r2, [pc, #280]	; (8003b34 <HAL_UART_MspInit+0x320>)
 8003a1c:	f043 0308 	orr.w	r3, r3, #8
 8003a20:	6313      	str	r3, [r2, #48]	; 0x30
 8003a22:	4b44      	ldr	r3, [pc, #272]	; (8003b34 <HAL_UART_MspInit+0x320>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003a2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a36:	2302      	movs	r3, #2
 8003a38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a42:	2303      	movs	r3, #3
 8003a44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a48:	2307      	movs	r3, #7
 8003a4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a4e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a52:	4619      	mov	r1, r3
 8003a54:	4838      	ldr	r0, [pc, #224]	; (8003b38 <HAL_UART_MspInit+0x324>)
 8003a56:	f000 fef5 	bl	8004844 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003a5a:	4b38      	ldr	r3, [pc, #224]	; (8003b3c <HAL_UART_MspInit+0x328>)
 8003a5c:	4a38      	ldr	r2, [pc, #224]	; (8003b40 <HAL_UART_MspInit+0x32c>)
 8003a5e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003a60:	4b36      	ldr	r3, [pc, #216]	; (8003b3c <HAL_UART_MspInit+0x328>)
 8003a62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a66:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a68:	4b34      	ldr	r3, [pc, #208]	; (8003b3c <HAL_UART_MspInit+0x328>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a6e:	4b33      	ldr	r3, [pc, #204]	; (8003b3c <HAL_UART_MspInit+0x328>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a74:	4b31      	ldr	r3, [pc, #196]	; (8003b3c <HAL_UART_MspInit+0x328>)
 8003a76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a7a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a7c:	4b2f      	ldr	r3, [pc, #188]	; (8003b3c <HAL_UART_MspInit+0x328>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a82:	4b2e      	ldr	r3, [pc, #184]	; (8003b3c <HAL_UART_MspInit+0x328>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003a88:	4b2c      	ldr	r3, [pc, #176]	; (8003b3c <HAL_UART_MspInit+0x328>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003a8e:	4b2b      	ldr	r3, [pc, #172]	; (8003b3c <HAL_UART_MspInit+0x328>)
 8003a90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a94:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a96:	4b29      	ldr	r3, [pc, #164]	; (8003b3c <HAL_UART_MspInit+0x328>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003a9c:	4827      	ldr	r0, [pc, #156]	; (8003b3c <HAL_UART_MspInit+0x328>)
 8003a9e:	f000 fac7 	bl	8004030 <HAL_DMA_Init>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_UART_MspInit+0x298>
      Error_Handler();
 8003aa8:	f7fd f952 	bl	8000d50 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a23      	ldr	r2, [pc, #140]	; (8003b3c <HAL_UART_MspInit+0x328>)
 8003ab0:	675a      	str	r2, [r3, #116]	; 0x74
 8003ab2:	4a22      	ldr	r2, [pc, #136]	; (8003b3c <HAL_UART_MspInit+0x328>)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003ab8:	4b22      	ldr	r3, [pc, #136]	; (8003b44 <HAL_UART_MspInit+0x330>)
 8003aba:	4a23      	ldr	r2, [pc, #140]	; (8003b48 <HAL_UART_MspInit+0x334>)
 8003abc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003abe:	4b21      	ldr	r3, [pc, #132]	; (8003b44 <HAL_UART_MspInit+0x330>)
 8003ac0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ac4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ac6:	4b1f      	ldr	r3, [pc, #124]	; (8003b44 <HAL_UART_MspInit+0x330>)
 8003ac8:	2240      	movs	r2, #64	; 0x40
 8003aca:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003acc:	4b1d      	ldr	r3, [pc, #116]	; (8003b44 <HAL_UART_MspInit+0x330>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ad2:	4b1c      	ldr	r3, [pc, #112]	; (8003b44 <HAL_UART_MspInit+0x330>)
 8003ad4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ad8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ada:	4b1a      	ldr	r3, [pc, #104]	; (8003b44 <HAL_UART_MspInit+0x330>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ae0:	4b18      	ldr	r3, [pc, #96]	; (8003b44 <HAL_UART_MspInit+0x330>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003ae6:	4b17      	ldr	r3, [pc, #92]	; (8003b44 <HAL_UART_MspInit+0x330>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003aec:	4b15      	ldr	r3, [pc, #84]	; (8003b44 <HAL_UART_MspInit+0x330>)
 8003aee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003af2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003af4:	4b13      	ldr	r3, [pc, #76]	; (8003b44 <HAL_UART_MspInit+0x330>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003afa:	4812      	ldr	r0, [pc, #72]	; (8003b44 <HAL_UART_MspInit+0x330>)
 8003afc:	f000 fa98 	bl	8004030 <HAL_DMA_Init>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8003b06:	f7fd f923 	bl	8000d50 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a0d      	ldr	r2, [pc, #52]	; (8003b44 <HAL_UART_MspInit+0x330>)
 8003b0e:	671a      	str	r2, [r3, #112]	; 0x70
 8003b10:	4a0c      	ldr	r2, [pc, #48]	; (8003b44 <HAL_UART_MspInit+0x330>)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003b16:	2200      	movs	r2, #0
 8003b18:	2100      	movs	r1, #0
 8003b1a:	2027      	movs	r0, #39	; 0x27
 8003b1c:	f000 fa51 	bl	8003fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003b20:	2027      	movs	r0, #39	; 0x27
 8003b22:	f000 fa6a 	bl	8003ffa <HAL_NVIC_EnableIRQ>
}
 8003b26:	bf00      	nop
 8003b28:	37c0      	adds	r7, #192	; 0xc0
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40004800 	.word	0x40004800
 8003b34:	40023800 	.word	0x40023800
 8003b38:	40020c00 	.word	0x40020c00
 8003b3c:	200002b0 	.word	0x200002b0
 8003b40:	40026028 	.word	0x40026028
 8003b44:	20000310 	.word	0x20000310
 8003b48:	40026058 	.word	0x40026058

08003b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b50:	e7fe      	b.n	8003b50 <NMI_Handler+0x4>

08003b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b52:	b480      	push	{r7}
 8003b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b56:	e7fe      	b.n	8003b56 <HardFault_Handler+0x4>

08003b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b5c:	e7fe      	b.n	8003b5c <MemManage_Handler+0x4>

08003b5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b62:	e7fe      	b.n	8003b62 <BusFault_Handler+0x4>

08003b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b68:	e7fe      	b.n	8003b68 <UsageFault_Handler+0x4>

08003b6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b6e:	bf00      	nop
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b7c:	bf00      	nop
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b86:	b480      	push	{r7}
 8003b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b8a:	bf00      	nop
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b98:	f000 f918 	bl	8003dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b9c:	bf00      	nop
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003ba4:	4802      	ldr	r0, [pc, #8]	; (8003bb0 <DMA1_Stream1_IRQHandler+0x10>)
 8003ba6:	f000 fbe3 	bl	8004370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003baa:	bf00      	nop
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	200002b0 	.word	0x200002b0

08003bb4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003bb8:	4802      	ldr	r0, [pc, #8]	; (8003bc4 <DMA1_Stream3_IRQHandler+0x10>)
 8003bba:	f000 fbd9 	bl	8004370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003bbe:	bf00      	nop
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20000310 	.word	0x20000310

08003bc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003bcc:	4802      	ldr	r0, [pc, #8]	; (8003bd8 <TIM2_IRQHandler+0x10>)
 8003bce:	f002 faab 	bl	8006128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003bd2:	bf00      	nop
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000094 	.word	0x20000094

08003bdc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003be0:	4802      	ldr	r0, [pc, #8]	; (8003bec <USART1_IRQHandler+0x10>)
 8003be2:	f003 fc91 	bl	8007508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003be6:	bf00      	nop
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	200000e0 	.word	0x200000e0

08003bf0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003bf4:	4802      	ldr	r0, [pc, #8]	; (8003c00 <USART3_IRQHandler+0x10>)
 8003bf6:	f003 fc87 	bl	8007508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003bfa:	bf00      	nop
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000168 	.word	0x20000168

08003c04 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003c08:	4802      	ldr	r0, [pc, #8]	; (8003c14 <DMA2_Stream2_IRQHandler+0x10>)
 8003c0a:	f000 fbb1 	bl	8004370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003c0e:	bf00      	nop
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	200001f0 	.word	0x200001f0

08003c18 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003c1c:	4802      	ldr	r0, [pc, #8]	; (8003c28 <DMA2_Stream7_IRQHandler+0x10>)
 8003c1e:	f000 fba7 	bl	8004370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003c22:	bf00      	nop
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20000250 	.word	0x20000250

08003c2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
	return 1;
 8003c30:	2301      	movs	r3, #1
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <_kill>:

int _kill(int pid, int sig)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c46:	f004 fe65 	bl	8008914 <__errno>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2216      	movs	r2, #22
 8003c4e:	601a      	str	r2, [r3, #0]
	return -1;
 8003c50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <_exit>:

void _exit (int status)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c64:	f04f 31ff 	mov.w	r1, #4294967295
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff ffe7 	bl	8003c3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c6e:	e7fe      	b.n	8003c6e <_exit+0x12>

08003c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c78:	4a14      	ldr	r2, [pc, #80]	; (8003ccc <_sbrk+0x5c>)
 8003c7a:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <_sbrk+0x60>)
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c84:	4b13      	ldr	r3, [pc, #76]	; (8003cd4 <_sbrk+0x64>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d102      	bne.n	8003c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c8c:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <_sbrk+0x64>)
 8003c8e:	4a12      	ldr	r2, [pc, #72]	; (8003cd8 <_sbrk+0x68>)
 8003c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c92:	4b10      	ldr	r3, [pc, #64]	; (8003cd4 <_sbrk+0x64>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4413      	add	r3, r2
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d207      	bcs.n	8003cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ca0:	f004 fe38 	bl	8008914 <__errno>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	220c      	movs	r2, #12
 8003ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003caa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cae:	e009      	b.n	8003cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cb0:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <_sbrk+0x64>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cb6:	4b07      	ldr	r3, [pc, #28]	; (8003cd4 <_sbrk+0x64>)
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	4a05      	ldr	r2, [pc, #20]	; (8003cd4 <_sbrk+0x64>)
 8003cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	20080000 	.word	0x20080000
 8003cd0:	00000400 	.word	0x00000400
 8003cd4:	20008920 	.word	0x20008920
 8003cd8:	20008938 	.word	0x20008938

08003cdc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ce0:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <SystemInit+0x20>)
 8003ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce6:	4a05      	ldr	r2, [pc, #20]	; (8003cfc <SystemInit+0x20>)
 8003ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cf0:	bf00      	nop
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	e000ed00 	.word	0xe000ed00

08003d00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d04:	480d      	ldr	r0, [pc, #52]	; (8003d3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003d06:	490e      	ldr	r1, [pc, #56]	; (8003d40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003d08:	4a0e      	ldr	r2, [pc, #56]	; (8003d44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d0c:	e002      	b.n	8003d14 <LoopCopyDataInit>

08003d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d12:	3304      	adds	r3, #4

08003d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d18:	d3f9      	bcc.n	8003d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d1a:	4a0b      	ldr	r2, [pc, #44]	; (8003d48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003d1c:	4c0b      	ldr	r4, [pc, #44]	; (8003d4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d20:	e001      	b.n	8003d26 <LoopFillZerobss>

08003d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d24:	3204      	adds	r2, #4

08003d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d28:	d3fb      	bcc.n	8003d22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003d2a:	f7ff ffd7 	bl	8003cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d2e:	f004 fdf7 	bl	8008920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d32:	f7fc fd41 	bl	80007b8 <main>
  bx  lr    
 8003d36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d38:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d40:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003d44:	08008f94 	.word	0x08008f94
  ldr r2, =_sbss
 8003d48:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003d4c:	20008938 	.word	0x20008938

08003d50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d50:	e7fe      	b.n	8003d50 <ADC_IRQHandler>

08003d52 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d56:	2003      	movs	r0, #3
 8003d58:	f000 f928 	bl	8003fac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	f000 f805 	bl	8003d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d62:	f7ff fcd9 	bl	8003718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d74:	4b12      	ldr	r3, [pc, #72]	; (8003dc0 <HAL_InitTick+0x54>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	4b12      	ldr	r3, [pc, #72]	; (8003dc4 <HAL_InitTick+0x58>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 f943 	bl	8004016 <HAL_SYSTICK_Config>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e00e      	b.n	8003db8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b0f      	cmp	r3, #15
 8003d9e:	d80a      	bhi.n	8003db6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003da0:	2200      	movs	r2, #0
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	f04f 30ff 	mov.w	r0, #4294967295
 8003da8:	f000 f90b 	bl	8003fc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003dac:	4a06      	ldr	r2, [pc, #24]	; (8003dc8 <HAL_InitTick+0x5c>)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
 8003db4:	e000      	b.n	8003db8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	20000000 	.word	0x20000000
 8003dc4:	20000008 	.word	0x20000008
 8003dc8:	20000004 	.word	0x20000004

08003dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003dd0:	4b06      	ldr	r3, [pc, #24]	; (8003dec <HAL_IncTick+0x20>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <HAL_IncTick+0x24>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4413      	add	r3, r2
 8003ddc:	4a04      	ldr	r2, [pc, #16]	; (8003df0 <HAL_IncTick+0x24>)
 8003dde:	6013      	str	r3, [r2, #0]
}
 8003de0:	bf00      	nop
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	20000008 	.word	0x20000008
 8003df0:	20008924 	.word	0x20008924

08003df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  return uwTick;
 8003df8:	4b03      	ldr	r3, [pc, #12]	; (8003e08 <HAL_GetTick+0x14>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	20008924 	.word	0x20008924

08003e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <__NVIC_SetPriorityGrouping+0x40>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e28:	4013      	ands	r3, r2
 8003e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003e34:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <__NVIC_SetPriorityGrouping+0x44>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e3a:	4a04      	ldr	r2, [pc, #16]	; (8003e4c <__NVIC_SetPriorityGrouping+0x40>)
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	60d3      	str	r3, [r2, #12]
}
 8003e40:	bf00      	nop
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	e000ed00 	.word	0xe000ed00
 8003e50:	05fa0000 	.word	0x05fa0000

08003e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e58:	4b04      	ldr	r3, [pc, #16]	; (8003e6c <__NVIC_GetPriorityGrouping+0x18>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	0a1b      	lsrs	r3, r3, #8
 8003e5e:	f003 0307 	and.w	r3, r3, #7
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	e000ed00 	.word	0xe000ed00

08003e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	4603      	mov	r3, r0
 8003e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	db0b      	blt.n	8003e9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e82:	79fb      	ldrb	r3, [r7, #7]
 8003e84:	f003 021f 	and.w	r2, r3, #31
 8003e88:	4907      	ldr	r1, [pc, #28]	; (8003ea8 <__NVIC_EnableIRQ+0x38>)
 8003e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	2001      	movs	r0, #1
 8003e92:	fa00 f202 	lsl.w	r2, r0, r2
 8003e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	e000e100 	.word	0xe000e100

08003eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	6039      	str	r1, [r7, #0]
 8003eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	db0a      	blt.n	8003ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	490c      	ldr	r1, [pc, #48]	; (8003ef8 <__NVIC_SetPriority+0x4c>)
 8003ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eca:	0112      	lsls	r2, r2, #4
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	440b      	add	r3, r1
 8003ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ed4:	e00a      	b.n	8003eec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	4908      	ldr	r1, [pc, #32]	; (8003efc <__NVIC_SetPriority+0x50>)
 8003edc:	79fb      	ldrb	r3, [r7, #7]
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	3b04      	subs	r3, #4
 8003ee4:	0112      	lsls	r2, r2, #4
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	440b      	add	r3, r1
 8003eea:	761a      	strb	r2, [r3, #24]
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	e000e100 	.word	0xe000e100
 8003efc:	e000ed00 	.word	0xe000ed00

08003f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b089      	sub	sp, #36	; 0x24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f1c3 0307 	rsb	r3, r3, #7
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	bf28      	it	cs
 8003f1e:	2304      	movcs	r3, #4
 8003f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	3304      	adds	r3, #4
 8003f26:	2b06      	cmp	r3, #6
 8003f28:	d902      	bls.n	8003f30 <NVIC_EncodePriority+0x30>
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	3b03      	subs	r3, #3
 8003f2e:	e000      	b.n	8003f32 <NVIC_EncodePriority+0x32>
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f34:	f04f 32ff 	mov.w	r2, #4294967295
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	43da      	mvns	r2, r3
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	401a      	ands	r2, r3
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f48:	f04f 31ff 	mov.w	r1, #4294967295
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f52:	43d9      	mvns	r1, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f58:	4313      	orrs	r3, r2
         );
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3724      	adds	r7, #36	; 0x24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f78:	d301      	bcc.n	8003f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e00f      	b.n	8003f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f7e:	4a0a      	ldr	r2, [pc, #40]	; (8003fa8 <SysTick_Config+0x40>)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f86:	210f      	movs	r1, #15
 8003f88:	f04f 30ff 	mov.w	r0, #4294967295
 8003f8c:	f7ff ff8e 	bl	8003eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f90:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <SysTick_Config+0x40>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f96:	4b04      	ldr	r3, [pc, #16]	; (8003fa8 <SysTick_Config+0x40>)
 8003f98:	2207      	movs	r2, #7
 8003f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	e000e010 	.word	0xe000e010

08003fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7ff ff29 	bl	8003e0c <__NVIC_SetPriorityGrouping>
}
 8003fba:	bf00      	nop
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b086      	sub	sp, #24
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	4603      	mov	r3, r0
 8003fca:	60b9      	str	r1, [r7, #8]
 8003fcc:	607a      	str	r2, [r7, #4]
 8003fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fd4:	f7ff ff3e 	bl	8003e54 <__NVIC_GetPriorityGrouping>
 8003fd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	6978      	ldr	r0, [r7, #20]
 8003fe0:	f7ff ff8e 	bl	8003f00 <NVIC_EncodePriority>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fea:	4611      	mov	r1, r2
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff ff5d 	bl	8003eac <__NVIC_SetPriority>
}
 8003ff2:	bf00      	nop
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	4603      	mov	r3, r0
 8004002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff ff31 	bl	8003e70 <__NVIC_EnableIRQ>
}
 800400e:	bf00      	nop
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b082      	sub	sp, #8
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7ff ffa2 	bl	8003f68 <SysTick_Config>
 8004024:	4603      	mov	r3, r0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800403c:	f7ff feda 	bl	8003df4 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e099      	b.n	8004180 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0201 	bic.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800406c:	e00f      	b.n	800408e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800406e:	f7ff fec1 	bl	8003df4 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b05      	cmp	r3, #5
 800407a:	d908      	bls.n	800408e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2220      	movs	r2, #32
 8004080:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2203      	movs	r2, #3
 8004086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e078      	b.n	8004180 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1e8      	bne.n	800406e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	4b38      	ldr	r3, [pc, #224]	; (8004188 <HAL_DMA_Init+0x158>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	4313      	orrs	r3, r2
 80040de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	2b04      	cmp	r3, #4
 80040e6:	d107      	bne.n	80040f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	4313      	orrs	r3, r2
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f023 0307 	bic.w	r3, r3, #7
 800410e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	4313      	orrs	r3, r2
 8004118:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	2b04      	cmp	r3, #4
 8004120:	d117      	bne.n	8004152 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4313      	orrs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00e      	beq.n	8004152 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 fb09 	bl	800474c <DMA_CheckFifoParam>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d008      	beq.n	8004152 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2240      	movs	r2, #64	; 0x40
 8004144:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800414e:	2301      	movs	r3, #1
 8004150:	e016      	b.n	8004180 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 fac0 	bl	80046e0 <DMA_CalcBaseAndBitshift>
 8004160:	4603      	mov	r3, r0
 8004162:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004168:	223f      	movs	r2, #63	; 0x3f
 800416a:	409a      	lsls	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	e010803f 	.word	0xe010803f

0800418c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
 8004198:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_DMA_Start_IT+0x26>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e048      	b.n	8004244 <HAL_DMA_Start_IT+0xb8>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d137      	bne.n	8004236 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2202      	movs	r2, #2
 80041ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	68b9      	ldr	r1, [r7, #8]
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 fa52 	bl	8004684 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e4:	223f      	movs	r2, #63	; 0x3f
 80041e6:	409a      	lsls	r2, r3
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0216 	orr.w	r2, r2, #22
 80041fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	695a      	ldr	r2, [r3, #20]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800420a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004210:	2b00      	cmp	r3, #0
 8004212:	d007      	beq.n	8004224 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0208 	orr.w	r2, r2, #8
 8004222:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	e005      	b.n	8004242 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800423e:	2302      	movs	r3, #2
 8004240:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004242:	7dfb      	ldrb	r3, [r7, #23]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004258:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800425a:	f7ff fdcb 	bl	8003df4 <HAL_GetTick>
 800425e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d008      	beq.n	800427e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2280      	movs	r2, #128	; 0x80
 8004270:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e052      	b.n	8004324 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0216 	bic.w	r2, r2, #22
 800428c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695a      	ldr	r2, [r3, #20]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800429c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d103      	bne.n	80042ae <HAL_DMA_Abort+0x62>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d007      	beq.n	80042be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0208 	bic.w	r2, r2, #8
 80042bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0201 	bic.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042ce:	e013      	b.n	80042f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042d0:	f7ff fd90 	bl	8003df4 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b05      	cmp	r3, #5
 80042dc:	d90c      	bls.n	80042f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2220      	movs	r2, #32
 80042e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2203      	movs	r2, #3
 80042e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e015      	b.n	8004324 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1e4      	bne.n	80042d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800430a:	223f      	movs	r2, #63	; 0x3f
 800430c:	409a      	lsls	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d004      	beq.n	800434a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2280      	movs	r2, #128	; 0x80
 8004344:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e00c      	b.n	8004364 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2205      	movs	r2, #5
 800434e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0201 	bic.w	r2, r2, #1
 8004360:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004378:	2300      	movs	r3, #0
 800437a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800437c:	4b8e      	ldr	r3, [pc, #568]	; (80045b8 <HAL_DMA_IRQHandler+0x248>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a8e      	ldr	r2, [pc, #568]	; (80045bc <HAL_DMA_IRQHandler+0x24c>)
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	0a9b      	lsrs	r3, r3, #10
 8004388:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800439a:	2208      	movs	r2, #8
 800439c:	409a      	lsls	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4013      	ands	r3, r2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d01a      	beq.n	80043dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d013      	beq.n	80043dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0204 	bic.w	r2, r2, #4
 80043c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c8:	2208      	movs	r2, #8
 80043ca:	409a      	lsls	r2, r3
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d4:	f043 0201 	orr.w	r2, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e0:	2201      	movs	r2, #1
 80043e2:	409a      	lsls	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d012      	beq.n	8004412 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00b      	beq.n	8004412 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fe:	2201      	movs	r2, #1
 8004400:	409a      	lsls	r2, r3
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440a:	f043 0202 	orr.w	r2, r3, #2
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004416:	2204      	movs	r2, #4
 8004418:	409a      	lsls	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4013      	ands	r3, r2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d012      	beq.n	8004448 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00b      	beq.n	8004448 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004434:	2204      	movs	r2, #4
 8004436:	409a      	lsls	r2, r3
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004440:	f043 0204 	orr.w	r2, r3, #4
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444c:	2210      	movs	r2, #16
 800444e:	409a      	lsls	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4013      	ands	r3, r2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d043      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d03c      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446a:	2210      	movs	r2, #16
 800446c:	409a      	lsls	r2, r3
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d018      	beq.n	80044b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d108      	bne.n	80044a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	d024      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	4798      	blx	r3
 800449e:	e01f      	b.n	80044e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d01b      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	4798      	blx	r3
 80044b0:	e016      	b.n	80044e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d107      	bne.n	80044d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0208 	bic.w	r2, r2, #8
 80044ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e4:	2220      	movs	r2, #32
 80044e6:	409a      	lsls	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4013      	ands	r3, r2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 808f 	beq.w	8004610 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0310 	and.w	r3, r3, #16
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 8087 	beq.w	8004610 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004506:	2220      	movs	r2, #32
 8004508:	409a      	lsls	r2, r3
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b05      	cmp	r3, #5
 8004518:	d136      	bne.n	8004588 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0216 	bic.w	r2, r2, #22
 8004528:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	695a      	ldr	r2, [r3, #20]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004538:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	2b00      	cmp	r3, #0
 8004540:	d103      	bne.n	800454a <HAL_DMA_IRQHandler+0x1da>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004546:	2b00      	cmp	r3, #0
 8004548:	d007      	beq.n	800455a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0208 	bic.w	r2, r2, #8
 8004558:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455e:	223f      	movs	r2, #63	; 0x3f
 8004560:	409a      	lsls	r2, r3
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800457a:	2b00      	cmp	r3, #0
 800457c:	d07e      	beq.n	800467c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	4798      	blx	r3
        }
        return;
 8004586:	e079      	b.n	800467c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d01d      	beq.n	80045d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10d      	bne.n	80045c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d031      	beq.n	8004610 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	4798      	blx	r3
 80045b4:	e02c      	b.n	8004610 <HAL_DMA_IRQHandler+0x2a0>
 80045b6:	bf00      	nop
 80045b8:	20000000 	.word	0x20000000
 80045bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d023      	beq.n	8004610 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	4798      	blx	r3
 80045d0:	e01e      	b.n	8004610 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10f      	bne.n	8004600 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0210 	bic.w	r2, r2, #16
 80045ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004614:	2b00      	cmp	r3, #0
 8004616:	d032      	beq.n	800467e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b00      	cmp	r3, #0
 8004622:	d022      	beq.n	800466a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2205      	movs	r2, #5
 8004628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0201 	bic.w	r2, r2, #1
 800463a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	3301      	adds	r3, #1
 8004640:	60bb      	str	r3, [r7, #8]
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	429a      	cmp	r2, r3
 8004646:	d307      	bcc.n	8004658 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f2      	bne.n	800463c <HAL_DMA_IRQHandler+0x2cc>
 8004656:	e000      	b.n	800465a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004658:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800466e:	2b00      	cmp	r3, #0
 8004670:	d005      	beq.n	800467e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	4798      	blx	r3
 800467a:	e000      	b.n	800467e <HAL_DMA_IRQHandler+0x30e>
        return;
 800467c:	bf00      	nop
    }
  }
}
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
 8004690:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	2b40      	cmp	r3, #64	; 0x40
 80046b0:	d108      	bne.n	80046c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80046c2:	e007      	b.n	80046d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	60da      	str	r2, [r3, #12]
}
 80046d4:	bf00      	nop
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	3b10      	subs	r3, #16
 80046f0:	4a13      	ldr	r2, [pc, #76]	; (8004740 <DMA_CalcBaseAndBitshift+0x60>)
 80046f2:	fba2 2303 	umull	r2, r3, r2, r3
 80046f6:	091b      	lsrs	r3, r3, #4
 80046f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80046fa:	4a12      	ldr	r2, [pc, #72]	; (8004744 <DMA_CalcBaseAndBitshift+0x64>)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4413      	add	r3, r2
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	461a      	mov	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b03      	cmp	r3, #3
 800470c:	d908      	bls.n	8004720 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	461a      	mov	r2, r3
 8004714:	4b0c      	ldr	r3, [pc, #48]	; (8004748 <DMA_CalcBaseAndBitshift+0x68>)
 8004716:	4013      	ands	r3, r2
 8004718:	1d1a      	adds	r2, r3, #4
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	659a      	str	r2, [r3, #88]	; 0x58
 800471e:	e006      	b.n	800472e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	461a      	mov	r2, r3
 8004726:	4b08      	ldr	r3, [pc, #32]	; (8004748 <DMA_CalcBaseAndBitshift+0x68>)
 8004728:	4013      	ands	r3, r2
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	aaaaaaab 	.word	0xaaaaaaab
 8004744:	08008f74 	.word	0x08008f74
 8004748:	fffffc00 	.word	0xfffffc00

0800474c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004754:	2300      	movs	r3, #0
 8004756:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d11f      	bne.n	80047a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b03      	cmp	r3, #3
 800476a:	d856      	bhi.n	800481a <DMA_CheckFifoParam+0xce>
 800476c:	a201      	add	r2, pc, #4	; (adr r2, 8004774 <DMA_CheckFifoParam+0x28>)
 800476e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004772:	bf00      	nop
 8004774:	08004785 	.word	0x08004785
 8004778:	08004797 	.word	0x08004797
 800477c:	08004785 	.word	0x08004785
 8004780:	0800481b 	.word	0x0800481b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004788:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d046      	beq.n	800481e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004794:	e043      	b.n	800481e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800479e:	d140      	bne.n	8004822 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047a4:	e03d      	b.n	8004822 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ae:	d121      	bne.n	80047f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d837      	bhi.n	8004826 <DMA_CheckFifoParam+0xda>
 80047b6:	a201      	add	r2, pc, #4	; (adr r2, 80047bc <DMA_CheckFifoParam+0x70>)
 80047b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047bc:	080047cd 	.word	0x080047cd
 80047c0:	080047d3 	.word	0x080047d3
 80047c4:	080047cd 	.word	0x080047cd
 80047c8:	080047e5 	.word	0x080047e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	73fb      	strb	r3, [r7, #15]
      break;
 80047d0:	e030      	b.n	8004834 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d025      	beq.n	800482a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047e2:	e022      	b.n	800482a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047ec:	d11f      	bne.n	800482e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80047f2:	e01c      	b.n	800482e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d903      	bls.n	8004802 <DMA_CheckFifoParam+0xb6>
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	2b03      	cmp	r3, #3
 80047fe:	d003      	beq.n	8004808 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004800:	e018      	b.n	8004834 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	73fb      	strb	r3, [r7, #15]
      break;
 8004806:	e015      	b.n	8004834 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00e      	beq.n	8004832 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	73fb      	strb	r3, [r7, #15]
      break;
 8004818:	e00b      	b.n	8004832 <DMA_CheckFifoParam+0xe6>
      break;
 800481a:	bf00      	nop
 800481c:	e00a      	b.n	8004834 <DMA_CheckFifoParam+0xe8>
      break;
 800481e:	bf00      	nop
 8004820:	e008      	b.n	8004834 <DMA_CheckFifoParam+0xe8>
      break;
 8004822:	bf00      	nop
 8004824:	e006      	b.n	8004834 <DMA_CheckFifoParam+0xe8>
      break;
 8004826:	bf00      	nop
 8004828:	e004      	b.n	8004834 <DMA_CheckFifoParam+0xe8>
      break;
 800482a:	bf00      	nop
 800482c:	e002      	b.n	8004834 <DMA_CheckFifoParam+0xe8>
      break;   
 800482e:	bf00      	nop
 8004830:	e000      	b.n	8004834 <DMA_CheckFifoParam+0xe8>
      break;
 8004832:	bf00      	nop
    }
  } 
  
  return status; 
 8004834:	7bfb      	ldrb	r3, [r7, #15]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop

08004844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004844:	b480      	push	{r7}
 8004846:	b089      	sub	sp, #36	; 0x24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800484e:	2300      	movs	r3, #0
 8004850:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004856:	2300      	movs	r3, #0
 8004858:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800485a:	2300      	movs	r3, #0
 800485c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800485e:	2300      	movs	r3, #0
 8004860:	61fb      	str	r3, [r7, #28]
 8004862:	e175      	b.n	8004b50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004864:	2201      	movs	r2, #1
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	4013      	ands	r3, r2
 8004876:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	429a      	cmp	r2, r3
 800487e:	f040 8164 	bne.w	8004b4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	2b01      	cmp	r3, #1
 800488c:	d005      	beq.n	800489a <HAL_GPIO_Init+0x56>
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d130      	bne.n	80048fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	2203      	movs	r2, #3
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	43db      	mvns	r3, r3
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	4013      	ands	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048d0:	2201      	movs	r2, #1
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	43db      	mvns	r3, r3
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4013      	ands	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	091b      	lsrs	r3, r3, #4
 80048e6:	f003 0201 	and.w	r2, r3, #1
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f003 0303 	and.w	r3, r3, #3
 8004904:	2b03      	cmp	r3, #3
 8004906:	d017      	beq.n	8004938 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	2203      	movs	r2, #3
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	43db      	mvns	r3, r3
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	4013      	ands	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4313      	orrs	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f003 0303 	and.w	r3, r3, #3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d123      	bne.n	800498c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	08da      	lsrs	r2, r3, #3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3208      	adds	r2, #8
 800494c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	220f      	movs	r2, #15
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	43db      	mvns	r3, r3
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	4013      	ands	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	fa02 f303 	lsl.w	r3, r2, r3
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	4313      	orrs	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	08da      	lsrs	r2, r3, #3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	3208      	adds	r2, #8
 8004986:	69b9      	ldr	r1, [r7, #24]
 8004988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	2203      	movs	r2, #3
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	43db      	mvns	r3, r3
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	4013      	ands	r3, r2
 80049a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f003 0203 	and.w	r2, r3, #3
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	fa02 f303 	lsl.w	r3, r2, r3
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 80be 	beq.w	8004b4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049ce:	4b66      	ldr	r3, [pc, #408]	; (8004b68 <HAL_GPIO_Init+0x324>)
 80049d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d2:	4a65      	ldr	r2, [pc, #404]	; (8004b68 <HAL_GPIO_Init+0x324>)
 80049d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049d8:	6453      	str	r3, [r2, #68]	; 0x44
 80049da:	4b63      	ldr	r3, [pc, #396]	; (8004b68 <HAL_GPIO_Init+0x324>)
 80049dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80049e6:	4a61      	ldr	r2, [pc, #388]	; (8004b6c <HAL_GPIO_Init+0x328>)
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	089b      	lsrs	r3, r3, #2
 80049ec:	3302      	adds	r3, #2
 80049ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	220f      	movs	r2, #15
 80049fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004a02:	43db      	mvns	r3, r3
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	4013      	ands	r3, r2
 8004a08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a58      	ldr	r2, [pc, #352]	; (8004b70 <HAL_GPIO_Init+0x32c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d037      	beq.n	8004a82 <HAL_GPIO_Init+0x23e>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a57      	ldr	r2, [pc, #348]	; (8004b74 <HAL_GPIO_Init+0x330>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d031      	beq.n	8004a7e <HAL_GPIO_Init+0x23a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a56      	ldr	r2, [pc, #344]	; (8004b78 <HAL_GPIO_Init+0x334>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d02b      	beq.n	8004a7a <HAL_GPIO_Init+0x236>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a55      	ldr	r2, [pc, #340]	; (8004b7c <HAL_GPIO_Init+0x338>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d025      	beq.n	8004a76 <HAL_GPIO_Init+0x232>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a54      	ldr	r2, [pc, #336]	; (8004b80 <HAL_GPIO_Init+0x33c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d01f      	beq.n	8004a72 <HAL_GPIO_Init+0x22e>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a53      	ldr	r2, [pc, #332]	; (8004b84 <HAL_GPIO_Init+0x340>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d019      	beq.n	8004a6e <HAL_GPIO_Init+0x22a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a52      	ldr	r2, [pc, #328]	; (8004b88 <HAL_GPIO_Init+0x344>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d013      	beq.n	8004a6a <HAL_GPIO_Init+0x226>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a51      	ldr	r2, [pc, #324]	; (8004b8c <HAL_GPIO_Init+0x348>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d00d      	beq.n	8004a66 <HAL_GPIO_Init+0x222>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a50      	ldr	r2, [pc, #320]	; (8004b90 <HAL_GPIO_Init+0x34c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d007      	beq.n	8004a62 <HAL_GPIO_Init+0x21e>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a4f      	ldr	r2, [pc, #316]	; (8004b94 <HAL_GPIO_Init+0x350>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d101      	bne.n	8004a5e <HAL_GPIO_Init+0x21a>
 8004a5a:	2309      	movs	r3, #9
 8004a5c:	e012      	b.n	8004a84 <HAL_GPIO_Init+0x240>
 8004a5e:	230a      	movs	r3, #10
 8004a60:	e010      	b.n	8004a84 <HAL_GPIO_Init+0x240>
 8004a62:	2308      	movs	r3, #8
 8004a64:	e00e      	b.n	8004a84 <HAL_GPIO_Init+0x240>
 8004a66:	2307      	movs	r3, #7
 8004a68:	e00c      	b.n	8004a84 <HAL_GPIO_Init+0x240>
 8004a6a:	2306      	movs	r3, #6
 8004a6c:	e00a      	b.n	8004a84 <HAL_GPIO_Init+0x240>
 8004a6e:	2305      	movs	r3, #5
 8004a70:	e008      	b.n	8004a84 <HAL_GPIO_Init+0x240>
 8004a72:	2304      	movs	r3, #4
 8004a74:	e006      	b.n	8004a84 <HAL_GPIO_Init+0x240>
 8004a76:	2303      	movs	r3, #3
 8004a78:	e004      	b.n	8004a84 <HAL_GPIO_Init+0x240>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	e002      	b.n	8004a84 <HAL_GPIO_Init+0x240>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e000      	b.n	8004a84 <HAL_GPIO_Init+0x240>
 8004a82:	2300      	movs	r3, #0
 8004a84:	69fa      	ldr	r2, [r7, #28]
 8004a86:	f002 0203 	and.w	r2, r2, #3
 8004a8a:	0092      	lsls	r2, r2, #2
 8004a8c:	4093      	lsls	r3, r2
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004a94:	4935      	ldr	r1, [pc, #212]	; (8004b6c <HAL_GPIO_Init+0x328>)
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	089b      	lsrs	r3, r3, #2
 8004a9a:	3302      	adds	r3, #2
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004aa2:	4b3d      	ldr	r3, [pc, #244]	; (8004b98 <HAL_GPIO_Init+0x354>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	43db      	mvns	r3, r3
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ac6:	4a34      	ldr	r2, [pc, #208]	; (8004b98 <HAL_GPIO_Init+0x354>)
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004acc:	4b32      	ldr	r3, [pc, #200]	; (8004b98 <HAL_GPIO_Init+0x354>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004af0:	4a29      	ldr	r2, [pc, #164]	; (8004b98 <HAL_GPIO_Init+0x354>)
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004af6:	4b28      	ldr	r3, [pc, #160]	; (8004b98 <HAL_GPIO_Init+0x354>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	43db      	mvns	r3, r3
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	4013      	ands	r3, r2
 8004b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b1a:	4a1f      	ldr	r2, [pc, #124]	; (8004b98 <HAL_GPIO_Init+0x354>)
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b20:	4b1d      	ldr	r3, [pc, #116]	; (8004b98 <HAL_GPIO_Init+0x354>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	43db      	mvns	r3, r3
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b44:	4a14      	ldr	r2, [pc, #80]	; (8004b98 <HAL_GPIO_Init+0x354>)
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	61fb      	str	r3, [r7, #28]
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	2b0f      	cmp	r3, #15
 8004b54:	f67f ae86 	bls.w	8004864 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004b58:	bf00      	nop
 8004b5a:	bf00      	nop
 8004b5c:	3724      	adds	r7, #36	; 0x24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	40023800 	.word	0x40023800
 8004b6c:	40013800 	.word	0x40013800
 8004b70:	40020000 	.word	0x40020000
 8004b74:	40020400 	.word	0x40020400
 8004b78:	40020800 	.word	0x40020800
 8004b7c:	40020c00 	.word	0x40020c00
 8004b80:	40021000 	.word	0x40021000
 8004b84:	40021400 	.word	0x40021400
 8004b88:	40021800 	.word	0x40021800
 8004b8c:	40021c00 	.word	0x40021c00
 8004b90:	40022000 	.word	0x40022000
 8004b94:	40022400 	.word	0x40022400
 8004b98:	40013c00 	.word	0x40013c00

08004b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	807b      	strh	r3, [r7, #2]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bac:	787b      	ldrb	r3, [r7, #1]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bb2:	887a      	ldrh	r2, [r7, #2]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004bb8:	e003      	b.n	8004bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004bba:	887b      	ldrh	r3, [r7, #2]
 8004bbc:	041a      	lsls	r2, r3, #16
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	619a      	str	r2, [r3, #24]
}
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
	...

08004bd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e29b      	b.n	800511e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 8087 	beq.w	8004d02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bf4:	4b96      	ldr	r3, [pc, #600]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f003 030c 	and.w	r3, r3, #12
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d00c      	beq.n	8004c1a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c00:	4b93      	ldr	r3, [pc, #588]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f003 030c 	and.w	r3, r3, #12
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d112      	bne.n	8004c32 <HAL_RCC_OscConfig+0x62>
 8004c0c:	4b90      	ldr	r3, [pc, #576]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c18:	d10b      	bne.n	8004c32 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c1a:	4b8d      	ldr	r3, [pc, #564]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d06c      	beq.n	8004d00 <HAL_RCC_OscConfig+0x130>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d168      	bne.n	8004d00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e275      	b.n	800511e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c3a:	d106      	bne.n	8004c4a <HAL_RCC_OscConfig+0x7a>
 8004c3c:	4b84      	ldr	r3, [pc, #528]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a83      	ldr	r2, [pc, #524]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c46:	6013      	str	r3, [r2, #0]
 8004c48:	e02e      	b.n	8004ca8 <HAL_RCC_OscConfig+0xd8>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10c      	bne.n	8004c6c <HAL_RCC_OscConfig+0x9c>
 8004c52:	4b7f      	ldr	r3, [pc, #508]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a7e      	ldr	r2, [pc, #504]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	4b7c      	ldr	r3, [pc, #496]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a7b      	ldr	r2, [pc, #492]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004c64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	e01d      	b.n	8004ca8 <HAL_RCC_OscConfig+0xd8>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c74:	d10c      	bne.n	8004c90 <HAL_RCC_OscConfig+0xc0>
 8004c76:	4b76      	ldr	r3, [pc, #472]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a75      	ldr	r2, [pc, #468]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	4b73      	ldr	r3, [pc, #460]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a72      	ldr	r2, [pc, #456]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	e00b      	b.n	8004ca8 <HAL_RCC_OscConfig+0xd8>
 8004c90:	4b6f      	ldr	r3, [pc, #444]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a6e      	ldr	r2, [pc, #440]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c9a:	6013      	str	r3, [r2, #0]
 8004c9c:	4b6c      	ldr	r3, [pc, #432]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a6b      	ldr	r2, [pc, #428]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d013      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb0:	f7ff f8a0 	bl	8003df4 <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cb8:	f7ff f89c 	bl	8003df4 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b64      	cmp	r3, #100	; 0x64
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e229      	b.n	800511e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cca:	4b61      	ldr	r3, [pc, #388]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0f0      	beq.n	8004cb8 <HAL_RCC_OscConfig+0xe8>
 8004cd6:	e014      	b.n	8004d02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd8:	f7ff f88c 	bl	8003df4 <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ce0:	f7ff f888 	bl	8003df4 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b64      	cmp	r3, #100	; 0x64
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e215      	b.n	800511e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cf2:	4b57      	ldr	r3, [pc, #348]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1f0      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x110>
 8004cfe:	e000      	b.n	8004d02 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d069      	beq.n	8004de2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d0e:	4b50      	ldr	r3, [pc, #320]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 030c 	and.w	r3, r3, #12
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00b      	beq.n	8004d32 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d1a:	4b4d      	ldr	r3, [pc, #308]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 030c 	and.w	r3, r3, #12
 8004d22:	2b08      	cmp	r3, #8
 8004d24:	d11c      	bne.n	8004d60 <HAL_RCC_OscConfig+0x190>
 8004d26:	4b4a      	ldr	r3, [pc, #296]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d116      	bne.n	8004d60 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d32:	4b47      	ldr	r3, [pc, #284]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d005      	beq.n	8004d4a <HAL_RCC_OscConfig+0x17a>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d001      	beq.n	8004d4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e1e9      	b.n	800511e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d4a:	4b41      	ldr	r3, [pc, #260]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	493d      	ldr	r1, [pc, #244]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d5e:	e040      	b.n	8004de2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d023      	beq.n	8004db0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d68:	4b39      	ldr	r3, [pc, #228]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a38      	ldr	r2, [pc, #224]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004d6e:	f043 0301 	orr.w	r3, r3, #1
 8004d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d74:	f7ff f83e 	bl	8003df4 <HAL_GetTick>
 8004d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d7c:	f7ff f83a 	bl	8003df4 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e1c7      	b.n	800511e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d8e:	4b30      	ldr	r3, [pc, #192]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0f0      	beq.n	8004d7c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d9a:	4b2d      	ldr	r3, [pc, #180]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	4929      	ldr	r1, [pc, #164]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	600b      	str	r3, [r1, #0]
 8004dae:	e018      	b.n	8004de2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004db0:	4b27      	ldr	r3, [pc, #156]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a26      	ldr	r2, [pc, #152]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004db6:	f023 0301 	bic.w	r3, r3, #1
 8004dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbc:	f7ff f81a 	bl	8003df4 <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dc4:	f7ff f816 	bl	8003df4 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e1a3      	b.n	800511e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dd6:	4b1e      	ldr	r3, [pc, #120]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1f0      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d038      	beq.n	8004e60 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d019      	beq.n	8004e2a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004df6:	4b16      	ldr	r3, [pc, #88]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dfa:	4a15      	ldr	r2, [pc, #84]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004dfc:	f043 0301 	orr.w	r3, r3, #1
 8004e00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e02:	f7fe fff7 	bl	8003df4 <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e0a:	f7fe fff3 	bl	8003df4 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e180      	b.n	800511e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e1c:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0f0      	beq.n	8004e0a <HAL_RCC_OscConfig+0x23a>
 8004e28:	e01a      	b.n	8004e60 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e2a:	4b09      	ldr	r3, [pc, #36]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e2e:	4a08      	ldr	r2, [pc, #32]	; (8004e50 <HAL_RCC_OscConfig+0x280>)
 8004e30:	f023 0301 	bic.w	r3, r3, #1
 8004e34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e36:	f7fe ffdd 	bl	8003df4 <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e3c:	e00a      	b.n	8004e54 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e3e:	f7fe ffd9 	bl	8003df4 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d903      	bls.n	8004e54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e166      	b.n	800511e <HAL_RCC_OscConfig+0x54e>
 8004e50:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e54:	4b92      	ldr	r3, [pc, #584]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8004e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1ee      	bne.n	8004e3e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 80a4 	beq.w	8004fb6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e6e:	4b8c      	ldr	r3, [pc, #560]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10d      	bne.n	8004e96 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e7a:	4b89      	ldr	r3, [pc, #548]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	4a88      	ldr	r2, [pc, #544]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8004e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e84:	6413      	str	r3, [r2, #64]	; 0x40
 8004e86:	4b86      	ldr	r3, [pc, #536]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e8e:	60bb      	str	r3, [r7, #8]
 8004e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e92:	2301      	movs	r3, #1
 8004e94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e96:	4b83      	ldr	r3, [pc, #524]	; (80050a4 <HAL_RCC_OscConfig+0x4d4>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d118      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004ea2:	4b80      	ldr	r3, [pc, #512]	; (80050a4 <HAL_RCC_OscConfig+0x4d4>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a7f      	ldr	r2, [pc, #508]	; (80050a4 <HAL_RCC_OscConfig+0x4d4>)
 8004ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eae:	f7fe ffa1 	bl	8003df4 <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb6:	f7fe ff9d 	bl	8003df4 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b64      	cmp	r3, #100	; 0x64
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e12a      	b.n	800511e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ec8:	4b76      	ldr	r3, [pc, #472]	; (80050a4 <HAL_RCC_OscConfig+0x4d4>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0f0      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d106      	bne.n	8004eea <HAL_RCC_OscConfig+0x31a>
 8004edc:	4b70      	ldr	r3, [pc, #448]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8004ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee0:	4a6f      	ldr	r2, [pc, #444]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8004ee2:	f043 0301 	orr.w	r3, r3, #1
 8004ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ee8:	e02d      	b.n	8004f46 <HAL_RCC_OscConfig+0x376>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10c      	bne.n	8004f0c <HAL_RCC_OscConfig+0x33c>
 8004ef2:	4b6b      	ldr	r3, [pc, #428]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8004ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef6:	4a6a      	ldr	r2, [pc, #424]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8004ef8:	f023 0301 	bic.w	r3, r3, #1
 8004efc:	6713      	str	r3, [r2, #112]	; 0x70
 8004efe:	4b68      	ldr	r3, [pc, #416]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8004f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f02:	4a67      	ldr	r2, [pc, #412]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8004f04:	f023 0304 	bic.w	r3, r3, #4
 8004f08:	6713      	str	r3, [r2, #112]	; 0x70
 8004f0a:	e01c      	b.n	8004f46 <HAL_RCC_OscConfig+0x376>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	2b05      	cmp	r3, #5
 8004f12:	d10c      	bne.n	8004f2e <HAL_RCC_OscConfig+0x35e>
 8004f14:	4b62      	ldr	r3, [pc, #392]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8004f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f18:	4a61      	ldr	r2, [pc, #388]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8004f1a:	f043 0304 	orr.w	r3, r3, #4
 8004f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f20:	4b5f      	ldr	r3, [pc, #380]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8004f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f24:	4a5e      	ldr	r2, [pc, #376]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8004f26:	f043 0301 	orr.w	r3, r3, #1
 8004f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f2c:	e00b      	b.n	8004f46 <HAL_RCC_OscConfig+0x376>
 8004f2e:	4b5c      	ldr	r3, [pc, #368]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8004f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f32:	4a5b      	ldr	r2, [pc, #364]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8004f34:	f023 0301 	bic.w	r3, r3, #1
 8004f38:	6713      	str	r3, [r2, #112]	; 0x70
 8004f3a:	4b59      	ldr	r3, [pc, #356]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8004f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3e:	4a58      	ldr	r2, [pc, #352]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8004f40:	f023 0304 	bic.w	r3, r3, #4
 8004f44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d015      	beq.n	8004f7a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4e:	f7fe ff51 	bl	8003df4 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f54:	e00a      	b.n	8004f6c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f56:	f7fe ff4d 	bl	8003df4 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e0d8      	b.n	800511e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f6c:	4b4c      	ldr	r3, [pc, #304]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8004f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0ee      	beq.n	8004f56 <HAL_RCC_OscConfig+0x386>
 8004f78:	e014      	b.n	8004fa4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f7a:	f7fe ff3b 	bl	8003df4 <HAL_GetTick>
 8004f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f80:	e00a      	b.n	8004f98 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f82:	f7fe ff37 	bl	8003df4 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d901      	bls.n	8004f98 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e0c2      	b.n	800511e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f98:	4b41      	ldr	r3, [pc, #260]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1ee      	bne.n	8004f82 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fa4:	7dfb      	ldrb	r3, [r7, #23]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d105      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004faa:	4b3d      	ldr	r3, [pc, #244]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	4a3c      	ldr	r2, [pc, #240]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8004fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 80ae 	beq.w	800511c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fc0:	4b37      	ldr	r3, [pc, #220]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f003 030c 	and.w	r3, r3, #12
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d06d      	beq.n	80050a8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d14b      	bne.n	800506c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd4:	4b32      	ldr	r3, [pc, #200]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a31      	ldr	r2, [pc, #196]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8004fda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe0:	f7fe ff08 	bl	8003df4 <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe8:	f7fe ff04 	bl	8003df4 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e091      	b.n	800511e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ffa:	4b29      	ldr	r3, [pc, #164]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1f0      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	69da      	ldr	r2, [r3, #28]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	019b      	lsls	r3, r3, #6
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501c:	085b      	lsrs	r3, r3, #1
 800501e:	3b01      	subs	r3, #1
 8005020:	041b      	lsls	r3, r3, #16
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005028:	061b      	lsls	r3, r3, #24
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005030:	071b      	lsls	r3, r3, #28
 8005032:	491b      	ldr	r1, [pc, #108]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8005034:	4313      	orrs	r3, r2
 8005036:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005038:	4b19      	ldr	r3, [pc, #100]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a18      	ldr	r2, [pc, #96]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 800503e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005044:	f7fe fed6 	bl	8003df4 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800504c:	f7fe fed2 	bl	8003df4 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e05f      	b.n	800511e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800505e:	4b10      	ldr	r3, [pc, #64]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0f0      	beq.n	800504c <HAL_RCC_OscConfig+0x47c>
 800506a:	e057      	b.n	800511c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800506c:	4b0c      	ldr	r3, [pc, #48]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a0b      	ldr	r2, [pc, #44]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8005072:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005078:	f7fe febc 	bl	8003df4 <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005080:	f7fe feb8 	bl	8003df4 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e045      	b.n	800511e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005092:	4b03      	ldr	r3, [pc, #12]	; (80050a0 <HAL_RCC_OscConfig+0x4d0>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1f0      	bne.n	8005080 <HAL_RCC_OscConfig+0x4b0>
 800509e:	e03d      	b.n	800511c <HAL_RCC_OscConfig+0x54c>
 80050a0:	40023800 	.word	0x40023800
 80050a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80050a8:	4b1f      	ldr	r3, [pc, #124]	; (8005128 <HAL_RCC_OscConfig+0x558>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d030      	beq.n	8005118 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d129      	bne.n	8005118 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d122      	bne.n	8005118 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050d8:	4013      	ands	r3, r2
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050de:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d119      	bne.n	8005118 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ee:	085b      	lsrs	r3, r3, #1
 80050f0:	3b01      	subs	r3, #1
 80050f2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d10f      	bne.n	8005118 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005102:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005104:	429a      	cmp	r2, r3
 8005106:	d107      	bne.n	8005118 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005114:	429a      	cmp	r2, r3
 8005116:	d001      	beq.n	800511c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e000      	b.n	800511e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	40023800 	.word	0x40023800

0800512c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005136:	2300      	movs	r3, #0
 8005138:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e0d0      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005144:	4b6a      	ldr	r3, [pc, #424]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 030f 	and.w	r3, r3, #15
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	429a      	cmp	r2, r3
 8005150:	d910      	bls.n	8005174 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005152:	4b67      	ldr	r3, [pc, #412]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f023 020f 	bic.w	r2, r3, #15
 800515a:	4965      	ldr	r1, [pc, #404]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	4313      	orrs	r3, r2
 8005160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005162:	4b63      	ldr	r3, [pc, #396]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d001      	beq.n	8005174 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e0b8      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d020      	beq.n	80051c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	d005      	beq.n	8005198 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800518c:	4b59      	ldr	r3, [pc, #356]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	4a58      	ldr	r2, [pc, #352]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 8005192:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005196:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0308 	and.w	r3, r3, #8
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d005      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051a4:	4b53      	ldr	r3, [pc, #332]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	4a52      	ldr	r2, [pc, #328]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 80051aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051b0:	4b50      	ldr	r3, [pc, #320]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	494d      	ldr	r1, [pc, #308]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d040      	beq.n	8005250 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d107      	bne.n	80051e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051d6:	4b47      	ldr	r3, [pc, #284]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d115      	bne.n	800520e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e07f      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d107      	bne.n	80051fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ee:	4b41      	ldr	r3, [pc, #260]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d109      	bne.n	800520e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e073      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051fe:	4b3d      	ldr	r3, [pc, #244]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e06b      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800520e:	4b39      	ldr	r3, [pc, #228]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f023 0203 	bic.w	r2, r3, #3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	4936      	ldr	r1, [pc, #216]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 800521c:	4313      	orrs	r3, r2
 800521e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005220:	f7fe fde8 	bl	8003df4 <HAL_GetTick>
 8005224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005226:	e00a      	b.n	800523e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005228:	f7fe fde4 	bl	8003df4 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	f241 3288 	movw	r2, #5000	; 0x1388
 8005236:	4293      	cmp	r3, r2
 8005238:	d901      	bls.n	800523e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e053      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800523e:	4b2d      	ldr	r3, [pc, #180]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f003 020c 	and.w	r2, r3, #12
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	429a      	cmp	r2, r3
 800524e:	d1eb      	bne.n	8005228 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005250:	4b27      	ldr	r3, [pc, #156]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 030f 	and.w	r3, r3, #15
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d210      	bcs.n	8005280 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525e:	4b24      	ldr	r3, [pc, #144]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f023 020f 	bic.w	r2, r3, #15
 8005266:	4922      	ldr	r1, [pc, #136]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	4313      	orrs	r3, r2
 800526c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800526e:	4b20      	ldr	r3, [pc, #128]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 030f 	and.w	r3, r3, #15
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	429a      	cmp	r2, r3
 800527a:	d001      	beq.n	8005280 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e032      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	d008      	beq.n	800529e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800528c:	4b19      	ldr	r3, [pc, #100]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	4916      	ldr	r1, [pc, #88]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 800529a:	4313      	orrs	r3, r2
 800529c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0308 	and.w	r3, r3, #8
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d009      	beq.n	80052be <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052aa:	4b12      	ldr	r3, [pc, #72]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	490e      	ldr	r1, [pc, #56]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052be:	f000 f821 	bl	8005304 <HAL_RCC_GetSysClockFreq>
 80052c2:	4602      	mov	r2, r0
 80052c4:	4b0b      	ldr	r3, [pc, #44]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	091b      	lsrs	r3, r3, #4
 80052ca:	f003 030f 	and.w	r3, r3, #15
 80052ce:	490a      	ldr	r1, [pc, #40]	; (80052f8 <HAL_RCC_ClockConfig+0x1cc>)
 80052d0:	5ccb      	ldrb	r3, [r1, r3]
 80052d2:	fa22 f303 	lsr.w	r3, r2, r3
 80052d6:	4a09      	ldr	r2, [pc, #36]	; (80052fc <HAL_RCC_ClockConfig+0x1d0>)
 80052d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80052da:	4b09      	ldr	r3, [pc, #36]	; (8005300 <HAL_RCC_ClockConfig+0x1d4>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fe fd44 	bl	8003d6c <HAL_InitTick>

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	40023c00 	.word	0x40023c00
 80052f4:	40023800 	.word	0x40023800
 80052f8:	08008f5c 	.word	0x08008f5c
 80052fc:	20000000 	.word	0x20000000
 8005300:	20000004 	.word	0x20000004

08005304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005308:	b094      	sub	sp, #80	; 0x50
 800530a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800530c:	2300      	movs	r3, #0
 800530e:	647b      	str	r3, [r7, #68]	; 0x44
 8005310:	2300      	movs	r3, #0
 8005312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005314:	2300      	movs	r3, #0
 8005316:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005318:	2300      	movs	r3, #0
 800531a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800531c:	4b79      	ldr	r3, [pc, #484]	; (8005504 <HAL_RCC_GetSysClockFreq+0x200>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f003 030c 	and.w	r3, r3, #12
 8005324:	2b08      	cmp	r3, #8
 8005326:	d00d      	beq.n	8005344 <HAL_RCC_GetSysClockFreq+0x40>
 8005328:	2b08      	cmp	r3, #8
 800532a:	f200 80e1 	bhi.w	80054f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800532e:	2b00      	cmp	r3, #0
 8005330:	d002      	beq.n	8005338 <HAL_RCC_GetSysClockFreq+0x34>
 8005332:	2b04      	cmp	r3, #4
 8005334:	d003      	beq.n	800533e <HAL_RCC_GetSysClockFreq+0x3a>
 8005336:	e0db      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005338:	4b73      	ldr	r3, [pc, #460]	; (8005508 <HAL_RCC_GetSysClockFreq+0x204>)
 800533a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800533c:	e0db      	b.n	80054f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800533e:	4b72      	ldr	r3, [pc, #456]	; (8005508 <HAL_RCC_GetSysClockFreq+0x204>)
 8005340:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005342:	e0d8      	b.n	80054f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005344:	4b6f      	ldr	r3, [pc, #444]	; (8005504 <HAL_RCC_GetSysClockFreq+0x200>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800534c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800534e:	4b6d      	ldr	r3, [pc, #436]	; (8005504 <HAL_RCC_GetSysClockFreq+0x200>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d063      	beq.n	8005422 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800535a:	4b6a      	ldr	r3, [pc, #424]	; (8005504 <HAL_RCC_GetSysClockFreq+0x200>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	099b      	lsrs	r3, r3, #6
 8005360:	2200      	movs	r2, #0
 8005362:	63bb      	str	r3, [r7, #56]	; 0x38
 8005364:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800536c:	633b      	str	r3, [r7, #48]	; 0x30
 800536e:	2300      	movs	r3, #0
 8005370:	637b      	str	r3, [r7, #52]	; 0x34
 8005372:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005376:	4622      	mov	r2, r4
 8005378:	462b      	mov	r3, r5
 800537a:	f04f 0000 	mov.w	r0, #0
 800537e:	f04f 0100 	mov.w	r1, #0
 8005382:	0159      	lsls	r1, r3, #5
 8005384:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005388:	0150      	lsls	r0, r2, #5
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	4621      	mov	r1, r4
 8005390:	1a51      	subs	r1, r2, r1
 8005392:	6139      	str	r1, [r7, #16]
 8005394:	4629      	mov	r1, r5
 8005396:	eb63 0301 	sbc.w	r3, r3, r1
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053a8:	4659      	mov	r1, fp
 80053aa:	018b      	lsls	r3, r1, #6
 80053ac:	4651      	mov	r1, sl
 80053ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053b2:	4651      	mov	r1, sl
 80053b4:	018a      	lsls	r2, r1, #6
 80053b6:	4651      	mov	r1, sl
 80053b8:	ebb2 0801 	subs.w	r8, r2, r1
 80053bc:	4659      	mov	r1, fp
 80053be:	eb63 0901 	sbc.w	r9, r3, r1
 80053c2:	f04f 0200 	mov.w	r2, #0
 80053c6:	f04f 0300 	mov.w	r3, #0
 80053ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053d6:	4690      	mov	r8, r2
 80053d8:	4699      	mov	r9, r3
 80053da:	4623      	mov	r3, r4
 80053dc:	eb18 0303 	adds.w	r3, r8, r3
 80053e0:	60bb      	str	r3, [r7, #8]
 80053e2:	462b      	mov	r3, r5
 80053e4:	eb49 0303 	adc.w	r3, r9, r3
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	f04f 0200 	mov.w	r2, #0
 80053ee:	f04f 0300 	mov.w	r3, #0
 80053f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053f6:	4629      	mov	r1, r5
 80053f8:	028b      	lsls	r3, r1, #10
 80053fa:	4621      	mov	r1, r4
 80053fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005400:	4621      	mov	r1, r4
 8005402:	028a      	lsls	r2, r1, #10
 8005404:	4610      	mov	r0, r2
 8005406:	4619      	mov	r1, r3
 8005408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800540a:	2200      	movs	r2, #0
 800540c:	62bb      	str	r3, [r7, #40]	; 0x28
 800540e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005410:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005414:	f7fa ff18 	bl	8000248 <__aeabi_uldivmod>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	4613      	mov	r3, r2
 800541e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005420:	e058      	b.n	80054d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005422:	4b38      	ldr	r3, [pc, #224]	; (8005504 <HAL_RCC_GetSysClockFreq+0x200>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	099b      	lsrs	r3, r3, #6
 8005428:	2200      	movs	r2, #0
 800542a:	4618      	mov	r0, r3
 800542c:	4611      	mov	r1, r2
 800542e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005432:	623b      	str	r3, [r7, #32]
 8005434:	2300      	movs	r3, #0
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
 8005438:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800543c:	4642      	mov	r2, r8
 800543e:	464b      	mov	r3, r9
 8005440:	f04f 0000 	mov.w	r0, #0
 8005444:	f04f 0100 	mov.w	r1, #0
 8005448:	0159      	lsls	r1, r3, #5
 800544a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800544e:	0150      	lsls	r0, r2, #5
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	4641      	mov	r1, r8
 8005456:	ebb2 0a01 	subs.w	sl, r2, r1
 800545a:	4649      	mov	r1, r9
 800545c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	f04f 0300 	mov.w	r3, #0
 8005468:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800546c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005470:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005474:	ebb2 040a 	subs.w	r4, r2, sl
 8005478:	eb63 050b 	sbc.w	r5, r3, fp
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	f04f 0300 	mov.w	r3, #0
 8005484:	00eb      	lsls	r3, r5, #3
 8005486:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800548a:	00e2      	lsls	r2, r4, #3
 800548c:	4614      	mov	r4, r2
 800548e:	461d      	mov	r5, r3
 8005490:	4643      	mov	r3, r8
 8005492:	18e3      	adds	r3, r4, r3
 8005494:	603b      	str	r3, [r7, #0]
 8005496:	464b      	mov	r3, r9
 8005498:	eb45 0303 	adc.w	r3, r5, r3
 800549c:	607b      	str	r3, [r7, #4]
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	f04f 0300 	mov.w	r3, #0
 80054a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054aa:	4629      	mov	r1, r5
 80054ac:	028b      	lsls	r3, r1, #10
 80054ae:	4621      	mov	r1, r4
 80054b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054b4:	4621      	mov	r1, r4
 80054b6:	028a      	lsls	r2, r1, #10
 80054b8:	4610      	mov	r0, r2
 80054ba:	4619      	mov	r1, r3
 80054bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054be:	2200      	movs	r2, #0
 80054c0:	61bb      	str	r3, [r7, #24]
 80054c2:	61fa      	str	r2, [r7, #28]
 80054c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054c8:	f7fa febe 	bl	8000248 <__aeabi_uldivmod>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4613      	mov	r3, r2
 80054d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80054d4:	4b0b      	ldr	r3, [pc, #44]	; (8005504 <HAL_RCC_GetSysClockFreq+0x200>)
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	0c1b      	lsrs	r3, r3, #16
 80054da:	f003 0303 	and.w	r3, r3, #3
 80054de:	3301      	adds	r3, #1
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80054e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054ee:	e002      	b.n	80054f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054f0:	4b05      	ldr	r3, [pc, #20]	; (8005508 <HAL_RCC_GetSysClockFreq+0x204>)
 80054f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3750      	adds	r7, #80	; 0x50
 80054fc:	46bd      	mov	sp, r7
 80054fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005502:	bf00      	nop
 8005504:	40023800 	.word	0x40023800
 8005508:	00f42400 	.word	0x00f42400

0800550c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005510:	4b03      	ldr	r3, [pc, #12]	; (8005520 <HAL_RCC_GetHCLKFreq+0x14>)
 8005512:	681b      	ldr	r3, [r3, #0]
}
 8005514:	4618      	mov	r0, r3
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	20000000 	.word	0x20000000

08005524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005528:	f7ff fff0 	bl	800550c <HAL_RCC_GetHCLKFreq>
 800552c:	4602      	mov	r2, r0
 800552e:	4b05      	ldr	r3, [pc, #20]	; (8005544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	0a9b      	lsrs	r3, r3, #10
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	4903      	ldr	r1, [pc, #12]	; (8005548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800553a:	5ccb      	ldrb	r3, [r1, r3]
 800553c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005540:	4618      	mov	r0, r3
 8005542:	bd80      	pop	{r7, pc}
 8005544:	40023800 	.word	0x40023800
 8005548:	08008f6c 	.word	0x08008f6c

0800554c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005550:	f7ff ffdc 	bl	800550c <HAL_RCC_GetHCLKFreq>
 8005554:	4602      	mov	r2, r0
 8005556:	4b05      	ldr	r3, [pc, #20]	; (800556c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	0b5b      	lsrs	r3, r3, #13
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	4903      	ldr	r1, [pc, #12]	; (8005570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005562:	5ccb      	ldrb	r3, [r1, r3]
 8005564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005568:	4618      	mov	r0, r3
 800556a:	bd80      	pop	{r7, pc}
 800556c:	40023800 	.word	0x40023800
 8005570:	08008f6c 	.word	0x08008f6c

08005574 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800557c:	2300      	movs	r3, #0
 800557e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005580:	2300      	movs	r3, #0
 8005582:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005588:	2300      	movs	r3, #0
 800558a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800558c:	2300      	movs	r3, #0
 800558e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b00      	cmp	r3, #0
 800559a:	d012      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800559c:	4b69      	ldr	r3, [pc, #420]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	4a68      	ldr	r2, [pc, #416]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80055a6:	6093      	str	r3, [r2, #8]
 80055a8:	4b66      	ldr	r3, [pc, #408]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b0:	4964      	ldr	r1, [pc, #400]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80055be:	2301      	movs	r3, #1
 80055c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d017      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055ce:	4b5d      	ldr	r3, [pc, #372]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055dc:	4959      	ldr	r1, [pc, #356]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055ec:	d101      	bne.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80055ee:	2301      	movs	r3, #1
 80055f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80055fa:	2301      	movs	r3, #1
 80055fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d017      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800560a:	4b4e      	ldr	r3, [pc, #312]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800560c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005610:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005618:	494a      	ldr	r1, [pc, #296]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800561a:	4313      	orrs	r3, r2
 800561c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005624:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005628:	d101      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800562a:	2301      	movs	r3, #1
 800562c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005636:	2301      	movs	r3, #1
 8005638:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005646:	2301      	movs	r3, #1
 8005648:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 808b 	beq.w	800576e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005658:	4b3a      	ldr	r3, [pc, #232]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800565a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565c:	4a39      	ldr	r2, [pc, #228]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800565e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005662:	6413      	str	r3, [r2, #64]	; 0x40
 8005664:	4b37      	ldr	r3, [pc, #220]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800566c:	60bb      	str	r3, [r7, #8]
 800566e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005670:	4b35      	ldr	r3, [pc, #212]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a34      	ldr	r2, [pc, #208]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800567a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800567c:	f7fe fbba 	bl	8003df4 <HAL_GetTick>
 8005680:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005682:	e008      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005684:	f7fe fbb6 	bl	8003df4 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b64      	cmp	r3, #100	; 0x64
 8005690:	d901      	bls.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e38f      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005696:	4b2c      	ldr	r3, [pc, #176]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d0f0      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056a2:	4b28      	ldr	r3, [pc, #160]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056aa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d035      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d02e      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056c0:	4b20      	ldr	r3, [pc, #128]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056c8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056ca:	4b1e      	ldr	r3, [pc, #120]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ce:	4a1d      	ldr	r2, [pc, #116]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056d6:	4b1b      	ldr	r3, [pc, #108]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056da:	4a1a      	ldr	r2, [pc, #104]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80056e2:	4a18      	ldr	r2, [pc, #96]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056e8:	4b16      	ldr	r3, [pc, #88]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d114      	bne.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f4:	f7fe fb7e 	bl	8003df4 <HAL_GetTick>
 80056f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056fa:	e00a      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056fc:	f7fe fb7a 	bl	8003df4 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	f241 3288 	movw	r2, #5000	; 0x1388
 800570a:	4293      	cmp	r3, r2
 800570c:	d901      	bls.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e351      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005712:	4b0c      	ldr	r3, [pc, #48]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0ee      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005726:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800572a:	d111      	bne.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800572c:	4b05      	ldr	r3, [pc, #20]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005738:	4b04      	ldr	r3, [pc, #16]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800573a:	400b      	ands	r3, r1
 800573c:	4901      	ldr	r1, [pc, #4]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800573e:	4313      	orrs	r3, r2
 8005740:	608b      	str	r3, [r1, #8]
 8005742:	e00b      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005744:	40023800 	.word	0x40023800
 8005748:	40007000 	.word	0x40007000
 800574c:	0ffffcff 	.word	0x0ffffcff
 8005750:	4bac      	ldr	r3, [pc, #688]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	4aab      	ldr	r2, [pc, #684]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005756:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800575a:	6093      	str	r3, [r2, #8]
 800575c:	4ba9      	ldr	r3, [pc, #676]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800575e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005768:	49a6      	ldr	r1, [pc, #664]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800576a:	4313      	orrs	r3, r2
 800576c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0310 	and.w	r3, r3, #16
 8005776:	2b00      	cmp	r3, #0
 8005778:	d010      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800577a:	4ba2      	ldr	r3, [pc, #648]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800577c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005780:	4aa0      	ldr	r2, [pc, #640]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005782:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005786:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800578a:	4b9e      	ldr	r3, [pc, #632]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800578c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	499b      	ldr	r1, [pc, #620]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005796:	4313      	orrs	r3, r2
 8005798:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00a      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057a8:	4b96      	ldr	r3, [pc, #600]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057b6:	4993      	ldr	r1, [pc, #588]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057ca:	4b8e      	ldr	r3, [pc, #568]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057d8:	498a      	ldr	r1, [pc, #552]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057ec:	4b85      	ldr	r3, [pc, #532]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057fa:	4982      	ldr	r1, [pc, #520]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800580e:	4b7d      	ldr	r3, [pc, #500]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005814:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581c:	4979      	ldr	r1, [pc, #484]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800581e:	4313      	orrs	r3, r2
 8005820:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00a      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005830:	4b74      	ldr	r3, [pc, #464]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005836:	f023 0203 	bic.w	r2, r3, #3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800583e:	4971      	ldr	r1, [pc, #452]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005840:	4313      	orrs	r3, r2
 8005842:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005852:	4b6c      	ldr	r3, [pc, #432]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005858:	f023 020c 	bic.w	r2, r3, #12
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005860:	4968      	ldr	r1, [pc, #416]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005862:	4313      	orrs	r3, r2
 8005864:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00a      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005874:	4b63      	ldr	r3, [pc, #396]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005882:	4960      	ldr	r1, [pc, #384]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005884:	4313      	orrs	r3, r2
 8005886:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005896:	4b5b      	ldr	r3, [pc, #364]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a4:	4957      	ldr	r1, [pc, #348]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00a      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058b8:	4b52      	ldr	r3, [pc, #328]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c6:	494f      	ldr	r1, [pc, #316]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80058da:	4b4a      	ldr	r3, [pc, #296]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e8:	4946      	ldr	r1, [pc, #280]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80058fc:	4b41      	ldr	r3, [pc, #260]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005902:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800590a:	493e      	ldr	r1, [pc, #248]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800590c:	4313      	orrs	r3, r2
 800590e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800591e:	4b39      	ldr	r3, [pc, #228]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005924:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800592c:	4935      	ldr	r1, [pc, #212]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800592e:	4313      	orrs	r3, r2
 8005930:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00a      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005940:	4b30      	ldr	r3, [pc, #192]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005946:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800594e:	492d      	ldr	r1, [pc, #180]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005950:	4313      	orrs	r3, r2
 8005952:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d011      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005962:	4b28      	ldr	r3, [pc, #160]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005968:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005970:	4924      	ldr	r1, [pc, #144]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005972:	4313      	orrs	r3, r2
 8005974:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800597c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005980:	d101      	bne.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005982:	2301      	movs	r3, #1
 8005984:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0308 	and.w	r3, r3, #8
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005992:	2301      	movs	r3, #1
 8005994:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00a      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059a2:	4b18      	ldr	r3, [pc, #96]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059b0:	4914      	ldr	r1, [pc, #80]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00b      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059c4:	4b0f      	ldr	r3, [pc, #60]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059d4:	490b      	ldr	r1, [pc, #44]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00f      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80059e8:	4b06      	ldr	r3, [pc, #24]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059f8:	4902      	ldr	r1, [pc, #8]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005a00:	e002      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005a02:	bf00      	nop
 8005a04:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00b      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a14:	4b8a      	ldr	r3, [pc, #552]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a1a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a24:	4986      	ldr	r1, [pc, #536]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00b      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005a38:	4b81      	ldr	r3, [pc, #516]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a3e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a48:	497d      	ldr	r1, [pc, #500]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d006      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 80d6 	beq.w	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a64:	4b76      	ldr	r3, [pc, #472]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a75      	ldr	r2, [pc, #468]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a70:	f7fe f9c0 	bl	8003df4 <HAL_GetTick>
 8005a74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a76:	e008      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a78:	f7fe f9bc 	bl	8003df4 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b64      	cmp	r3, #100	; 0x64
 8005a84:	d901      	bls.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e195      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a8a:	4b6d      	ldr	r3, [pc, #436]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1f0      	bne.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d021      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d11d      	bne.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005aaa:	4b65      	ldr	r3, [pc, #404]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ab0:	0c1b      	lsrs	r3, r3, #16
 8005ab2:	f003 0303 	and.w	r3, r3, #3
 8005ab6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005ab8:	4b61      	ldr	r3, [pc, #388]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005abe:	0e1b      	lsrs	r3, r3, #24
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	019a      	lsls	r2, r3, #6
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	041b      	lsls	r3, r3, #16
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	061b      	lsls	r3, r3, #24
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	071b      	lsls	r3, r3, #28
 8005ade:	4958      	ldr	r1, [pc, #352]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d004      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005afa:	d00a      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d02e      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b10:	d129      	bne.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b12:	4b4b      	ldr	r3, [pc, #300]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b18:	0c1b      	lsrs	r3, r3, #16
 8005b1a:	f003 0303 	and.w	r3, r3, #3
 8005b1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b20:	4b47      	ldr	r3, [pc, #284]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b26:	0f1b      	lsrs	r3, r3, #28
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	019a      	lsls	r2, r3, #6
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	041b      	lsls	r3, r3, #16
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	061b      	lsls	r3, r3, #24
 8005b40:	431a      	orrs	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	071b      	lsls	r3, r3, #28
 8005b46:	493e      	ldr	r1, [pc, #248]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b4e:	4b3c      	ldr	r3, [pc, #240]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b54:	f023 021f 	bic.w	r2, r3, #31
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	4938      	ldr	r1, [pc, #224]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d01d      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b72:	4b33      	ldr	r3, [pc, #204]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b78:	0e1b      	lsrs	r3, r3, #24
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b80:	4b2f      	ldr	r3, [pc, #188]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b86:	0f1b      	lsrs	r3, r3, #28
 8005b88:	f003 0307 	and.w	r3, r3, #7
 8005b8c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	019a      	lsls	r2, r3, #6
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	041b      	lsls	r3, r3, #16
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	061b      	lsls	r3, r3, #24
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	071b      	lsls	r3, r3, #28
 8005ba6:	4926      	ldr	r1, [pc, #152]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d011      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	019a      	lsls	r2, r3, #6
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	041b      	lsls	r3, r3, #16
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	061b      	lsls	r3, r3, #24
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	071b      	lsls	r3, r3, #28
 8005bd6:	491a      	ldr	r1, [pc, #104]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005bde:	4b18      	ldr	r3, [pc, #96]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a17      	ldr	r2, [pc, #92]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005be4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005be8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bea:	f7fe f903 	bl	8003df4 <HAL_GetTick>
 8005bee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bf0:	e008      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005bf2:	f7fe f8ff 	bl	8003df4 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	2b64      	cmp	r3, #100	; 0x64
 8005bfe:	d901      	bls.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e0d8      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c04:	4b0e      	ldr	r3, [pc, #56]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0f0      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	f040 80ce 	bne.w	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005c18:	4b09      	ldr	r3, [pc, #36]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a08      	ldr	r2, [pc, #32]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c24:	f7fe f8e6 	bl	8003df4 <HAL_GetTick>
 8005c28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c2a:	e00b      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c2c:	f7fe f8e2 	bl	8003df4 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b64      	cmp	r3, #100	; 0x64
 8005c38:	d904      	bls.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e0bb      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005c3e:	bf00      	nop
 8005c40:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c44:	4b5e      	ldr	r3, [pc, #376]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c50:	d0ec      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d009      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d02e      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d12a      	bne.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005c7a:	4b51      	ldr	r3, [pc, #324]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c80:	0c1b      	lsrs	r3, r3, #16
 8005c82:	f003 0303 	and.w	r3, r3, #3
 8005c86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c88:	4b4d      	ldr	r3, [pc, #308]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8e:	0f1b      	lsrs	r3, r3, #28
 8005c90:	f003 0307 	and.w	r3, r3, #7
 8005c94:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	019a      	lsls	r2, r3, #6
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	041b      	lsls	r3, r3, #16
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	061b      	lsls	r3, r3, #24
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	071b      	lsls	r3, r3, #28
 8005cae:	4944      	ldr	r1, [pc, #272]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005cb6:	4b42      	ldr	r3, [pc, #264]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cbc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	021b      	lsls	r3, r3, #8
 8005cc8:	493d      	ldr	r1, [pc, #244]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d022      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ce0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ce4:	d11d      	bne.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ce6:	4b36      	ldr	r3, [pc, #216]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cec:	0e1b      	lsrs	r3, r3, #24
 8005cee:	f003 030f 	and.w	r3, r3, #15
 8005cf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005cf4:	4b32      	ldr	r3, [pc, #200]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cfa:	0f1b      	lsrs	r3, r3, #28
 8005cfc:	f003 0307 	and.w	r3, r3, #7
 8005d00:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	019a      	lsls	r2, r3, #6
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	041b      	lsls	r3, r3, #16
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	061b      	lsls	r3, r3, #24
 8005d14:	431a      	orrs	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	071b      	lsls	r3, r3, #28
 8005d1a:	4929      	ldr	r1, [pc, #164]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0308 	and.w	r3, r3, #8
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d028      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d2e:	4b24      	ldr	r3, [pc, #144]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d34:	0e1b      	lsrs	r3, r3, #24
 8005d36:	f003 030f 	and.w	r3, r3, #15
 8005d3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005d3c:	4b20      	ldr	r3, [pc, #128]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d42:	0c1b      	lsrs	r3, r3, #16
 8005d44:	f003 0303 	and.w	r3, r3, #3
 8005d48:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	019a      	lsls	r2, r3, #6
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	041b      	lsls	r3, r3, #16
 8005d54:	431a      	orrs	r2, r3
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	061b      	lsls	r3, r3, #24
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	071b      	lsls	r3, r3, #28
 8005d62:	4917      	ldr	r1, [pc, #92]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d6a:	4b15      	ldr	r3, [pc, #84]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d78:	4911      	ldr	r1, [pc, #68]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d80:	4b0f      	ldr	r3, [pc, #60]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a0e      	ldr	r2, [pc, #56]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d8c:	f7fe f832 	bl	8003df4 <HAL_GetTick>
 8005d90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d92:	e008      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d94:	f7fe f82e 	bl	8003df4 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	2b64      	cmp	r3, #100	; 0x64
 8005da0:	d901      	bls.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e007      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005da6:	4b06      	ldr	r3, [pc, #24]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005db2:	d1ef      	bne.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3720      	adds	r7, #32
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	40023800 	.word	0x40023800

08005dc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e049      	b.n	8005e6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d106      	bne.n	8005df0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fd fcb8 	bl	8003760 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3304      	adds	r3, #4
 8005e00:	4619      	mov	r1, r3
 8005e02:	4610      	mov	r0, r2
 8005e04:	f000 fcc0 	bl	8006788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b082      	sub	sp, #8
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e049      	b.n	8005f18 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d106      	bne.n	8005e9e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f841 	bl	8005f20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2202      	movs	r2, #2
 8005ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	3304      	adds	r3, #4
 8005eae:	4619      	mov	r1, r3
 8005eb0:	4610      	mov	r0, r2
 8005eb2:	f000 fc69 	bl	8006788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d109      	bne.n	8005f58 <HAL_TIM_PWM_Start+0x24>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	bf14      	ite	ne
 8005f50:	2301      	movne	r3, #1
 8005f52:	2300      	moveq	r3, #0
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	e03c      	b.n	8005fd2 <HAL_TIM_PWM_Start+0x9e>
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	2b04      	cmp	r3, #4
 8005f5c:	d109      	bne.n	8005f72 <HAL_TIM_PWM_Start+0x3e>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	bf14      	ite	ne
 8005f6a:	2301      	movne	r3, #1
 8005f6c:	2300      	moveq	r3, #0
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	e02f      	b.n	8005fd2 <HAL_TIM_PWM_Start+0x9e>
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2b08      	cmp	r3, #8
 8005f76:	d109      	bne.n	8005f8c <HAL_TIM_PWM_Start+0x58>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	bf14      	ite	ne
 8005f84:	2301      	movne	r3, #1
 8005f86:	2300      	moveq	r3, #0
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	e022      	b.n	8005fd2 <HAL_TIM_PWM_Start+0x9e>
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	2b0c      	cmp	r3, #12
 8005f90:	d109      	bne.n	8005fa6 <HAL_TIM_PWM_Start+0x72>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	bf14      	ite	ne
 8005f9e:	2301      	movne	r3, #1
 8005fa0:	2300      	moveq	r3, #0
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	e015      	b.n	8005fd2 <HAL_TIM_PWM_Start+0x9e>
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b10      	cmp	r3, #16
 8005faa:	d109      	bne.n	8005fc0 <HAL_TIM_PWM_Start+0x8c>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	bf14      	ite	ne
 8005fb8:	2301      	movne	r3, #1
 8005fba:	2300      	moveq	r3, #0
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	e008      	b.n	8005fd2 <HAL_TIM_PWM_Start+0x9e>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	bf14      	ite	ne
 8005fcc:	2301      	movne	r3, #1
 8005fce:	2300      	moveq	r3, #0
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e092      	b.n	8006100 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d104      	bne.n	8005fea <HAL_TIM_PWM_Start+0xb6>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fe8:	e023      	b.n	8006032 <HAL_TIM_PWM_Start+0xfe>
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	2b04      	cmp	r3, #4
 8005fee:	d104      	bne.n	8005ffa <HAL_TIM_PWM_Start+0xc6>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ff8:	e01b      	b.n	8006032 <HAL_TIM_PWM_Start+0xfe>
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d104      	bne.n	800600a <HAL_TIM_PWM_Start+0xd6>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006008:	e013      	b.n	8006032 <HAL_TIM_PWM_Start+0xfe>
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b0c      	cmp	r3, #12
 800600e:	d104      	bne.n	800601a <HAL_TIM_PWM_Start+0xe6>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006018:	e00b      	b.n	8006032 <HAL_TIM_PWM_Start+0xfe>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	2b10      	cmp	r3, #16
 800601e:	d104      	bne.n	800602a <HAL_TIM_PWM_Start+0xf6>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006028:	e003      	b.n	8006032 <HAL_TIM_PWM_Start+0xfe>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2202      	movs	r2, #2
 800602e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2201      	movs	r2, #1
 8006038:	6839      	ldr	r1, [r7, #0]
 800603a:	4618      	mov	r0, r3
 800603c:	f000 ff3c 	bl	8006eb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a30      	ldr	r2, [pc, #192]	; (8006108 <HAL_TIM_PWM_Start+0x1d4>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d004      	beq.n	8006054 <HAL_TIM_PWM_Start+0x120>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a2f      	ldr	r2, [pc, #188]	; (800610c <HAL_TIM_PWM_Start+0x1d8>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d101      	bne.n	8006058 <HAL_TIM_PWM_Start+0x124>
 8006054:	2301      	movs	r3, #1
 8006056:	e000      	b.n	800605a <HAL_TIM_PWM_Start+0x126>
 8006058:	2300      	movs	r3, #0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d007      	beq.n	800606e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800606c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a25      	ldr	r2, [pc, #148]	; (8006108 <HAL_TIM_PWM_Start+0x1d4>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d022      	beq.n	80060be <HAL_TIM_PWM_Start+0x18a>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006080:	d01d      	beq.n	80060be <HAL_TIM_PWM_Start+0x18a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a22      	ldr	r2, [pc, #136]	; (8006110 <HAL_TIM_PWM_Start+0x1dc>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d018      	beq.n	80060be <HAL_TIM_PWM_Start+0x18a>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a20      	ldr	r2, [pc, #128]	; (8006114 <HAL_TIM_PWM_Start+0x1e0>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d013      	beq.n	80060be <HAL_TIM_PWM_Start+0x18a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a1f      	ldr	r2, [pc, #124]	; (8006118 <HAL_TIM_PWM_Start+0x1e4>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d00e      	beq.n	80060be <HAL_TIM_PWM_Start+0x18a>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a19      	ldr	r2, [pc, #100]	; (800610c <HAL_TIM_PWM_Start+0x1d8>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d009      	beq.n	80060be <HAL_TIM_PWM_Start+0x18a>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a1b      	ldr	r2, [pc, #108]	; (800611c <HAL_TIM_PWM_Start+0x1e8>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d004      	beq.n	80060be <HAL_TIM_PWM_Start+0x18a>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a19      	ldr	r2, [pc, #100]	; (8006120 <HAL_TIM_PWM_Start+0x1ec>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d115      	bne.n	80060ea <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	4b17      	ldr	r3, [pc, #92]	; (8006124 <HAL_TIM_PWM_Start+0x1f0>)
 80060c6:	4013      	ands	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2b06      	cmp	r3, #6
 80060ce:	d015      	beq.n	80060fc <HAL_TIM_PWM_Start+0x1c8>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060d6:	d011      	beq.n	80060fc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f042 0201 	orr.w	r2, r2, #1
 80060e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e8:	e008      	b.n	80060fc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f042 0201 	orr.w	r2, r2, #1
 80060f8:	601a      	str	r2, [r3, #0]
 80060fa:	e000      	b.n	80060fe <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	40010000 	.word	0x40010000
 800610c:	40010400 	.word	0x40010400
 8006110:	40000400 	.word	0x40000400
 8006114:	40000800 	.word	0x40000800
 8006118:	40000c00 	.word	0x40000c00
 800611c:	40014000 	.word	0x40014000
 8006120:	40001800 	.word	0x40001800
 8006124:	00010007 	.word	0x00010007

08006128 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b02      	cmp	r3, #2
 800613c:	d122      	bne.n	8006184 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f003 0302 	and.w	r3, r3, #2
 8006148:	2b02      	cmp	r3, #2
 800614a:	d11b      	bne.n	8006184 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f06f 0202 	mvn.w	r2, #2
 8006154:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	f003 0303 	and.w	r3, r3, #3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d003      	beq.n	8006172 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 faee 	bl	800674c <HAL_TIM_IC_CaptureCallback>
 8006170:	e005      	b.n	800617e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fae0 	bl	8006738 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 faf1 	bl	8006760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	f003 0304 	and.w	r3, r3, #4
 800618e:	2b04      	cmp	r3, #4
 8006190:	d122      	bne.n	80061d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	f003 0304 	and.w	r3, r3, #4
 800619c:	2b04      	cmp	r3, #4
 800619e:	d11b      	bne.n	80061d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f06f 0204 	mvn.w	r2, #4
 80061a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2202      	movs	r2, #2
 80061ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fac4 	bl	800674c <HAL_TIM_IC_CaptureCallback>
 80061c4:	e005      	b.n	80061d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fab6 	bl	8006738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fac7 	bl	8006760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	f003 0308 	and.w	r3, r3, #8
 80061e2:	2b08      	cmp	r3, #8
 80061e4:	d122      	bne.n	800622c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f003 0308 	and.w	r3, r3, #8
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d11b      	bne.n	800622c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f06f 0208 	mvn.w	r2, #8
 80061fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2204      	movs	r2, #4
 8006202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	f003 0303 	and.w	r3, r3, #3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fa9a 	bl	800674c <HAL_TIM_IC_CaptureCallback>
 8006218:	e005      	b.n	8006226 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fa8c 	bl	8006738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fa9d 	bl	8006760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	f003 0310 	and.w	r3, r3, #16
 8006236:	2b10      	cmp	r3, #16
 8006238:	d122      	bne.n	8006280 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f003 0310 	and.w	r3, r3, #16
 8006244:	2b10      	cmp	r3, #16
 8006246:	d11b      	bne.n	8006280 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f06f 0210 	mvn.w	r2, #16
 8006250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2208      	movs	r2, #8
 8006256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fa70 	bl	800674c <HAL_TIM_IC_CaptureCallback>
 800626c:	e005      	b.n	800627a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fa62 	bl	8006738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 fa73 	bl	8006760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b01      	cmp	r3, #1
 800628c:	d10e      	bne.n	80062ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	2b01      	cmp	r3, #1
 800629a:	d107      	bne.n	80062ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f06f 0201 	mvn.w	r2, #1
 80062a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fa3c 	bl	8006724 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b6:	2b80      	cmp	r3, #128	; 0x80
 80062b8:	d10e      	bne.n	80062d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c4:	2b80      	cmp	r3, #128	; 0x80
 80062c6:	d107      	bne.n	80062d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 feae 	bl	8007034 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062e6:	d10e      	bne.n	8006306 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f2:	2b80      	cmp	r3, #128	; 0x80
 80062f4:	d107      	bne.n	8006306 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 fea1 	bl	8007048 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006310:	2b40      	cmp	r3, #64	; 0x40
 8006312:	d10e      	bne.n	8006332 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631e:	2b40      	cmp	r3, #64	; 0x40
 8006320:	d107      	bne.n	8006332 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800632a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fa21 	bl	8006774 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	f003 0320 	and.w	r3, r3, #32
 800633c:	2b20      	cmp	r3, #32
 800633e:	d10e      	bne.n	800635e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f003 0320 	and.w	r3, r3, #32
 800634a:	2b20      	cmp	r3, #32
 800634c:	d107      	bne.n	800635e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f06f 0220 	mvn.w	r2, #32
 8006356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 fe61 	bl	8007020 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800635e:	bf00      	nop
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
	...

08006368 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006374:	2300      	movs	r3, #0
 8006376:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800637e:	2b01      	cmp	r3, #1
 8006380:	d101      	bne.n	8006386 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006382:	2302      	movs	r3, #2
 8006384:	e0ff      	b.n	8006586 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b14      	cmp	r3, #20
 8006392:	f200 80f0 	bhi.w	8006576 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006396:	a201      	add	r2, pc, #4	; (adr r2, 800639c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639c:	080063f1 	.word	0x080063f1
 80063a0:	08006577 	.word	0x08006577
 80063a4:	08006577 	.word	0x08006577
 80063a8:	08006577 	.word	0x08006577
 80063ac:	08006431 	.word	0x08006431
 80063b0:	08006577 	.word	0x08006577
 80063b4:	08006577 	.word	0x08006577
 80063b8:	08006577 	.word	0x08006577
 80063bc:	08006473 	.word	0x08006473
 80063c0:	08006577 	.word	0x08006577
 80063c4:	08006577 	.word	0x08006577
 80063c8:	08006577 	.word	0x08006577
 80063cc:	080064b3 	.word	0x080064b3
 80063d0:	08006577 	.word	0x08006577
 80063d4:	08006577 	.word	0x08006577
 80063d8:	08006577 	.word	0x08006577
 80063dc:	080064f5 	.word	0x080064f5
 80063e0:	08006577 	.word	0x08006577
 80063e4:	08006577 	.word	0x08006577
 80063e8:	08006577 	.word	0x08006577
 80063ec:	08006535 	.word	0x08006535
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68b9      	ldr	r1, [r7, #8]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 fa66 	bl	80068c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	699a      	ldr	r2, [r3, #24]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f042 0208 	orr.w	r2, r2, #8
 800640a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	699a      	ldr	r2, [r3, #24]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f022 0204 	bic.w	r2, r2, #4
 800641a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6999      	ldr	r1, [r3, #24]
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	691a      	ldr	r2, [r3, #16]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	619a      	str	r2, [r3, #24]
      break;
 800642e:	e0a5      	b.n	800657c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68b9      	ldr	r1, [r7, #8]
 8006436:	4618      	mov	r0, r3
 8006438:	f000 fab8 	bl	80069ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	699a      	ldr	r2, [r3, #24]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800644a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	699a      	ldr	r2, [r3, #24]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800645a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6999      	ldr	r1, [r3, #24]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	021a      	lsls	r2, r3, #8
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	430a      	orrs	r2, r1
 800646e:	619a      	str	r2, [r3, #24]
      break;
 8006470:	e084      	b.n	800657c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68b9      	ldr	r1, [r7, #8]
 8006478:	4618      	mov	r0, r3
 800647a:	f000 fb0f 	bl	8006a9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69da      	ldr	r2, [r3, #28]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f042 0208 	orr.w	r2, r2, #8
 800648c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	69da      	ldr	r2, [r3, #28]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 0204 	bic.w	r2, r2, #4
 800649c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	69d9      	ldr	r1, [r3, #28]
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	691a      	ldr	r2, [r3, #16]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	430a      	orrs	r2, r1
 80064ae:	61da      	str	r2, [r3, #28]
      break;
 80064b0:	e064      	b.n	800657c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68b9      	ldr	r1, [r7, #8]
 80064b8:	4618      	mov	r0, r3
 80064ba:	f000 fb65 	bl	8006b88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	69da      	ldr	r2, [r3, #28]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	69da      	ldr	r2, [r3, #28]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69d9      	ldr	r1, [r3, #28]
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	021a      	lsls	r2, r3, #8
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	61da      	str	r2, [r3, #28]
      break;
 80064f2:	e043      	b.n	800657c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68b9      	ldr	r1, [r7, #8]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 fb9c 	bl	8006c38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f042 0208 	orr.w	r2, r2, #8
 800650e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 0204 	bic.w	r2, r2, #4
 800651e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	691a      	ldr	r2, [r3, #16]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	430a      	orrs	r2, r1
 8006530:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006532:	e023      	b.n	800657c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68b9      	ldr	r1, [r7, #8]
 800653a:	4618      	mov	r0, r3
 800653c:	f000 fbce 	bl	8006cdc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800654e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800655e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	021a      	lsls	r2, r3, #8
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	430a      	orrs	r2, r1
 8006572:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006574:	e002      	b.n	800657c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	75fb      	strb	r3, [r7, #23]
      break;
 800657a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006584:	7dfb      	ldrb	r3, [r7, #23]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop

08006590 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800659a:	2300      	movs	r3, #0
 800659c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d101      	bne.n	80065ac <HAL_TIM_ConfigClockSource+0x1c>
 80065a8:	2302      	movs	r3, #2
 80065aa:	e0b4      	b.n	8006716 <HAL_TIM_ConfigClockSource+0x186>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	4b56      	ldr	r3, [pc, #344]	; (8006720 <HAL_TIM_ConfigClockSource+0x190>)
 80065c8:	4013      	ands	r3, r2
 80065ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065e4:	d03e      	beq.n	8006664 <HAL_TIM_ConfigClockSource+0xd4>
 80065e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ea:	f200 8087 	bhi.w	80066fc <HAL_TIM_ConfigClockSource+0x16c>
 80065ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065f2:	f000 8086 	beq.w	8006702 <HAL_TIM_ConfigClockSource+0x172>
 80065f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065fa:	d87f      	bhi.n	80066fc <HAL_TIM_ConfigClockSource+0x16c>
 80065fc:	2b70      	cmp	r3, #112	; 0x70
 80065fe:	d01a      	beq.n	8006636 <HAL_TIM_ConfigClockSource+0xa6>
 8006600:	2b70      	cmp	r3, #112	; 0x70
 8006602:	d87b      	bhi.n	80066fc <HAL_TIM_ConfigClockSource+0x16c>
 8006604:	2b60      	cmp	r3, #96	; 0x60
 8006606:	d050      	beq.n	80066aa <HAL_TIM_ConfigClockSource+0x11a>
 8006608:	2b60      	cmp	r3, #96	; 0x60
 800660a:	d877      	bhi.n	80066fc <HAL_TIM_ConfigClockSource+0x16c>
 800660c:	2b50      	cmp	r3, #80	; 0x50
 800660e:	d03c      	beq.n	800668a <HAL_TIM_ConfigClockSource+0xfa>
 8006610:	2b50      	cmp	r3, #80	; 0x50
 8006612:	d873      	bhi.n	80066fc <HAL_TIM_ConfigClockSource+0x16c>
 8006614:	2b40      	cmp	r3, #64	; 0x40
 8006616:	d058      	beq.n	80066ca <HAL_TIM_ConfigClockSource+0x13a>
 8006618:	2b40      	cmp	r3, #64	; 0x40
 800661a:	d86f      	bhi.n	80066fc <HAL_TIM_ConfigClockSource+0x16c>
 800661c:	2b30      	cmp	r3, #48	; 0x30
 800661e:	d064      	beq.n	80066ea <HAL_TIM_ConfigClockSource+0x15a>
 8006620:	2b30      	cmp	r3, #48	; 0x30
 8006622:	d86b      	bhi.n	80066fc <HAL_TIM_ConfigClockSource+0x16c>
 8006624:	2b20      	cmp	r3, #32
 8006626:	d060      	beq.n	80066ea <HAL_TIM_ConfigClockSource+0x15a>
 8006628:	2b20      	cmp	r3, #32
 800662a:	d867      	bhi.n	80066fc <HAL_TIM_ConfigClockSource+0x16c>
 800662c:	2b00      	cmp	r3, #0
 800662e:	d05c      	beq.n	80066ea <HAL_TIM_ConfigClockSource+0x15a>
 8006630:	2b10      	cmp	r3, #16
 8006632:	d05a      	beq.n	80066ea <HAL_TIM_ConfigClockSource+0x15a>
 8006634:	e062      	b.n	80066fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6818      	ldr	r0, [r3, #0]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	6899      	ldr	r1, [r3, #8]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	685a      	ldr	r2, [r3, #4]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	f000 fc17 	bl	8006e78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006658:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	609a      	str	r2, [r3, #8]
      break;
 8006662:	e04f      	b.n	8006704 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6818      	ldr	r0, [r3, #0]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	6899      	ldr	r1, [r3, #8]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	f000 fc00 	bl	8006e78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689a      	ldr	r2, [r3, #8]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006686:	609a      	str	r2, [r3, #8]
      break;
 8006688:	e03c      	b.n	8006704 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6818      	ldr	r0, [r3, #0]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	6859      	ldr	r1, [r3, #4]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	461a      	mov	r2, r3
 8006698:	f000 fb74 	bl	8006d84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2150      	movs	r1, #80	; 0x50
 80066a2:	4618      	mov	r0, r3
 80066a4:	f000 fbcd 	bl	8006e42 <TIM_ITRx_SetConfig>
      break;
 80066a8:	e02c      	b.n	8006704 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6818      	ldr	r0, [r3, #0]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	6859      	ldr	r1, [r3, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	461a      	mov	r2, r3
 80066b8:	f000 fb93 	bl	8006de2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2160      	movs	r1, #96	; 0x60
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 fbbd 	bl	8006e42 <TIM_ITRx_SetConfig>
      break;
 80066c8:	e01c      	b.n	8006704 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6818      	ldr	r0, [r3, #0]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	6859      	ldr	r1, [r3, #4]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	461a      	mov	r2, r3
 80066d8:	f000 fb54 	bl	8006d84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2140      	movs	r1, #64	; 0x40
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 fbad 	bl	8006e42 <TIM_ITRx_SetConfig>
      break;
 80066e8:	e00c      	b.n	8006704 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4619      	mov	r1, r3
 80066f4:	4610      	mov	r0, r2
 80066f6:	f000 fba4 	bl	8006e42 <TIM_ITRx_SetConfig>
      break;
 80066fa:	e003      	b.n	8006704 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006700:	e000      	b.n	8006704 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006702:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006714:	7bfb      	ldrb	r3, [r7, #15]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	fffeff88 	.word	0xfffeff88

08006724 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a40      	ldr	r2, [pc, #256]	; (800689c <TIM_Base_SetConfig+0x114>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d013      	beq.n	80067c8 <TIM_Base_SetConfig+0x40>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067a6:	d00f      	beq.n	80067c8 <TIM_Base_SetConfig+0x40>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a3d      	ldr	r2, [pc, #244]	; (80068a0 <TIM_Base_SetConfig+0x118>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d00b      	beq.n	80067c8 <TIM_Base_SetConfig+0x40>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a3c      	ldr	r2, [pc, #240]	; (80068a4 <TIM_Base_SetConfig+0x11c>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d007      	beq.n	80067c8 <TIM_Base_SetConfig+0x40>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a3b      	ldr	r2, [pc, #236]	; (80068a8 <TIM_Base_SetConfig+0x120>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d003      	beq.n	80067c8 <TIM_Base_SetConfig+0x40>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a3a      	ldr	r2, [pc, #232]	; (80068ac <TIM_Base_SetConfig+0x124>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d108      	bne.n	80067da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a2f      	ldr	r2, [pc, #188]	; (800689c <TIM_Base_SetConfig+0x114>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d02b      	beq.n	800683a <TIM_Base_SetConfig+0xb2>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067e8:	d027      	beq.n	800683a <TIM_Base_SetConfig+0xb2>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a2c      	ldr	r2, [pc, #176]	; (80068a0 <TIM_Base_SetConfig+0x118>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d023      	beq.n	800683a <TIM_Base_SetConfig+0xb2>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a2b      	ldr	r2, [pc, #172]	; (80068a4 <TIM_Base_SetConfig+0x11c>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d01f      	beq.n	800683a <TIM_Base_SetConfig+0xb2>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a2a      	ldr	r2, [pc, #168]	; (80068a8 <TIM_Base_SetConfig+0x120>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d01b      	beq.n	800683a <TIM_Base_SetConfig+0xb2>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a29      	ldr	r2, [pc, #164]	; (80068ac <TIM_Base_SetConfig+0x124>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d017      	beq.n	800683a <TIM_Base_SetConfig+0xb2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a28      	ldr	r2, [pc, #160]	; (80068b0 <TIM_Base_SetConfig+0x128>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d013      	beq.n	800683a <TIM_Base_SetConfig+0xb2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a27      	ldr	r2, [pc, #156]	; (80068b4 <TIM_Base_SetConfig+0x12c>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d00f      	beq.n	800683a <TIM_Base_SetConfig+0xb2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a26      	ldr	r2, [pc, #152]	; (80068b8 <TIM_Base_SetConfig+0x130>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d00b      	beq.n	800683a <TIM_Base_SetConfig+0xb2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a25      	ldr	r2, [pc, #148]	; (80068bc <TIM_Base_SetConfig+0x134>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d007      	beq.n	800683a <TIM_Base_SetConfig+0xb2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a24      	ldr	r2, [pc, #144]	; (80068c0 <TIM_Base_SetConfig+0x138>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d003      	beq.n	800683a <TIM_Base_SetConfig+0xb2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a23      	ldr	r2, [pc, #140]	; (80068c4 <TIM_Base_SetConfig+0x13c>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d108      	bne.n	800684c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	4313      	orrs	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	4313      	orrs	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	689a      	ldr	r2, [r3, #8]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a0a      	ldr	r2, [pc, #40]	; (800689c <TIM_Base_SetConfig+0x114>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d003      	beq.n	8006880 <TIM_Base_SetConfig+0xf8>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a0c      	ldr	r2, [pc, #48]	; (80068ac <TIM_Base_SetConfig+0x124>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d103      	bne.n	8006888 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	691a      	ldr	r2, [r3, #16]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	615a      	str	r2, [r3, #20]
}
 800688e:	bf00      	nop
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	40010000 	.word	0x40010000
 80068a0:	40000400 	.word	0x40000400
 80068a4:	40000800 	.word	0x40000800
 80068a8:	40000c00 	.word	0x40000c00
 80068ac:	40010400 	.word	0x40010400
 80068b0:	40014000 	.word	0x40014000
 80068b4:	40014400 	.word	0x40014400
 80068b8:	40014800 	.word	0x40014800
 80068bc:	40001800 	.word	0x40001800
 80068c0:	40001c00 	.word	0x40001c00
 80068c4:	40002000 	.word	0x40002000

080068c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b087      	sub	sp, #28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	f023 0201 	bic.w	r2, r3, #1
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	4b2b      	ldr	r3, [pc, #172]	; (80069a0 <TIM_OC1_SetConfig+0xd8>)
 80068f4:	4013      	ands	r3, r2
 80068f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f023 0303 	bic.w	r3, r3, #3
 80068fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	4313      	orrs	r3, r2
 8006908:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	f023 0302 	bic.w	r3, r3, #2
 8006910:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	4313      	orrs	r3, r2
 800691a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a21      	ldr	r2, [pc, #132]	; (80069a4 <TIM_OC1_SetConfig+0xdc>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d003      	beq.n	800692c <TIM_OC1_SetConfig+0x64>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a20      	ldr	r2, [pc, #128]	; (80069a8 <TIM_OC1_SetConfig+0xe0>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d10c      	bne.n	8006946 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f023 0308 	bic.w	r3, r3, #8
 8006932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	4313      	orrs	r3, r2
 800693c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f023 0304 	bic.w	r3, r3, #4
 8006944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a16      	ldr	r2, [pc, #88]	; (80069a4 <TIM_OC1_SetConfig+0xdc>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d003      	beq.n	8006956 <TIM_OC1_SetConfig+0x8e>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a15      	ldr	r2, [pc, #84]	; (80069a8 <TIM_OC1_SetConfig+0xe0>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d111      	bne.n	800697a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800695c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	4313      	orrs	r3, r2
 800696e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	4313      	orrs	r3, r2
 8006978:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	621a      	str	r2, [r3, #32]
}
 8006994:	bf00      	nop
 8006996:	371c      	adds	r7, #28
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	fffeff8f 	.word	0xfffeff8f
 80069a4:	40010000 	.word	0x40010000
 80069a8:	40010400 	.word	0x40010400

080069ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	f023 0210 	bic.w	r2, r3, #16
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	4b2e      	ldr	r3, [pc, #184]	; (8006a90 <TIM_OC2_SetConfig+0xe4>)
 80069d8:	4013      	ands	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	021b      	lsls	r3, r3, #8
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f023 0320 	bic.w	r3, r3, #32
 80069f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	011b      	lsls	r3, r3, #4
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a23      	ldr	r2, [pc, #140]	; (8006a94 <TIM_OC2_SetConfig+0xe8>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d003      	beq.n	8006a14 <TIM_OC2_SetConfig+0x68>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a22      	ldr	r2, [pc, #136]	; (8006a98 <TIM_OC2_SetConfig+0xec>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d10d      	bne.n	8006a30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	011b      	lsls	r3, r3, #4
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a18      	ldr	r2, [pc, #96]	; (8006a94 <TIM_OC2_SetConfig+0xe8>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d003      	beq.n	8006a40 <TIM_OC2_SetConfig+0x94>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a17      	ldr	r2, [pc, #92]	; (8006a98 <TIM_OC2_SetConfig+0xec>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d113      	bne.n	8006a68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	695b      	ldr	r3, [r3, #20]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685a      	ldr	r2, [r3, #4]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	621a      	str	r2, [r3, #32]
}
 8006a82:	bf00      	nop
 8006a84:	371c      	adds	r7, #28
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	feff8fff 	.word	0xfeff8fff
 8006a94:	40010000 	.word	0x40010000
 8006a98:	40010400 	.word	0x40010400

08006a9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	4b2d      	ldr	r3, [pc, #180]	; (8006b7c <TIM_OC3_SetConfig+0xe0>)
 8006ac8:	4013      	ands	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f023 0303 	bic.w	r3, r3, #3
 8006ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	021b      	lsls	r3, r3, #8
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a22      	ldr	r2, [pc, #136]	; (8006b80 <TIM_OC3_SetConfig+0xe4>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d003      	beq.n	8006b02 <TIM_OC3_SetConfig+0x66>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a21      	ldr	r2, [pc, #132]	; (8006b84 <TIM_OC3_SetConfig+0xe8>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d10d      	bne.n	8006b1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	021b      	lsls	r3, r3, #8
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a17      	ldr	r2, [pc, #92]	; (8006b80 <TIM_OC3_SetConfig+0xe4>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d003      	beq.n	8006b2e <TIM_OC3_SetConfig+0x92>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a16      	ldr	r2, [pc, #88]	; (8006b84 <TIM_OC3_SetConfig+0xe8>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d113      	bne.n	8006b56 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	011b      	lsls	r3, r3, #4
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	011b      	lsls	r3, r3, #4
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	621a      	str	r2, [r3, #32]
}
 8006b70:	bf00      	nop
 8006b72:	371c      	adds	r7, #28
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	fffeff8f 	.word	0xfffeff8f
 8006b80:	40010000 	.word	0x40010000
 8006b84:	40010400 	.word	0x40010400

08006b88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b087      	sub	sp, #28
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	69db      	ldr	r3, [r3, #28]
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	4b1e      	ldr	r3, [pc, #120]	; (8006c2c <TIM_OC4_SetConfig+0xa4>)
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	021b      	lsls	r3, r3, #8
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	031b      	lsls	r3, r3, #12
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a13      	ldr	r2, [pc, #76]	; (8006c30 <TIM_OC4_SetConfig+0xa8>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d003      	beq.n	8006bf0 <TIM_OC4_SetConfig+0x68>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a12      	ldr	r2, [pc, #72]	; (8006c34 <TIM_OC4_SetConfig+0xac>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d109      	bne.n	8006c04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	019b      	lsls	r3, r3, #6
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	621a      	str	r2, [r3, #32]
}
 8006c1e:	bf00      	nop
 8006c20:	371c      	adds	r7, #28
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	feff8fff 	.word	0xfeff8fff
 8006c30:	40010000 	.word	0x40010000
 8006c34:	40010400 	.word	0x40010400

08006c38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	4b1b      	ldr	r3, [pc, #108]	; (8006cd0 <TIM_OC5_SetConfig+0x98>)
 8006c64:	4013      	ands	r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	041b      	lsls	r3, r3, #16
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a12      	ldr	r2, [pc, #72]	; (8006cd4 <TIM_OC5_SetConfig+0x9c>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d003      	beq.n	8006c96 <TIM_OC5_SetConfig+0x5e>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a11      	ldr	r2, [pc, #68]	; (8006cd8 <TIM_OC5_SetConfig+0xa0>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d109      	bne.n	8006caa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	021b      	lsls	r3, r3, #8
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	621a      	str	r2, [r3, #32]
}
 8006cc4:	bf00      	nop
 8006cc6:	371c      	adds	r7, #28
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	fffeff8f 	.word	0xfffeff8f
 8006cd4:	40010000 	.word	0x40010000
 8006cd8:	40010400 	.word	0x40010400

08006cdc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	4b1c      	ldr	r3, [pc, #112]	; (8006d78 <TIM_OC6_SetConfig+0x9c>)
 8006d08:	4013      	ands	r3, r2
 8006d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	021b      	lsls	r3, r3, #8
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	051b      	lsls	r3, r3, #20
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a13      	ldr	r2, [pc, #76]	; (8006d7c <TIM_OC6_SetConfig+0xa0>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d003      	beq.n	8006d3c <TIM_OC6_SetConfig+0x60>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a12      	ldr	r2, [pc, #72]	; (8006d80 <TIM_OC6_SetConfig+0xa4>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d109      	bne.n	8006d50 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	029b      	lsls	r3, r3, #10
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	693a      	ldr	r2, [r7, #16]
 8006d68:	621a      	str	r2, [r3, #32]
}
 8006d6a:	bf00      	nop
 8006d6c:	371c      	adds	r7, #28
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	feff8fff 	.word	0xfeff8fff
 8006d7c:	40010000 	.word	0x40010000
 8006d80:	40010400 	.word	0x40010400

08006d84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b087      	sub	sp, #28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6a1b      	ldr	r3, [r3, #32]
 8006d94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	f023 0201 	bic.w	r2, r3, #1
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	011b      	lsls	r3, r3, #4
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f023 030a 	bic.w	r3, r3, #10
 8006dc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	621a      	str	r2, [r3, #32]
}
 8006dd6:	bf00      	nop
 8006dd8:	371c      	adds	r7, #28
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b087      	sub	sp, #28
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	60f8      	str	r0, [r7, #12]
 8006dea:	60b9      	str	r1, [r7, #8]
 8006dec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	f023 0210 	bic.w	r2, r3, #16
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6a1b      	ldr	r3, [r3, #32]
 8006e04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	031b      	lsls	r3, r3, #12
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	011b      	lsls	r3, r3, #4
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	621a      	str	r2, [r3, #32]
}
 8006e36:	bf00      	nop
 8006e38:	371c      	adds	r7, #28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b085      	sub	sp, #20
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	f043 0307 	orr.w	r3, r3, #7
 8006e64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	609a      	str	r2, [r3, #8]
}
 8006e6c:	bf00      	nop
 8006e6e:	3714      	adds	r7, #20
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
 8006e84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	021a      	lsls	r2, r3, #8
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	431a      	orrs	r2, r3
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	609a      	str	r2, [r3, #8]
}
 8006eac:	bf00      	nop
 8006eae:	371c      	adds	r7, #28
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b087      	sub	sp, #28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	f003 031f 	and.w	r3, r3, #31
 8006eca:	2201      	movs	r2, #1
 8006ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6a1a      	ldr	r2, [r3, #32]
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	43db      	mvns	r3, r3
 8006eda:	401a      	ands	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6a1a      	ldr	r2, [r3, #32]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	f003 031f 	and.w	r3, r3, #31
 8006eea:	6879      	ldr	r1, [r7, #4]
 8006eec:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef0:	431a      	orrs	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	621a      	str	r2, [r3, #32]
}
 8006ef6:	bf00      	nop
 8006ef8:	371c      	adds	r7, #28
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
	...

08006f04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d101      	bne.n	8006f1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f18:	2302      	movs	r3, #2
 8006f1a:	e06d      	b.n	8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2202      	movs	r2, #2
 8006f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a30      	ldr	r2, [pc, #192]	; (8007004 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d004      	beq.n	8006f50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a2f      	ldr	r2, [pc, #188]	; (8007008 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d108      	bne.n	8006f62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a20      	ldr	r2, [pc, #128]	; (8007004 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d022      	beq.n	8006fcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f8e:	d01d      	beq.n	8006fcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a1d      	ldr	r2, [pc, #116]	; (800700c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d018      	beq.n	8006fcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a1c      	ldr	r2, [pc, #112]	; (8007010 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d013      	beq.n	8006fcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a1a      	ldr	r2, [pc, #104]	; (8007014 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d00e      	beq.n	8006fcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a15      	ldr	r2, [pc, #84]	; (8007008 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d009      	beq.n	8006fcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a16      	ldr	r2, [pc, #88]	; (8007018 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d004      	beq.n	8006fcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a15      	ldr	r2, [pc, #84]	; (800701c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d10c      	bne.n	8006fe6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr
 8007004:	40010000 	.word	0x40010000
 8007008:	40010400 	.word	0x40010400
 800700c:	40000400 	.word	0x40000400
 8007010:	40000800 	.word	0x40000800
 8007014:	40000c00 	.word	0x40000c00
 8007018:	40014000 	.word	0x40014000
 800701c:	40001800 	.word	0x40001800

08007020 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e040      	b.n	80070f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007072:	2b00      	cmp	r3, #0
 8007074:	d106      	bne.n	8007084 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7fc fbc8 	bl	8003814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2224      	movs	r2, #36	; 0x24
 8007088:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f022 0201 	bic.w	r2, r2, #1
 8007098:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 fd50 	bl	8007b40 <UART_SetConfig>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d101      	bne.n	80070aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e022      	b.n	80070f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d002      	beq.n	80070b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 ffa8 	bl	8008008 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	685a      	ldr	r2, [r3, #4]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	689a      	ldr	r2, [r3, #8]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f042 0201 	orr.w	r2, r2, #1
 80070e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f001 f82f 	bl	800814c <UART_CheckIdleState>
 80070ee:	4603      	mov	r3, r0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b08a      	sub	sp, #40	; 0x28
 80070fc:	af02      	add	r7, sp, #8
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	603b      	str	r3, [r7, #0]
 8007104:	4613      	mov	r3, r2
 8007106:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800710c:	2b20      	cmp	r3, #32
 800710e:	d171      	bne.n	80071f4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d002      	beq.n	800711c <HAL_UART_Transmit+0x24>
 8007116:	88fb      	ldrh	r3, [r7, #6]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d101      	bne.n	8007120 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e06a      	b.n	80071f6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2221      	movs	r2, #33	; 0x21
 800712c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800712e:	f7fc fe61 	bl	8003df4 <HAL_GetTick>
 8007132:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	88fa      	ldrh	r2, [r7, #6]
 8007138:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	88fa      	ldrh	r2, [r7, #6]
 8007140:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800714c:	d108      	bne.n	8007160 <HAL_UART_Transmit+0x68>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d104      	bne.n	8007160 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007156:	2300      	movs	r3, #0
 8007158:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	61bb      	str	r3, [r7, #24]
 800715e:	e003      	b.n	8007168 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007164:	2300      	movs	r3, #0
 8007166:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007168:	e02c      	b.n	80071c4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	2200      	movs	r2, #0
 8007172:	2180      	movs	r1, #128	; 0x80
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f001 f836 	bl	80081e6 <UART_WaitOnFlagUntilTimeout>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d001      	beq.n	8007184 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e038      	b.n	80071f6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d10b      	bne.n	80071a2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	461a      	mov	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007198:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	3302      	adds	r3, #2
 800719e:	61bb      	str	r3, [r7, #24]
 80071a0:	e007      	b.n	80071b2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	781a      	ldrb	r2, [r3, #0]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	3301      	adds	r3, #1
 80071b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	3b01      	subs	r3, #1
 80071bc:	b29a      	uxth	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1cc      	bne.n	800716a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	2200      	movs	r2, #0
 80071d8:	2140      	movs	r1, #64	; 0x40
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f001 f803 	bl	80081e6 <UART_WaitOnFlagUntilTimeout>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e005      	b.n	80071f6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2220      	movs	r2, #32
 80071ee:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80071f0:	2300      	movs	r3, #0
 80071f2:	e000      	b.n	80071f6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80071f4:	2302      	movs	r3, #2
  }
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3720      	adds	r7, #32
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b08a      	sub	sp, #40	; 0x28
 8007202:	af02      	add	r7, sp, #8
 8007204:	60f8      	str	r0, [r7, #12]
 8007206:	60b9      	str	r1, [r7, #8]
 8007208:	603b      	str	r3, [r7, #0]
 800720a:	4613      	mov	r3, r2
 800720c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007214:	2b20      	cmp	r3, #32
 8007216:	f040 80b1 	bne.w	800737c <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d002      	beq.n	8007226 <HAL_UART_Receive+0x28>
 8007220:	88fb      	ldrh	r3, [r7, #6]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e0a9      	b.n	800737e <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2222      	movs	r2, #34	; 0x22
 8007236:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007240:	f7fc fdd8 	bl	8003df4 <HAL_GetTick>
 8007244:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	88fa      	ldrh	r2, [r7, #6]
 800724a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	88fa      	ldrh	r2, [r7, #6]
 8007252:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800725e:	d10e      	bne.n	800727e <HAL_UART_Receive+0x80>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d105      	bne.n	8007274 <HAL_UART_Receive+0x76>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800726e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007272:	e02d      	b.n	80072d0 <HAL_UART_Receive+0xd2>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	22ff      	movs	r2, #255	; 0xff
 8007278:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800727c:	e028      	b.n	80072d0 <HAL_UART_Receive+0xd2>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d10d      	bne.n	80072a2 <HAL_UART_Receive+0xa4>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d104      	bne.n	8007298 <HAL_UART_Receive+0x9a>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	22ff      	movs	r2, #255	; 0xff
 8007292:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007296:	e01b      	b.n	80072d0 <HAL_UART_Receive+0xd2>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	227f      	movs	r2, #127	; 0x7f
 800729c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072a0:	e016      	b.n	80072d0 <HAL_UART_Receive+0xd2>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072aa:	d10d      	bne.n	80072c8 <HAL_UART_Receive+0xca>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d104      	bne.n	80072be <HAL_UART_Receive+0xc0>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	227f      	movs	r2, #127	; 0x7f
 80072b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072bc:	e008      	b.n	80072d0 <HAL_UART_Receive+0xd2>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	223f      	movs	r2, #63	; 0x3f
 80072c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072c6:	e003      	b.n	80072d0 <HAL_UART_Receive+0xd2>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80072d6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072e0:	d108      	bne.n	80072f4 <HAL_UART_Receive+0xf6>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d104      	bne.n	80072f4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80072ea:	2300      	movs	r3, #0
 80072ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	61bb      	str	r3, [r7, #24]
 80072f2:	e003      	b.n	80072fc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072f8:	2300      	movs	r3, #0
 80072fa:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80072fc:	e032      	b.n	8007364 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2200      	movs	r2, #0
 8007306:	2120      	movs	r1, #32
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f000 ff6c 	bl	80081e6 <UART_WaitOnFlagUntilTimeout>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e032      	b.n	800737e <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10c      	bne.n	8007338 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007324:	b29a      	uxth	r2, r3
 8007326:	8a7b      	ldrh	r3, [r7, #18]
 8007328:	4013      	ands	r3, r2
 800732a:	b29a      	uxth	r2, r3
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	3302      	adds	r3, #2
 8007334:	61bb      	str	r3, [r7, #24]
 8007336:	e00c      	b.n	8007352 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733e:	b2da      	uxtb	r2, r3
 8007340:	8a7b      	ldrh	r3, [r7, #18]
 8007342:	b2db      	uxtb	r3, r3
 8007344:	4013      	ands	r3, r2
 8007346:	b2da      	uxtb	r2, r3
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	3301      	adds	r3, #1
 8007350:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007358:	b29b      	uxth	r3, r3
 800735a:	3b01      	subs	r3, #1
 800735c:	b29a      	uxth	r2, r3
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800736a:	b29b      	uxth	r3, r3
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1c6      	bne.n	80072fe <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2220      	movs	r2, #32
 8007374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007378:	2300      	movs	r3, #0
 800737a:	e000      	b.n	800737e <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800737c:	2302      	movs	r3, #2
  }
}
 800737e:	4618      	mov	r0, r3
 8007380:	3720      	adds	r7, #32
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
	...

08007388 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b08a      	sub	sp, #40	; 0x28
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	4613      	mov	r3, r2
 8007394:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800739a:	2b20      	cmp	r3, #32
 800739c:	d165      	bne.n	800746a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d002      	beq.n	80073aa <HAL_UART_Transmit_DMA+0x22>
 80073a4:	88fb      	ldrh	r3, [r7, #6]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e05e      	b.n	800746c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	88fa      	ldrh	r2, [r7, #6]
 80073b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	88fa      	ldrh	r2, [r7, #6]
 80073c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2221      	movs	r2, #33	; 0x21
 80073d0:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d027      	beq.n	800742a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073de:	4a25      	ldr	r2, [pc, #148]	; (8007474 <HAL_UART_Transmit_DMA+0xec>)
 80073e0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e6:	4a24      	ldr	r2, [pc, #144]	; (8007478 <HAL_UART_Transmit_DMA+0xf0>)
 80073e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ee:	4a23      	ldr	r2, [pc, #140]	; (800747c <HAL_UART_Transmit_DMA+0xf4>)
 80073f0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f6:	2200      	movs	r2, #0
 80073f8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007402:	4619      	mov	r1, r3
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	3328      	adds	r3, #40	; 0x28
 800740a:	461a      	mov	r2, r3
 800740c:	88fb      	ldrh	r3, [r7, #6]
 800740e:	f7fc febd 	bl	800418c <HAL_DMA_Start_IT>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d008      	beq.n	800742a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2210      	movs	r2, #16
 800741c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2220      	movs	r2, #32
 8007424:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e020      	b.n	800746c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2240      	movs	r2, #64	; 0x40
 8007430:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3308      	adds	r3, #8
 8007438:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	e853 3f00 	ldrex	r3, [r3]
 8007440:	613b      	str	r3, [r7, #16]
   return(result);
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007448:	627b      	str	r3, [r7, #36]	; 0x24
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	3308      	adds	r3, #8
 8007450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007452:	623a      	str	r2, [r7, #32]
 8007454:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007456:	69f9      	ldr	r1, [r7, #28]
 8007458:	6a3a      	ldr	r2, [r7, #32]
 800745a:	e841 2300 	strex	r3, r2, [r1]
 800745e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1e5      	bne.n	8007432 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8007466:	2300      	movs	r3, #0
 8007468:	e000      	b.n	800746c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800746a:	2302      	movs	r3, #2
  }
}
 800746c:	4618      	mov	r0, r3
 800746e:	3728      	adds	r7, #40	; 0x28
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	080085c9 	.word	0x080085c9
 8007478:	0800865f 	.word	0x0800865f
 800747c:	080087e1 	.word	0x080087e1

08007480 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b08a      	sub	sp, #40	; 0x28
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	4613      	mov	r3, r2
 800748c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007494:	2b20      	cmp	r3, #32
 8007496:	d132      	bne.n	80074fe <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d002      	beq.n	80074a4 <HAL_UART_Receive_DMA+0x24>
 800749e:	88fb      	ldrh	r3, [r7, #6]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e02b      	b.n	8007500 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d018      	beq.n	80074ee <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	e853 3f00 	ldrex	r3, [r3]
 80074c8:	613b      	str	r3, [r7, #16]
   return(result);
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074d0:	627b      	str	r3, [r7, #36]	; 0x24
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	461a      	mov	r2, r3
 80074d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074da:	623b      	str	r3, [r7, #32]
 80074dc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074de:	69f9      	ldr	r1, [r7, #28]
 80074e0:	6a3a      	ldr	r2, [r7, #32]
 80074e2:	e841 2300 	strex	r3, r2, [r1]
 80074e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1e6      	bne.n	80074bc <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80074ee:	88fb      	ldrh	r3, [r7, #6]
 80074f0:	461a      	mov	r2, r3
 80074f2:	68b9      	ldr	r1, [r7, #8]
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f000 ff3d 	bl	8008374 <UART_Start_Receive_DMA>
 80074fa:	4603      	mov	r3, r0
 80074fc:	e000      	b.n	8007500 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 80074fe:	2302      	movs	r3, #2
  }
}
 8007500:	4618      	mov	r0, r3
 8007502:	3728      	adds	r7, #40	; 0x28
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b0ba      	sub	sp, #232	; 0xe8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	69db      	ldr	r3, [r3, #28]
 8007516:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800752e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007532:	f640 030f 	movw	r3, #2063	; 0x80f
 8007536:	4013      	ands	r3, r2
 8007538:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800753c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007540:	2b00      	cmp	r3, #0
 8007542:	d115      	bne.n	8007570 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007548:	f003 0320 	and.w	r3, r3, #32
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00f      	beq.n	8007570 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007554:	f003 0320 	and.w	r3, r3, #32
 8007558:	2b00      	cmp	r3, #0
 800755a:	d009      	beq.n	8007570 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 82ac 	beq.w	8007abe <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	4798      	blx	r3
      }
      return;
 800756e:	e2a6      	b.n	8007abe <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007570:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 8117 	beq.w	80077a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800757a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	2b00      	cmp	r3, #0
 8007584:	d106      	bne.n	8007594 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007586:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800758a:	4b85      	ldr	r3, [pc, #532]	; (80077a0 <HAL_UART_IRQHandler+0x298>)
 800758c:	4013      	ands	r3, r2
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 810a 	beq.w	80077a8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	2b00      	cmp	r3, #0
 800759e:	d011      	beq.n	80075c4 <HAL_UART_IRQHandler+0xbc>
 80075a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00b      	beq.n	80075c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2201      	movs	r2, #1
 80075b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075ba:	f043 0201 	orr.w	r2, r3, #1
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075c8:	f003 0302 	and.w	r3, r3, #2
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d011      	beq.n	80075f4 <HAL_UART_IRQHandler+0xec>
 80075d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00b      	beq.n	80075f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2202      	movs	r2, #2
 80075e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075ea:	f043 0204 	orr.w	r2, r3, #4
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075f8:	f003 0304 	and.w	r3, r3, #4
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d011      	beq.n	8007624 <HAL_UART_IRQHandler+0x11c>
 8007600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007604:	f003 0301 	and.w	r3, r3, #1
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00b      	beq.n	8007624 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2204      	movs	r2, #4
 8007612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800761a:	f043 0202 	orr.w	r2, r3, #2
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007628:	f003 0308 	and.w	r3, r3, #8
 800762c:	2b00      	cmp	r3, #0
 800762e:	d017      	beq.n	8007660 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007634:	f003 0320 	and.w	r3, r3, #32
 8007638:	2b00      	cmp	r3, #0
 800763a:	d105      	bne.n	8007648 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800763c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007640:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00b      	beq.n	8007660 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2208      	movs	r2, #8
 800764e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007656:	f043 0208 	orr.w	r2, r3, #8
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007668:	2b00      	cmp	r3, #0
 800766a:	d012      	beq.n	8007692 <HAL_UART_IRQHandler+0x18a>
 800766c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007670:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00c      	beq.n	8007692 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007680:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007688:	f043 0220 	orr.w	r2, r3, #32
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 8212 	beq.w	8007ac2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800769e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076a2:	f003 0320 	and.w	r3, r3, #32
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00d      	beq.n	80076c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80076aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076ae:	f003 0320 	and.w	r3, r3, #32
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d007      	beq.n	80076c6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d003      	beq.n	80076c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076da:	2b40      	cmp	r3, #64	; 0x40
 80076dc:	d005      	beq.n	80076ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80076de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d04f      	beq.n	800778a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 ff08 	bl	8008500 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076fa:	2b40      	cmp	r3, #64	; 0x40
 80076fc:	d141      	bne.n	8007782 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3308      	adds	r3, #8
 8007704:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007708:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800770c:	e853 3f00 	ldrex	r3, [r3]
 8007710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007714:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800771c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3308      	adds	r3, #8
 8007726:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800772a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800772e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007732:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007736:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800773a:	e841 2300 	strex	r3, r2, [r1]
 800773e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007742:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1d9      	bne.n	80076fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800774e:	2b00      	cmp	r3, #0
 8007750:	d013      	beq.n	800777a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007756:	4a13      	ldr	r2, [pc, #76]	; (80077a4 <HAL_UART_IRQHandler+0x29c>)
 8007758:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800775e:	4618      	mov	r0, r3
 8007760:	f7fc fde4 	bl	800432c <HAL_DMA_Abort_IT>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d017      	beq.n	800779a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800776e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007774:	4610      	mov	r0, r2
 8007776:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007778:	e00f      	b.n	800779a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f9c0 	bl	8007b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007780:	e00b      	b.n	800779a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f9bc 	bl	8007b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007788:	e007      	b.n	800779a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f9b8 	bl	8007b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007798:	e193      	b.n	8007ac2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800779a:	bf00      	nop
    return;
 800779c:	e191      	b.n	8007ac2 <HAL_UART_IRQHandler+0x5ba>
 800779e:	bf00      	nop
 80077a0:	04000120 	.word	0x04000120
 80077a4:	0800885f 	.word	0x0800885f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	f040 814c 	bne.w	8007a4a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80077b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077b6:	f003 0310 	and.w	r3, r3, #16
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f000 8145 	beq.w	8007a4a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80077c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077c4:	f003 0310 	and.w	r3, r3, #16
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 813e 	beq.w	8007a4a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2210      	movs	r2, #16
 80077d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e0:	2b40      	cmp	r3, #64	; 0x40
 80077e2:	f040 80b6 	bne.w	8007952 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f000 8165 	beq.w	8007ac6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007802:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007806:	429a      	cmp	r2, r3
 8007808:	f080 815d 	bcs.w	8007ac6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007812:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800781a:	69db      	ldr	r3, [r3, #28]
 800781c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007820:	f000 8086 	beq.w	8007930 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007830:	e853 3f00 	ldrex	r3, [r3]
 8007834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007838:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800783c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007840:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	461a      	mov	r2, r3
 800784a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800784e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007852:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007856:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800785a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800785e:	e841 2300 	strex	r3, r2, [r1]
 8007862:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007866:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1da      	bne.n	8007824 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3308      	adds	r3, #8
 8007874:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007878:	e853 3f00 	ldrex	r3, [r3]
 800787c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800787e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007880:	f023 0301 	bic.w	r3, r3, #1
 8007884:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3308      	adds	r3, #8
 800788e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007892:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007896:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007898:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800789a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800789e:	e841 2300 	strex	r3, r2, [r1]
 80078a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80078a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1e1      	bne.n	800786e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	3308      	adds	r3, #8
 80078b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078b4:	e853 3f00 	ldrex	r3, [r3]
 80078b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80078ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	3308      	adds	r3, #8
 80078ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80078ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078d6:	e841 2300 	strex	r3, r2, [r1]
 80078da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1e3      	bne.n	80078aa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2220      	movs	r2, #32
 80078e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078f8:	e853 3f00 	ldrex	r3, [r3]
 80078fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007900:	f023 0310 	bic.w	r3, r3, #16
 8007904:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	461a      	mov	r2, r3
 800790e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007912:	65bb      	str	r3, [r7, #88]	; 0x58
 8007914:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007916:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007918:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800791a:	e841 2300 	strex	r3, r2, [r1]
 800791e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1e4      	bne.n	80078f0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800792a:	4618      	mov	r0, r3
 800792c:	f7fc fc8e 	bl	800424c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2202      	movs	r2, #2
 8007934:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007942:	b29b      	uxth	r3, r3
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	b29b      	uxth	r3, r3
 8007948:	4619      	mov	r1, r3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f8e2 	bl	8007b14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007950:	e0b9      	b.n	8007ac6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800795e:	b29b      	uxth	r3, r3
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800796c:	b29b      	uxth	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	f000 80ab 	beq.w	8007aca <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8007974:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 80a6 	beq.w	8007aca <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007986:	e853 3f00 	ldrex	r3, [r3]
 800798a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800798c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800798e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007992:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	461a      	mov	r2, r3
 800799c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079a0:	647b      	str	r3, [r7, #68]	; 0x44
 80079a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079a8:	e841 2300 	strex	r3, r2, [r1]
 80079ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1e4      	bne.n	800797e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3308      	adds	r3, #8
 80079ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	e853 3f00 	ldrex	r3, [r3]
 80079c2:	623b      	str	r3, [r7, #32]
   return(result);
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	f023 0301 	bic.w	r3, r3, #1
 80079ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3308      	adds	r3, #8
 80079d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80079d8:	633a      	str	r2, [r7, #48]	; 0x30
 80079da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079e0:	e841 2300 	strex	r3, r2, [r1]
 80079e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1e3      	bne.n	80079b4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2220      	movs	r2, #32
 80079f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	e853 3f00 	ldrex	r3, [r3]
 8007a0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f023 0310 	bic.w	r3, r3, #16
 8007a14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a22:	61fb      	str	r3, [r7, #28]
 8007a24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a26:	69b9      	ldr	r1, [r7, #24]
 8007a28:	69fa      	ldr	r2, [r7, #28]
 8007a2a:	e841 2300 	strex	r3, r2, [r1]
 8007a2e:	617b      	str	r3, [r7, #20]
   return(result);
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1e4      	bne.n	8007a00 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2202      	movs	r2, #2
 8007a3a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a40:	4619      	mov	r1, r3
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f866 	bl	8007b14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a48:	e03f      	b.n	8007aca <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00e      	beq.n	8007a74 <HAL_UART_IRQHandler+0x56c>
 8007a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d008      	beq.n	8007a74 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f85d 	bl	8007b2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a72:	e02d      	b.n	8007ad0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00e      	beq.n	8007a9e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d008      	beq.n	8007a9e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d01c      	beq.n	8007ace <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	4798      	blx	r3
    }
    return;
 8007a9c:	e017      	b.n	8007ace <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d012      	beq.n	8007ad0 <HAL_UART_IRQHandler+0x5c8>
 8007aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00c      	beq.n	8007ad0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fee7 	bl	800888a <UART_EndTransmit_IT>
    return;
 8007abc:	e008      	b.n	8007ad0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007abe:	bf00      	nop
 8007ac0:	e006      	b.n	8007ad0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007ac2:	bf00      	nop
 8007ac4:	e004      	b.n	8007ad0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007ac6:	bf00      	nop
 8007ac8:	e002      	b.n	8007ad0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007aca:	bf00      	nop
 8007acc:	e000      	b.n	8007ad0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007ace:	bf00      	nop
  }

}
 8007ad0:	37e8      	adds	r7, #232	; 0xe8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop

08007ad8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b088      	sub	sp, #32
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	689a      	ldr	r2, [r3, #8]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	431a      	orrs	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	431a      	orrs	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	69db      	ldr	r3, [r3, #28]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	4ba6      	ldr	r3, [pc, #664]	; (8007e04 <UART_SetConfig+0x2c4>)
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	6812      	ldr	r2, [r2, #0]
 8007b72:	6979      	ldr	r1, [r7, #20]
 8007b74:	430b      	orrs	r3, r1
 8007b76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	68da      	ldr	r2, [r3, #12]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	699b      	ldr	r3, [r3, #24]
 8007b92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6a1b      	ldr	r3, [r3, #32]
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	697a      	ldr	r2, [r7, #20]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a94      	ldr	r2, [pc, #592]	; (8007e08 <UART_SetConfig+0x2c8>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d120      	bne.n	8007bfe <UART_SetConfig+0xbe>
 8007bbc:	4b93      	ldr	r3, [pc, #588]	; (8007e0c <UART_SetConfig+0x2cc>)
 8007bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bc2:	f003 0303 	and.w	r3, r3, #3
 8007bc6:	2b03      	cmp	r3, #3
 8007bc8:	d816      	bhi.n	8007bf8 <UART_SetConfig+0xb8>
 8007bca:	a201      	add	r2, pc, #4	; (adr r2, 8007bd0 <UART_SetConfig+0x90>)
 8007bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd0:	08007be1 	.word	0x08007be1
 8007bd4:	08007bed 	.word	0x08007bed
 8007bd8:	08007be7 	.word	0x08007be7
 8007bdc:	08007bf3 	.word	0x08007bf3
 8007be0:	2301      	movs	r3, #1
 8007be2:	77fb      	strb	r3, [r7, #31]
 8007be4:	e150      	b.n	8007e88 <UART_SetConfig+0x348>
 8007be6:	2302      	movs	r3, #2
 8007be8:	77fb      	strb	r3, [r7, #31]
 8007bea:	e14d      	b.n	8007e88 <UART_SetConfig+0x348>
 8007bec:	2304      	movs	r3, #4
 8007bee:	77fb      	strb	r3, [r7, #31]
 8007bf0:	e14a      	b.n	8007e88 <UART_SetConfig+0x348>
 8007bf2:	2308      	movs	r3, #8
 8007bf4:	77fb      	strb	r3, [r7, #31]
 8007bf6:	e147      	b.n	8007e88 <UART_SetConfig+0x348>
 8007bf8:	2310      	movs	r3, #16
 8007bfa:	77fb      	strb	r3, [r7, #31]
 8007bfc:	e144      	b.n	8007e88 <UART_SetConfig+0x348>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a83      	ldr	r2, [pc, #524]	; (8007e10 <UART_SetConfig+0x2d0>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d132      	bne.n	8007c6e <UART_SetConfig+0x12e>
 8007c08:	4b80      	ldr	r3, [pc, #512]	; (8007e0c <UART_SetConfig+0x2cc>)
 8007c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c0e:	f003 030c 	and.w	r3, r3, #12
 8007c12:	2b0c      	cmp	r3, #12
 8007c14:	d828      	bhi.n	8007c68 <UART_SetConfig+0x128>
 8007c16:	a201      	add	r2, pc, #4	; (adr r2, 8007c1c <UART_SetConfig+0xdc>)
 8007c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1c:	08007c51 	.word	0x08007c51
 8007c20:	08007c69 	.word	0x08007c69
 8007c24:	08007c69 	.word	0x08007c69
 8007c28:	08007c69 	.word	0x08007c69
 8007c2c:	08007c5d 	.word	0x08007c5d
 8007c30:	08007c69 	.word	0x08007c69
 8007c34:	08007c69 	.word	0x08007c69
 8007c38:	08007c69 	.word	0x08007c69
 8007c3c:	08007c57 	.word	0x08007c57
 8007c40:	08007c69 	.word	0x08007c69
 8007c44:	08007c69 	.word	0x08007c69
 8007c48:	08007c69 	.word	0x08007c69
 8007c4c:	08007c63 	.word	0x08007c63
 8007c50:	2300      	movs	r3, #0
 8007c52:	77fb      	strb	r3, [r7, #31]
 8007c54:	e118      	b.n	8007e88 <UART_SetConfig+0x348>
 8007c56:	2302      	movs	r3, #2
 8007c58:	77fb      	strb	r3, [r7, #31]
 8007c5a:	e115      	b.n	8007e88 <UART_SetConfig+0x348>
 8007c5c:	2304      	movs	r3, #4
 8007c5e:	77fb      	strb	r3, [r7, #31]
 8007c60:	e112      	b.n	8007e88 <UART_SetConfig+0x348>
 8007c62:	2308      	movs	r3, #8
 8007c64:	77fb      	strb	r3, [r7, #31]
 8007c66:	e10f      	b.n	8007e88 <UART_SetConfig+0x348>
 8007c68:	2310      	movs	r3, #16
 8007c6a:	77fb      	strb	r3, [r7, #31]
 8007c6c:	e10c      	b.n	8007e88 <UART_SetConfig+0x348>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a68      	ldr	r2, [pc, #416]	; (8007e14 <UART_SetConfig+0x2d4>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d120      	bne.n	8007cba <UART_SetConfig+0x17a>
 8007c78:	4b64      	ldr	r3, [pc, #400]	; (8007e0c <UART_SetConfig+0x2cc>)
 8007c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c82:	2b30      	cmp	r3, #48	; 0x30
 8007c84:	d013      	beq.n	8007cae <UART_SetConfig+0x16e>
 8007c86:	2b30      	cmp	r3, #48	; 0x30
 8007c88:	d814      	bhi.n	8007cb4 <UART_SetConfig+0x174>
 8007c8a:	2b20      	cmp	r3, #32
 8007c8c:	d009      	beq.n	8007ca2 <UART_SetConfig+0x162>
 8007c8e:	2b20      	cmp	r3, #32
 8007c90:	d810      	bhi.n	8007cb4 <UART_SetConfig+0x174>
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d002      	beq.n	8007c9c <UART_SetConfig+0x15c>
 8007c96:	2b10      	cmp	r3, #16
 8007c98:	d006      	beq.n	8007ca8 <UART_SetConfig+0x168>
 8007c9a:	e00b      	b.n	8007cb4 <UART_SetConfig+0x174>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	77fb      	strb	r3, [r7, #31]
 8007ca0:	e0f2      	b.n	8007e88 <UART_SetConfig+0x348>
 8007ca2:	2302      	movs	r3, #2
 8007ca4:	77fb      	strb	r3, [r7, #31]
 8007ca6:	e0ef      	b.n	8007e88 <UART_SetConfig+0x348>
 8007ca8:	2304      	movs	r3, #4
 8007caa:	77fb      	strb	r3, [r7, #31]
 8007cac:	e0ec      	b.n	8007e88 <UART_SetConfig+0x348>
 8007cae:	2308      	movs	r3, #8
 8007cb0:	77fb      	strb	r3, [r7, #31]
 8007cb2:	e0e9      	b.n	8007e88 <UART_SetConfig+0x348>
 8007cb4:	2310      	movs	r3, #16
 8007cb6:	77fb      	strb	r3, [r7, #31]
 8007cb8:	e0e6      	b.n	8007e88 <UART_SetConfig+0x348>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a56      	ldr	r2, [pc, #344]	; (8007e18 <UART_SetConfig+0x2d8>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d120      	bne.n	8007d06 <UART_SetConfig+0x1c6>
 8007cc4:	4b51      	ldr	r3, [pc, #324]	; (8007e0c <UART_SetConfig+0x2cc>)
 8007cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007cce:	2bc0      	cmp	r3, #192	; 0xc0
 8007cd0:	d013      	beq.n	8007cfa <UART_SetConfig+0x1ba>
 8007cd2:	2bc0      	cmp	r3, #192	; 0xc0
 8007cd4:	d814      	bhi.n	8007d00 <UART_SetConfig+0x1c0>
 8007cd6:	2b80      	cmp	r3, #128	; 0x80
 8007cd8:	d009      	beq.n	8007cee <UART_SetConfig+0x1ae>
 8007cda:	2b80      	cmp	r3, #128	; 0x80
 8007cdc:	d810      	bhi.n	8007d00 <UART_SetConfig+0x1c0>
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d002      	beq.n	8007ce8 <UART_SetConfig+0x1a8>
 8007ce2:	2b40      	cmp	r3, #64	; 0x40
 8007ce4:	d006      	beq.n	8007cf4 <UART_SetConfig+0x1b4>
 8007ce6:	e00b      	b.n	8007d00 <UART_SetConfig+0x1c0>
 8007ce8:	2300      	movs	r3, #0
 8007cea:	77fb      	strb	r3, [r7, #31]
 8007cec:	e0cc      	b.n	8007e88 <UART_SetConfig+0x348>
 8007cee:	2302      	movs	r3, #2
 8007cf0:	77fb      	strb	r3, [r7, #31]
 8007cf2:	e0c9      	b.n	8007e88 <UART_SetConfig+0x348>
 8007cf4:	2304      	movs	r3, #4
 8007cf6:	77fb      	strb	r3, [r7, #31]
 8007cf8:	e0c6      	b.n	8007e88 <UART_SetConfig+0x348>
 8007cfa:	2308      	movs	r3, #8
 8007cfc:	77fb      	strb	r3, [r7, #31]
 8007cfe:	e0c3      	b.n	8007e88 <UART_SetConfig+0x348>
 8007d00:	2310      	movs	r3, #16
 8007d02:	77fb      	strb	r3, [r7, #31]
 8007d04:	e0c0      	b.n	8007e88 <UART_SetConfig+0x348>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a44      	ldr	r2, [pc, #272]	; (8007e1c <UART_SetConfig+0x2dc>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d125      	bne.n	8007d5c <UART_SetConfig+0x21c>
 8007d10:	4b3e      	ldr	r3, [pc, #248]	; (8007e0c <UART_SetConfig+0x2cc>)
 8007d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d1e:	d017      	beq.n	8007d50 <UART_SetConfig+0x210>
 8007d20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d24:	d817      	bhi.n	8007d56 <UART_SetConfig+0x216>
 8007d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d2a:	d00b      	beq.n	8007d44 <UART_SetConfig+0x204>
 8007d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d30:	d811      	bhi.n	8007d56 <UART_SetConfig+0x216>
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <UART_SetConfig+0x1fe>
 8007d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d3a:	d006      	beq.n	8007d4a <UART_SetConfig+0x20a>
 8007d3c:	e00b      	b.n	8007d56 <UART_SetConfig+0x216>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	77fb      	strb	r3, [r7, #31]
 8007d42:	e0a1      	b.n	8007e88 <UART_SetConfig+0x348>
 8007d44:	2302      	movs	r3, #2
 8007d46:	77fb      	strb	r3, [r7, #31]
 8007d48:	e09e      	b.n	8007e88 <UART_SetConfig+0x348>
 8007d4a:	2304      	movs	r3, #4
 8007d4c:	77fb      	strb	r3, [r7, #31]
 8007d4e:	e09b      	b.n	8007e88 <UART_SetConfig+0x348>
 8007d50:	2308      	movs	r3, #8
 8007d52:	77fb      	strb	r3, [r7, #31]
 8007d54:	e098      	b.n	8007e88 <UART_SetConfig+0x348>
 8007d56:	2310      	movs	r3, #16
 8007d58:	77fb      	strb	r3, [r7, #31]
 8007d5a:	e095      	b.n	8007e88 <UART_SetConfig+0x348>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a2f      	ldr	r2, [pc, #188]	; (8007e20 <UART_SetConfig+0x2e0>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d125      	bne.n	8007db2 <UART_SetConfig+0x272>
 8007d66:	4b29      	ldr	r3, [pc, #164]	; (8007e0c <UART_SetConfig+0x2cc>)
 8007d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d74:	d017      	beq.n	8007da6 <UART_SetConfig+0x266>
 8007d76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d7a:	d817      	bhi.n	8007dac <UART_SetConfig+0x26c>
 8007d7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d80:	d00b      	beq.n	8007d9a <UART_SetConfig+0x25a>
 8007d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d86:	d811      	bhi.n	8007dac <UART_SetConfig+0x26c>
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d003      	beq.n	8007d94 <UART_SetConfig+0x254>
 8007d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d90:	d006      	beq.n	8007da0 <UART_SetConfig+0x260>
 8007d92:	e00b      	b.n	8007dac <UART_SetConfig+0x26c>
 8007d94:	2301      	movs	r3, #1
 8007d96:	77fb      	strb	r3, [r7, #31]
 8007d98:	e076      	b.n	8007e88 <UART_SetConfig+0x348>
 8007d9a:	2302      	movs	r3, #2
 8007d9c:	77fb      	strb	r3, [r7, #31]
 8007d9e:	e073      	b.n	8007e88 <UART_SetConfig+0x348>
 8007da0:	2304      	movs	r3, #4
 8007da2:	77fb      	strb	r3, [r7, #31]
 8007da4:	e070      	b.n	8007e88 <UART_SetConfig+0x348>
 8007da6:	2308      	movs	r3, #8
 8007da8:	77fb      	strb	r3, [r7, #31]
 8007daa:	e06d      	b.n	8007e88 <UART_SetConfig+0x348>
 8007dac:	2310      	movs	r3, #16
 8007dae:	77fb      	strb	r3, [r7, #31]
 8007db0:	e06a      	b.n	8007e88 <UART_SetConfig+0x348>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a1b      	ldr	r2, [pc, #108]	; (8007e24 <UART_SetConfig+0x2e4>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d138      	bne.n	8007e2e <UART_SetConfig+0x2ee>
 8007dbc:	4b13      	ldr	r3, [pc, #76]	; (8007e0c <UART_SetConfig+0x2cc>)
 8007dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007dc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007dca:	d017      	beq.n	8007dfc <UART_SetConfig+0x2bc>
 8007dcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007dd0:	d82a      	bhi.n	8007e28 <UART_SetConfig+0x2e8>
 8007dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dd6:	d00b      	beq.n	8007df0 <UART_SetConfig+0x2b0>
 8007dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ddc:	d824      	bhi.n	8007e28 <UART_SetConfig+0x2e8>
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d003      	beq.n	8007dea <UART_SetConfig+0x2aa>
 8007de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007de6:	d006      	beq.n	8007df6 <UART_SetConfig+0x2b6>
 8007de8:	e01e      	b.n	8007e28 <UART_SetConfig+0x2e8>
 8007dea:	2300      	movs	r3, #0
 8007dec:	77fb      	strb	r3, [r7, #31]
 8007dee:	e04b      	b.n	8007e88 <UART_SetConfig+0x348>
 8007df0:	2302      	movs	r3, #2
 8007df2:	77fb      	strb	r3, [r7, #31]
 8007df4:	e048      	b.n	8007e88 <UART_SetConfig+0x348>
 8007df6:	2304      	movs	r3, #4
 8007df8:	77fb      	strb	r3, [r7, #31]
 8007dfa:	e045      	b.n	8007e88 <UART_SetConfig+0x348>
 8007dfc:	2308      	movs	r3, #8
 8007dfe:	77fb      	strb	r3, [r7, #31]
 8007e00:	e042      	b.n	8007e88 <UART_SetConfig+0x348>
 8007e02:	bf00      	nop
 8007e04:	efff69f3 	.word	0xefff69f3
 8007e08:	40011000 	.word	0x40011000
 8007e0c:	40023800 	.word	0x40023800
 8007e10:	40004400 	.word	0x40004400
 8007e14:	40004800 	.word	0x40004800
 8007e18:	40004c00 	.word	0x40004c00
 8007e1c:	40005000 	.word	0x40005000
 8007e20:	40011400 	.word	0x40011400
 8007e24:	40007800 	.word	0x40007800
 8007e28:	2310      	movs	r3, #16
 8007e2a:	77fb      	strb	r3, [r7, #31]
 8007e2c:	e02c      	b.n	8007e88 <UART_SetConfig+0x348>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a72      	ldr	r2, [pc, #456]	; (8007ffc <UART_SetConfig+0x4bc>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d125      	bne.n	8007e84 <UART_SetConfig+0x344>
 8007e38:	4b71      	ldr	r3, [pc, #452]	; (8008000 <UART_SetConfig+0x4c0>)
 8007e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e3e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007e42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e46:	d017      	beq.n	8007e78 <UART_SetConfig+0x338>
 8007e48:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e4c:	d817      	bhi.n	8007e7e <UART_SetConfig+0x33e>
 8007e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e52:	d00b      	beq.n	8007e6c <UART_SetConfig+0x32c>
 8007e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e58:	d811      	bhi.n	8007e7e <UART_SetConfig+0x33e>
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d003      	beq.n	8007e66 <UART_SetConfig+0x326>
 8007e5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e62:	d006      	beq.n	8007e72 <UART_SetConfig+0x332>
 8007e64:	e00b      	b.n	8007e7e <UART_SetConfig+0x33e>
 8007e66:	2300      	movs	r3, #0
 8007e68:	77fb      	strb	r3, [r7, #31]
 8007e6a:	e00d      	b.n	8007e88 <UART_SetConfig+0x348>
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	77fb      	strb	r3, [r7, #31]
 8007e70:	e00a      	b.n	8007e88 <UART_SetConfig+0x348>
 8007e72:	2304      	movs	r3, #4
 8007e74:	77fb      	strb	r3, [r7, #31]
 8007e76:	e007      	b.n	8007e88 <UART_SetConfig+0x348>
 8007e78:	2308      	movs	r3, #8
 8007e7a:	77fb      	strb	r3, [r7, #31]
 8007e7c:	e004      	b.n	8007e88 <UART_SetConfig+0x348>
 8007e7e:	2310      	movs	r3, #16
 8007e80:	77fb      	strb	r3, [r7, #31]
 8007e82:	e001      	b.n	8007e88 <UART_SetConfig+0x348>
 8007e84:	2310      	movs	r3, #16
 8007e86:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	69db      	ldr	r3, [r3, #28]
 8007e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e90:	d15b      	bne.n	8007f4a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007e92:	7ffb      	ldrb	r3, [r7, #31]
 8007e94:	2b08      	cmp	r3, #8
 8007e96:	d828      	bhi.n	8007eea <UART_SetConfig+0x3aa>
 8007e98:	a201      	add	r2, pc, #4	; (adr r2, 8007ea0 <UART_SetConfig+0x360>)
 8007e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9e:	bf00      	nop
 8007ea0:	08007ec5 	.word	0x08007ec5
 8007ea4:	08007ecd 	.word	0x08007ecd
 8007ea8:	08007ed5 	.word	0x08007ed5
 8007eac:	08007eeb 	.word	0x08007eeb
 8007eb0:	08007edb 	.word	0x08007edb
 8007eb4:	08007eeb 	.word	0x08007eeb
 8007eb8:	08007eeb 	.word	0x08007eeb
 8007ebc:	08007eeb 	.word	0x08007eeb
 8007ec0:	08007ee3 	.word	0x08007ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ec4:	f7fd fb2e 	bl	8005524 <HAL_RCC_GetPCLK1Freq>
 8007ec8:	61b8      	str	r0, [r7, #24]
        break;
 8007eca:	e013      	b.n	8007ef4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ecc:	f7fd fb3e 	bl	800554c <HAL_RCC_GetPCLK2Freq>
 8007ed0:	61b8      	str	r0, [r7, #24]
        break;
 8007ed2:	e00f      	b.n	8007ef4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ed4:	4b4b      	ldr	r3, [pc, #300]	; (8008004 <UART_SetConfig+0x4c4>)
 8007ed6:	61bb      	str	r3, [r7, #24]
        break;
 8007ed8:	e00c      	b.n	8007ef4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eda:	f7fd fa13 	bl	8005304 <HAL_RCC_GetSysClockFreq>
 8007ede:	61b8      	str	r0, [r7, #24]
        break;
 8007ee0:	e008      	b.n	8007ef4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ee6:	61bb      	str	r3, [r7, #24]
        break;
 8007ee8:	e004      	b.n	8007ef4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007eea:	2300      	movs	r3, #0
 8007eec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	77bb      	strb	r3, [r7, #30]
        break;
 8007ef2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d074      	beq.n	8007fe4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	005a      	lsls	r2, r3, #1
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	085b      	lsrs	r3, r3, #1
 8007f04:	441a      	add	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	2b0f      	cmp	r3, #15
 8007f14:	d916      	bls.n	8007f44 <UART_SetConfig+0x404>
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f1c:	d212      	bcs.n	8007f44 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	f023 030f 	bic.w	r3, r3, #15
 8007f26:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	085b      	lsrs	r3, r3, #1
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	f003 0307 	and.w	r3, r3, #7
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	89fb      	ldrh	r3, [r7, #14]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	89fa      	ldrh	r2, [r7, #14]
 8007f40:	60da      	str	r2, [r3, #12]
 8007f42:	e04f      	b.n	8007fe4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	77bb      	strb	r3, [r7, #30]
 8007f48:	e04c      	b.n	8007fe4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f4a:	7ffb      	ldrb	r3, [r7, #31]
 8007f4c:	2b08      	cmp	r3, #8
 8007f4e:	d828      	bhi.n	8007fa2 <UART_SetConfig+0x462>
 8007f50:	a201      	add	r2, pc, #4	; (adr r2, 8007f58 <UART_SetConfig+0x418>)
 8007f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f56:	bf00      	nop
 8007f58:	08007f7d 	.word	0x08007f7d
 8007f5c:	08007f85 	.word	0x08007f85
 8007f60:	08007f8d 	.word	0x08007f8d
 8007f64:	08007fa3 	.word	0x08007fa3
 8007f68:	08007f93 	.word	0x08007f93
 8007f6c:	08007fa3 	.word	0x08007fa3
 8007f70:	08007fa3 	.word	0x08007fa3
 8007f74:	08007fa3 	.word	0x08007fa3
 8007f78:	08007f9b 	.word	0x08007f9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f7c:	f7fd fad2 	bl	8005524 <HAL_RCC_GetPCLK1Freq>
 8007f80:	61b8      	str	r0, [r7, #24]
        break;
 8007f82:	e013      	b.n	8007fac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f84:	f7fd fae2 	bl	800554c <HAL_RCC_GetPCLK2Freq>
 8007f88:	61b8      	str	r0, [r7, #24]
        break;
 8007f8a:	e00f      	b.n	8007fac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f8c:	4b1d      	ldr	r3, [pc, #116]	; (8008004 <UART_SetConfig+0x4c4>)
 8007f8e:	61bb      	str	r3, [r7, #24]
        break;
 8007f90:	e00c      	b.n	8007fac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f92:	f7fd f9b7 	bl	8005304 <HAL_RCC_GetSysClockFreq>
 8007f96:	61b8      	str	r0, [r7, #24]
        break;
 8007f98:	e008      	b.n	8007fac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f9e:	61bb      	str	r3, [r7, #24]
        break;
 8007fa0:	e004      	b.n	8007fac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	77bb      	strb	r3, [r7, #30]
        break;
 8007faa:	bf00      	nop
    }

    if (pclk != 0U)
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d018      	beq.n	8007fe4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	085a      	lsrs	r2, r3, #1
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	441a      	add	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	2b0f      	cmp	r3, #15
 8007fca:	d909      	bls.n	8007fe0 <UART_SetConfig+0x4a0>
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fd2:	d205      	bcs.n	8007fe0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	60da      	str	r2, [r3, #12]
 8007fde:	e001      	b.n	8007fe4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007ff0:	7fbb      	ldrb	r3, [r7, #30]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3720      	adds	r7, #32
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	40007c00 	.word	0x40007c00
 8008000:	40023800 	.word	0x40023800
 8008004:	00f42400 	.word	0x00f42400

08008008 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008014:	f003 0301 	and.w	r3, r3, #1
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00a      	beq.n	8008032 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	430a      	orrs	r2, r1
 8008030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008036:	f003 0302 	and.w	r3, r3, #2
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00a      	beq.n	8008054 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	430a      	orrs	r2, r1
 8008052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008058:	f003 0304 	and.w	r3, r3, #4
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00a      	beq.n	8008076 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	430a      	orrs	r2, r1
 8008074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807a:	f003 0308 	and.w	r3, r3, #8
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00a      	beq.n	8008098 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	430a      	orrs	r2, r1
 8008096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809c:	f003 0310 	and.w	r3, r3, #16
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00a      	beq.n	80080ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	430a      	orrs	r2, r1
 80080b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080be:	f003 0320 	and.w	r3, r3, #32
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00a      	beq.n	80080dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	430a      	orrs	r2, r1
 80080da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d01a      	beq.n	800811e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	430a      	orrs	r2, r1
 80080fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008102:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008106:	d10a      	bne.n	800811e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	430a      	orrs	r2, r1
 800811c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00a      	beq.n	8008140 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	430a      	orrs	r2, r1
 800813e:	605a      	str	r2, [r3, #4]
  }
}
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af02      	add	r7, sp, #8
 8008152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800815c:	f7fb fe4a 	bl	8003df4 <HAL_GetTick>
 8008160:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 0308 	and.w	r3, r3, #8
 800816c:	2b08      	cmp	r3, #8
 800816e:	d10e      	bne.n	800818e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008170:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f831 	bl	80081e6 <UART_WaitOnFlagUntilTimeout>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800818a:	2303      	movs	r3, #3
 800818c:	e027      	b.n	80081de <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0304 	and.w	r3, r3, #4
 8008198:	2b04      	cmp	r3, #4
 800819a:	d10e      	bne.n	80081ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800819c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081a0:	9300      	str	r3, [sp, #0]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f81b 	bl	80081e6 <UART_WaitOnFlagUntilTimeout>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e011      	b.n	80081de <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2220      	movs	r2, #32
 80081be:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2220      	movs	r2, #32
 80081c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b09c      	sub	sp, #112	; 0x70
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	60f8      	str	r0, [r7, #12]
 80081ee:	60b9      	str	r1, [r7, #8]
 80081f0:	603b      	str	r3, [r7, #0]
 80081f2:	4613      	mov	r3, r2
 80081f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081f6:	e0a7      	b.n	8008348 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fe:	f000 80a3 	beq.w	8008348 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008202:	f7fb fdf7 	bl	8003df4 <HAL_GetTick>
 8008206:	4602      	mov	r2, r0
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	1ad3      	subs	r3, r2, r3
 800820c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800820e:	429a      	cmp	r2, r3
 8008210:	d302      	bcc.n	8008218 <UART_WaitOnFlagUntilTimeout+0x32>
 8008212:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008214:	2b00      	cmp	r3, #0
 8008216:	d13f      	bne.n	8008298 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008220:	e853 3f00 	ldrex	r3, [r3]
 8008224:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008228:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800822c:	667b      	str	r3, [r7, #100]	; 0x64
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	461a      	mov	r2, r3
 8008234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008236:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008238:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800823c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800823e:	e841 2300 	strex	r3, r2, [r1]
 8008242:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1e6      	bne.n	8008218 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	3308      	adds	r3, #8
 8008250:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008254:	e853 3f00 	ldrex	r3, [r3]
 8008258:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800825a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825c:	f023 0301 	bic.w	r3, r3, #1
 8008260:	663b      	str	r3, [r7, #96]	; 0x60
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	3308      	adds	r3, #8
 8008268:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800826a:	64ba      	str	r2, [r7, #72]	; 0x48
 800826c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008270:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008272:	e841 2300 	strex	r3, r2, [r1]
 8008276:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1e5      	bne.n	800824a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2220      	movs	r2, #32
 8008282:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2220      	movs	r2, #32
 8008288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008294:	2303      	movs	r3, #3
 8008296:	e068      	b.n	800836a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 0304 	and.w	r3, r3, #4
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d050      	beq.n	8008348 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	69db      	ldr	r3, [r3, #28]
 80082ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082b4:	d148      	bne.n	8008348 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082be:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c8:	e853 3f00 	ldrex	r3, [r3]
 80082cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	461a      	mov	r2, r3
 80082dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082de:	637b      	str	r3, [r7, #52]	; 0x34
 80082e0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082e6:	e841 2300 	strex	r3, r2, [r1]
 80082ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1e6      	bne.n	80082c0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	3308      	adds	r3, #8
 80082f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	e853 3f00 	ldrex	r3, [r3]
 8008300:	613b      	str	r3, [r7, #16]
   return(result);
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	f023 0301 	bic.w	r3, r3, #1
 8008308:	66bb      	str	r3, [r7, #104]	; 0x68
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	3308      	adds	r3, #8
 8008310:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008312:	623a      	str	r2, [r7, #32]
 8008314:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008316:	69f9      	ldr	r1, [r7, #28]
 8008318:	6a3a      	ldr	r2, [r7, #32]
 800831a:	e841 2300 	strex	r3, r2, [r1]
 800831e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1e5      	bne.n	80082f2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2220      	movs	r2, #32
 800832a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2220      	movs	r2, #32
 8008330:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2220      	movs	r2, #32
 8008338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	e010      	b.n	800836a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	69da      	ldr	r2, [r3, #28]
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	4013      	ands	r3, r2
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	429a      	cmp	r2, r3
 8008356:	bf0c      	ite	eq
 8008358:	2301      	moveq	r3, #1
 800835a:	2300      	movne	r3, #0
 800835c:	b2db      	uxtb	r3, r3
 800835e:	461a      	mov	r2, r3
 8008360:	79fb      	ldrb	r3, [r7, #7]
 8008362:	429a      	cmp	r2, r3
 8008364:	f43f af48 	beq.w	80081f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3770      	adds	r7, #112	; 0x70
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
	...

08008374 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b096      	sub	sp, #88	; 0x58
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	4613      	mov	r3, r2
 8008380:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	88fa      	ldrh	r2, [r7, #6]
 800838c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2222      	movs	r2, #34	; 0x22
 800839c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d028      	beq.n	80083fa <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083ac:	4a3e      	ldr	r2, [pc, #248]	; (80084a8 <UART_Start_Receive_DMA+0x134>)
 80083ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083b4:	4a3d      	ldr	r2, [pc, #244]	; (80084ac <UART_Start_Receive_DMA+0x138>)
 80083b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083bc:	4a3c      	ldr	r2, [pc, #240]	; (80084b0 <UART_Start_Receive_DMA+0x13c>)
 80083be:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083c4:	2200      	movs	r2, #0
 80083c6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	3324      	adds	r3, #36	; 0x24
 80083d2:	4619      	mov	r1, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083d8:	461a      	mov	r2, r3
 80083da:	88fb      	ldrh	r3, [r7, #6]
 80083dc:	f7fb fed6 	bl	800418c <HAL_DMA_Start_IT>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d009      	beq.n	80083fa <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2210      	movs	r2, #16
 80083ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2220      	movs	r2, #32
 80083f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e051      	b.n	800849e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d018      	beq.n	8008434 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800840a:	e853 3f00 	ldrex	r3, [r3]
 800840e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008416:	657b      	str	r3, [r7, #84]	; 0x54
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	461a      	mov	r2, r3
 800841e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008420:	64bb      	str	r3, [r7, #72]	; 0x48
 8008422:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008424:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008426:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008428:	e841 2300 	strex	r3, r2, [r1]
 800842c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800842e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1e6      	bne.n	8008402 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	3308      	adds	r3, #8
 800843a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843e:	e853 3f00 	ldrex	r3, [r3]
 8008442:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	f043 0301 	orr.w	r3, r3, #1
 800844a:	653b      	str	r3, [r7, #80]	; 0x50
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	3308      	adds	r3, #8
 8008452:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008454:	637a      	str	r2, [r7, #52]	; 0x34
 8008456:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008458:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800845a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800845c:	e841 2300 	strex	r3, r2, [r1]
 8008460:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1e5      	bne.n	8008434 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	3308      	adds	r3, #8
 800846e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	e853 3f00 	ldrex	r3, [r3]
 8008476:	613b      	str	r3, [r7, #16]
   return(result);
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800847e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	3308      	adds	r3, #8
 8008486:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008488:	623a      	str	r2, [r7, #32]
 800848a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848c:	69f9      	ldr	r1, [r7, #28]
 800848e:	6a3a      	ldr	r2, [r7, #32]
 8008490:	e841 2300 	strex	r3, r2, [r1]
 8008494:	61bb      	str	r3, [r7, #24]
   return(result);
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1e5      	bne.n	8008468 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3758      	adds	r7, #88	; 0x58
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	0800867b 	.word	0x0800867b
 80084ac:	080087a3 	.word	0x080087a3
 80084b0:	080087e1 	.word	0x080087e1

080084b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b089      	sub	sp, #36	; 0x24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	e853 3f00 	ldrex	r3, [r3]
 80084c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80084d0:	61fb      	str	r3, [r7, #28]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	461a      	mov	r2, r3
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	61bb      	str	r3, [r7, #24]
 80084dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084de:	6979      	ldr	r1, [r7, #20]
 80084e0:	69ba      	ldr	r2, [r7, #24]
 80084e2:	e841 2300 	strex	r3, r2, [r1]
 80084e6:	613b      	str	r3, [r7, #16]
   return(result);
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1e6      	bne.n	80084bc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2220      	movs	r2, #32
 80084f2:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80084f4:	bf00      	nop
 80084f6:	3724      	adds	r7, #36	; 0x24
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008500:	b480      	push	{r7}
 8008502:	b095      	sub	sp, #84	; 0x54
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008510:	e853 3f00 	ldrex	r3, [r3]
 8008514:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008518:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800851c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	461a      	mov	r2, r3
 8008524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008526:	643b      	str	r3, [r7, #64]	; 0x40
 8008528:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800852c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800852e:	e841 2300 	strex	r3, r2, [r1]
 8008532:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1e6      	bne.n	8008508 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	3308      	adds	r3, #8
 8008540:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008542:	6a3b      	ldr	r3, [r7, #32]
 8008544:	e853 3f00 	ldrex	r3, [r3]
 8008548:	61fb      	str	r3, [r7, #28]
   return(result);
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	f023 0301 	bic.w	r3, r3, #1
 8008550:	64bb      	str	r3, [r7, #72]	; 0x48
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	3308      	adds	r3, #8
 8008558:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800855a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800855c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008562:	e841 2300 	strex	r3, r2, [r1]
 8008566:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856a:	2b00      	cmp	r3, #0
 800856c:	d1e5      	bne.n	800853a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008572:	2b01      	cmp	r3, #1
 8008574:	d118      	bne.n	80085a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	e853 3f00 	ldrex	r3, [r3]
 8008582:	60bb      	str	r3, [r7, #8]
   return(result);
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	f023 0310 	bic.w	r3, r3, #16
 800858a:	647b      	str	r3, [r7, #68]	; 0x44
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	461a      	mov	r2, r3
 8008592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008594:	61bb      	str	r3, [r7, #24]
 8008596:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008598:	6979      	ldr	r1, [r7, #20]
 800859a:	69ba      	ldr	r2, [r7, #24]
 800859c:	e841 2300 	strex	r3, r2, [r1]
 80085a0:	613b      	str	r3, [r7, #16]
   return(result);
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1e6      	bne.n	8008576 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2220      	movs	r2, #32
 80085ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	669a      	str	r2, [r3, #104]	; 0x68
}
 80085bc:	bf00      	nop
 80085be:	3754      	adds	r7, #84	; 0x54
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b090      	sub	sp, #64	; 0x40
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	69db      	ldr	r3, [r3, #28]
 80085da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085de:	d037      	beq.n	8008650 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80085e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e2:	2200      	movs	r2, #0
 80085e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80085e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	3308      	adds	r3, #8
 80085ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f2:	e853 3f00 	ldrex	r3, [r3]
 80085f6:	623b      	str	r3, [r7, #32]
   return(result);
 80085f8:	6a3b      	ldr	r3, [r7, #32]
 80085fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8008600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3308      	adds	r3, #8
 8008606:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008608:	633a      	str	r2, [r7, #48]	; 0x30
 800860a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800860e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008610:	e841 2300 	strex	r3, r2, [r1]
 8008614:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e5      	bne.n	80085e8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800861c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	e853 3f00 	ldrex	r3, [r3]
 8008628:	60fb      	str	r3, [r7, #12]
   return(result);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008630:	637b      	str	r3, [r7, #52]	; 0x34
 8008632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	461a      	mov	r2, r3
 8008638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800863a:	61fb      	str	r3, [r7, #28]
 800863c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863e:	69b9      	ldr	r1, [r7, #24]
 8008640:	69fa      	ldr	r2, [r7, #28]
 8008642:	e841 2300 	strex	r3, r2, [r1]
 8008646:	617b      	str	r3, [r7, #20]
   return(result);
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1e6      	bne.n	800861c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800864e:	e002      	b.n	8008656 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8008650:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008652:	f7fa f989 	bl	8002968 <HAL_UART_TxCpltCallback>
}
 8008656:	bf00      	nop
 8008658:	3740      	adds	r7, #64	; 0x40
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b084      	sub	sp, #16
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800866a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f7ff fa33 	bl	8007ad8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008672:	bf00      	nop
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b09c      	sub	sp, #112	; 0x70
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008686:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	69db      	ldr	r3, [r3, #28]
 800868c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008690:	d071      	beq.n	8008776 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8008692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008694:	2200      	movs	r2, #0
 8008696:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800869a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086a2:	e853 3f00 	ldrex	r3, [r3]
 80086a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80086a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80086b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	461a      	mov	r2, r3
 80086b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80086b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80086ba:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80086be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086c0:	e841 2300 	strex	r3, r2, [r1]
 80086c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80086c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1e6      	bne.n	800869a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	3308      	adds	r3, #8
 80086d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d6:	e853 3f00 	ldrex	r3, [r3]
 80086da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086de:	f023 0301 	bic.w	r3, r3, #1
 80086e2:	667b      	str	r3, [r7, #100]	; 0x64
 80086e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	3308      	adds	r3, #8
 80086ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80086ec:	647a      	str	r2, [r7, #68]	; 0x44
 80086ee:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086f4:	e841 2300 	strex	r3, r2, [r1]
 80086f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1e5      	bne.n	80086cc <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	3308      	adds	r3, #8
 8008706:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870a:	e853 3f00 	ldrex	r3, [r3]
 800870e:	623b      	str	r3, [r7, #32]
   return(result);
 8008710:	6a3b      	ldr	r3, [r7, #32]
 8008712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008716:	663b      	str	r3, [r7, #96]	; 0x60
 8008718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	3308      	adds	r3, #8
 800871e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008720:	633a      	str	r2, [r7, #48]	; 0x30
 8008722:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008724:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008728:	e841 2300 	strex	r3, r2, [r1]
 800872c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800872e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1e5      	bne.n	8008700 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008736:	2220      	movs	r2, #32
 8008738:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800873c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800873e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008740:	2b01      	cmp	r3, #1
 8008742:	d118      	bne.n	8008776 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	e853 3f00 	ldrex	r3, [r3]
 8008750:	60fb      	str	r3, [r7, #12]
   return(result);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f023 0310 	bic.w	r3, r3, #16
 8008758:	65fb      	str	r3, [r7, #92]	; 0x5c
 800875a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	461a      	mov	r2, r3
 8008760:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008762:	61fb      	str	r3, [r7, #28]
 8008764:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008766:	69b9      	ldr	r1, [r7, #24]
 8008768:	69fa      	ldr	r2, [r7, #28]
 800876a:	e841 2300 	strex	r3, r2, [r1]
 800876e:	617b      	str	r3, [r7, #20]
   return(result);
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1e6      	bne.n	8008744 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008778:	2200      	movs	r2, #0
 800877a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800877c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800877e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008780:	2b01      	cmp	r3, #1
 8008782:	d107      	bne.n	8008794 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008786:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800878a:	4619      	mov	r1, r3
 800878c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800878e:	f7ff f9c1 	bl	8007b14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008792:	e002      	b.n	800879a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8008794:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008796:	f7fa f8f9 	bl	800298c <HAL_UART_RxCpltCallback>
}
 800879a:	bf00      	nop
 800879c:	3770      	adds	r7, #112	; 0x70
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b084      	sub	sp, #16
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ae:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2201      	movs	r2, #1
 80087b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d109      	bne.n	80087d2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80087c4:	085b      	lsrs	r3, r3, #1
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	4619      	mov	r1, r3
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	f7ff f9a2 	bl	8007b14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80087d0:	e002      	b.n	80087d8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f7ff f98a 	bl	8007aec <HAL_UART_RxHalfCpltCallback>
}
 80087d8:	bf00      	nop
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b086      	sub	sp, #24
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ec:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087f2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087fa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008806:	2b80      	cmp	r3, #128	; 0x80
 8008808:	d109      	bne.n	800881e <UART_DMAError+0x3e>
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	2b21      	cmp	r3, #33	; 0x21
 800880e:	d106      	bne.n	800881e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	2200      	movs	r2, #0
 8008814:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008818:	6978      	ldr	r0, [r7, #20]
 800881a:	f7ff fe4b 	bl	80084b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008828:	2b40      	cmp	r3, #64	; 0x40
 800882a:	d109      	bne.n	8008840 <UART_DMAError+0x60>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2b22      	cmp	r3, #34	; 0x22
 8008830:	d106      	bne.n	8008840 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	2200      	movs	r2, #0
 8008836:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800883a:	6978      	ldr	r0, [r7, #20]
 800883c:	f7ff fe60 	bl	8008500 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008846:	f043 0210 	orr.w	r2, r3, #16
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008850:	6978      	ldr	r0, [r7, #20]
 8008852:	f7ff f955 	bl	8007b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008856:	bf00      	nop
 8008858:	3718      	adds	r7, #24
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b084      	sub	sp, #16
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800886a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2200      	movs	r2, #0
 8008878:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f7ff f93f 	bl	8007b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008882:	bf00      	nop
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b088      	sub	sp, #32
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	e853 3f00 	ldrex	r3, [r3]
 800889e:	60bb      	str	r3, [r7, #8]
   return(result);
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088a6:	61fb      	str	r3, [r7, #28]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	461a      	mov	r2, r3
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	61bb      	str	r3, [r7, #24]
 80088b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b4:	6979      	ldr	r1, [r7, #20]
 80088b6:	69ba      	ldr	r2, [r7, #24]
 80088b8:	e841 2300 	strex	r3, r2, [r1]
 80088bc:	613b      	str	r3, [r7, #16]
   return(result);
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d1e6      	bne.n	8008892 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2220      	movs	r2, #32
 80088c8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f7fa f849 	bl	8002968 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088d6:	bf00      	nop
 80088d8:	3720      	adds	r7, #32
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <__cxa_pure_virtual>:
 80088de:	b508      	push	{r3, lr}
 80088e0:	f000 f80c 	bl	80088fc <_ZSt9terminatev>

080088e4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80088e4:	b508      	push	{r3, lr}
 80088e6:	4780      	blx	r0
 80088e8:	f000 f80d 	bl	8008906 <abort>

080088ec <_ZSt13get_terminatev>:
 80088ec:	4b02      	ldr	r3, [pc, #8]	; (80088f8 <_ZSt13get_terminatev+0xc>)
 80088ee:	6818      	ldr	r0, [r3, #0]
 80088f0:	f3bf 8f5b 	dmb	ish
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	2000000c 	.word	0x2000000c

080088fc <_ZSt9terminatev>:
 80088fc:	b508      	push	{r3, lr}
 80088fe:	f7ff fff5 	bl	80088ec <_ZSt13get_terminatev>
 8008902:	f7ff ffef 	bl	80088e4 <_ZN10__cxxabiv111__terminateEPFvvE>

08008906 <abort>:
 8008906:	b508      	push	{r3, lr}
 8008908:	2006      	movs	r0, #6
 800890a:	f000 f873 	bl	80089f4 <raise>
 800890e:	2001      	movs	r0, #1
 8008910:	f7fb f9a4 	bl	8003c5c <_exit>

08008914 <__errno>:
 8008914:	4b01      	ldr	r3, [pc, #4]	; (800891c <__errno+0x8>)
 8008916:	6818      	ldr	r0, [r3, #0]
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	20000010 	.word	0x20000010

08008920 <__libc_init_array>:
 8008920:	b570      	push	{r4, r5, r6, lr}
 8008922:	4d0d      	ldr	r5, [pc, #52]	; (8008958 <__libc_init_array+0x38>)
 8008924:	4c0d      	ldr	r4, [pc, #52]	; (800895c <__libc_init_array+0x3c>)
 8008926:	1b64      	subs	r4, r4, r5
 8008928:	10a4      	asrs	r4, r4, #2
 800892a:	2600      	movs	r6, #0
 800892c:	42a6      	cmp	r6, r4
 800892e:	d109      	bne.n	8008944 <__libc_init_array+0x24>
 8008930:	4d0b      	ldr	r5, [pc, #44]	; (8008960 <__libc_init_array+0x40>)
 8008932:	4c0c      	ldr	r4, [pc, #48]	; (8008964 <__libc_init_array+0x44>)
 8008934:	f000 f9b0 	bl	8008c98 <_init>
 8008938:	1b64      	subs	r4, r4, r5
 800893a:	10a4      	asrs	r4, r4, #2
 800893c:	2600      	movs	r6, #0
 800893e:	42a6      	cmp	r6, r4
 8008940:	d105      	bne.n	800894e <__libc_init_array+0x2e>
 8008942:	bd70      	pop	{r4, r5, r6, pc}
 8008944:	f855 3b04 	ldr.w	r3, [r5], #4
 8008948:	4798      	blx	r3
 800894a:	3601      	adds	r6, #1
 800894c:	e7ee      	b.n	800892c <__libc_init_array+0xc>
 800894e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008952:	4798      	blx	r3
 8008954:	3601      	adds	r6, #1
 8008956:	e7f2      	b.n	800893e <__libc_init_array+0x1e>
 8008958:	08008f84 	.word	0x08008f84
 800895c:	08008f84 	.word	0x08008f84
 8008960:	08008f84 	.word	0x08008f84
 8008964:	08008f8c 	.word	0x08008f8c

08008968 <memcpy>:
 8008968:	440a      	add	r2, r1
 800896a:	4291      	cmp	r1, r2
 800896c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008970:	d100      	bne.n	8008974 <memcpy+0xc>
 8008972:	4770      	bx	lr
 8008974:	b510      	push	{r4, lr}
 8008976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800897a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800897e:	4291      	cmp	r1, r2
 8008980:	d1f9      	bne.n	8008976 <memcpy+0xe>
 8008982:	bd10      	pop	{r4, pc}

08008984 <memset>:
 8008984:	4402      	add	r2, r0
 8008986:	4603      	mov	r3, r0
 8008988:	4293      	cmp	r3, r2
 800898a:	d100      	bne.n	800898e <memset+0xa>
 800898c:	4770      	bx	lr
 800898e:	f803 1b01 	strb.w	r1, [r3], #1
 8008992:	e7f9      	b.n	8008988 <memset+0x4>

08008994 <realloc>:
 8008994:	4b02      	ldr	r3, [pc, #8]	; (80089a0 <realloc+0xc>)
 8008996:	460a      	mov	r2, r1
 8008998:	4601      	mov	r1, r0
 800899a:	6818      	ldr	r0, [r3, #0]
 800899c:	f000 b8da 	b.w	8008b54 <_realloc_r>
 80089a0:	20000010 	.word	0x20000010

080089a4 <_raise_r>:
 80089a4:	291f      	cmp	r1, #31
 80089a6:	b538      	push	{r3, r4, r5, lr}
 80089a8:	4604      	mov	r4, r0
 80089aa:	460d      	mov	r5, r1
 80089ac:	d904      	bls.n	80089b8 <_raise_r+0x14>
 80089ae:	2316      	movs	r3, #22
 80089b0:	6003      	str	r3, [r0, #0]
 80089b2:	f04f 30ff 	mov.w	r0, #4294967295
 80089b6:	bd38      	pop	{r3, r4, r5, pc}
 80089b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80089ba:	b112      	cbz	r2, 80089c2 <_raise_r+0x1e>
 80089bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089c0:	b94b      	cbnz	r3, 80089d6 <_raise_r+0x32>
 80089c2:	4620      	mov	r0, r4
 80089c4:	f000 f830 	bl	8008a28 <_getpid_r>
 80089c8:	462a      	mov	r2, r5
 80089ca:	4601      	mov	r1, r0
 80089cc:	4620      	mov	r0, r4
 80089ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089d2:	f000 b817 	b.w	8008a04 <_kill_r>
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d00a      	beq.n	80089f0 <_raise_r+0x4c>
 80089da:	1c59      	adds	r1, r3, #1
 80089dc:	d103      	bne.n	80089e6 <_raise_r+0x42>
 80089de:	2316      	movs	r3, #22
 80089e0:	6003      	str	r3, [r0, #0]
 80089e2:	2001      	movs	r0, #1
 80089e4:	e7e7      	b.n	80089b6 <_raise_r+0x12>
 80089e6:	2400      	movs	r4, #0
 80089e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80089ec:	4628      	mov	r0, r5
 80089ee:	4798      	blx	r3
 80089f0:	2000      	movs	r0, #0
 80089f2:	e7e0      	b.n	80089b6 <_raise_r+0x12>

080089f4 <raise>:
 80089f4:	4b02      	ldr	r3, [pc, #8]	; (8008a00 <raise+0xc>)
 80089f6:	4601      	mov	r1, r0
 80089f8:	6818      	ldr	r0, [r3, #0]
 80089fa:	f7ff bfd3 	b.w	80089a4 <_raise_r>
 80089fe:	bf00      	nop
 8008a00:	20000010 	.word	0x20000010

08008a04 <_kill_r>:
 8008a04:	b538      	push	{r3, r4, r5, lr}
 8008a06:	4d07      	ldr	r5, [pc, #28]	; (8008a24 <_kill_r+0x20>)
 8008a08:	2300      	movs	r3, #0
 8008a0a:	4604      	mov	r4, r0
 8008a0c:	4608      	mov	r0, r1
 8008a0e:	4611      	mov	r1, r2
 8008a10:	602b      	str	r3, [r5, #0]
 8008a12:	f7fb f913 	bl	8003c3c <_kill>
 8008a16:	1c43      	adds	r3, r0, #1
 8008a18:	d102      	bne.n	8008a20 <_kill_r+0x1c>
 8008a1a:	682b      	ldr	r3, [r5, #0]
 8008a1c:	b103      	cbz	r3, 8008a20 <_kill_r+0x1c>
 8008a1e:	6023      	str	r3, [r4, #0]
 8008a20:	bd38      	pop	{r3, r4, r5, pc}
 8008a22:	bf00      	nop
 8008a24:	20008930 	.word	0x20008930

08008a28 <_getpid_r>:
 8008a28:	f7fb b900 	b.w	8003c2c <_getpid>

08008a2c <sbrk_aligned>:
 8008a2c:	b570      	push	{r4, r5, r6, lr}
 8008a2e:	4e0e      	ldr	r6, [pc, #56]	; (8008a68 <sbrk_aligned+0x3c>)
 8008a30:	460c      	mov	r4, r1
 8008a32:	6831      	ldr	r1, [r6, #0]
 8008a34:	4605      	mov	r5, r0
 8008a36:	b911      	cbnz	r1, 8008a3e <sbrk_aligned+0x12>
 8008a38:	f000 f8bc 	bl	8008bb4 <_sbrk_r>
 8008a3c:	6030      	str	r0, [r6, #0]
 8008a3e:	4621      	mov	r1, r4
 8008a40:	4628      	mov	r0, r5
 8008a42:	f000 f8b7 	bl	8008bb4 <_sbrk_r>
 8008a46:	1c43      	adds	r3, r0, #1
 8008a48:	d00a      	beq.n	8008a60 <sbrk_aligned+0x34>
 8008a4a:	1cc4      	adds	r4, r0, #3
 8008a4c:	f024 0403 	bic.w	r4, r4, #3
 8008a50:	42a0      	cmp	r0, r4
 8008a52:	d007      	beq.n	8008a64 <sbrk_aligned+0x38>
 8008a54:	1a21      	subs	r1, r4, r0
 8008a56:	4628      	mov	r0, r5
 8008a58:	f000 f8ac 	bl	8008bb4 <_sbrk_r>
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	d101      	bne.n	8008a64 <sbrk_aligned+0x38>
 8008a60:	f04f 34ff 	mov.w	r4, #4294967295
 8008a64:	4620      	mov	r0, r4
 8008a66:	bd70      	pop	{r4, r5, r6, pc}
 8008a68:	2000892c 	.word	0x2000892c

08008a6c <_malloc_r>:
 8008a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a70:	1ccd      	adds	r5, r1, #3
 8008a72:	f025 0503 	bic.w	r5, r5, #3
 8008a76:	3508      	adds	r5, #8
 8008a78:	2d0c      	cmp	r5, #12
 8008a7a:	bf38      	it	cc
 8008a7c:	250c      	movcc	r5, #12
 8008a7e:	2d00      	cmp	r5, #0
 8008a80:	4607      	mov	r7, r0
 8008a82:	db01      	blt.n	8008a88 <_malloc_r+0x1c>
 8008a84:	42a9      	cmp	r1, r5
 8008a86:	d905      	bls.n	8008a94 <_malloc_r+0x28>
 8008a88:	230c      	movs	r3, #12
 8008a8a:	603b      	str	r3, [r7, #0]
 8008a8c:	2600      	movs	r6, #0
 8008a8e:	4630      	mov	r0, r6
 8008a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a94:	4e2e      	ldr	r6, [pc, #184]	; (8008b50 <_malloc_r+0xe4>)
 8008a96:	f000 f89d 	bl	8008bd4 <__malloc_lock>
 8008a9a:	6833      	ldr	r3, [r6, #0]
 8008a9c:	461c      	mov	r4, r3
 8008a9e:	bb34      	cbnz	r4, 8008aee <_malloc_r+0x82>
 8008aa0:	4629      	mov	r1, r5
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	f7ff ffc2 	bl	8008a2c <sbrk_aligned>
 8008aa8:	1c43      	adds	r3, r0, #1
 8008aaa:	4604      	mov	r4, r0
 8008aac:	d14d      	bne.n	8008b4a <_malloc_r+0xde>
 8008aae:	6834      	ldr	r4, [r6, #0]
 8008ab0:	4626      	mov	r6, r4
 8008ab2:	2e00      	cmp	r6, #0
 8008ab4:	d140      	bne.n	8008b38 <_malloc_r+0xcc>
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	4631      	mov	r1, r6
 8008aba:	4638      	mov	r0, r7
 8008abc:	eb04 0803 	add.w	r8, r4, r3
 8008ac0:	f000 f878 	bl	8008bb4 <_sbrk_r>
 8008ac4:	4580      	cmp	r8, r0
 8008ac6:	d13a      	bne.n	8008b3e <_malloc_r+0xd2>
 8008ac8:	6821      	ldr	r1, [r4, #0]
 8008aca:	3503      	adds	r5, #3
 8008acc:	1a6d      	subs	r5, r5, r1
 8008ace:	f025 0503 	bic.w	r5, r5, #3
 8008ad2:	3508      	adds	r5, #8
 8008ad4:	2d0c      	cmp	r5, #12
 8008ad6:	bf38      	it	cc
 8008ad8:	250c      	movcc	r5, #12
 8008ada:	4629      	mov	r1, r5
 8008adc:	4638      	mov	r0, r7
 8008ade:	f7ff ffa5 	bl	8008a2c <sbrk_aligned>
 8008ae2:	3001      	adds	r0, #1
 8008ae4:	d02b      	beq.n	8008b3e <_malloc_r+0xd2>
 8008ae6:	6823      	ldr	r3, [r4, #0]
 8008ae8:	442b      	add	r3, r5
 8008aea:	6023      	str	r3, [r4, #0]
 8008aec:	e00e      	b.n	8008b0c <_malloc_r+0xa0>
 8008aee:	6822      	ldr	r2, [r4, #0]
 8008af0:	1b52      	subs	r2, r2, r5
 8008af2:	d41e      	bmi.n	8008b32 <_malloc_r+0xc6>
 8008af4:	2a0b      	cmp	r2, #11
 8008af6:	d916      	bls.n	8008b26 <_malloc_r+0xba>
 8008af8:	1961      	adds	r1, r4, r5
 8008afa:	42a3      	cmp	r3, r4
 8008afc:	6025      	str	r5, [r4, #0]
 8008afe:	bf18      	it	ne
 8008b00:	6059      	strne	r1, [r3, #4]
 8008b02:	6863      	ldr	r3, [r4, #4]
 8008b04:	bf08      	it	eq
 8008b06:	6031      	streq	r1, [r6, #0]
 8008b08:	5162      	str	r2, [r4, r5]
 8008b0a:	604b      	str	r3, [r1, #4]
 8008b0c:	4638      	mov	r0, r7
 8008b0e:	f104 060b 	add.w	r6, r4, #11
 8008b12:	f000 f865 	bl	8008be0 <__malloc_unlock>
 8008b16:	f026 0607 	bic.w	r6, r6, #7
 8008b1a:	1d23      	adds	r3, r4, #4
 8008b1c:	1af2      	subs	r2, r6, r3
 8008b1e:	d0b6      	beq.n	8008a8e <_malloc_r+0x22>
 8008b20:	1b9b      	subs	r3, r3, r6
 8008b22:	50a3      	str	r3, [r4, r2]
 8008b24:	e7b3      	b.n	8008a8e <_malloc_r+0x22>
 8008b26:	6862      	ldr	r2, [r4, #4]
 8008b28:	42a3      	cmp	r3, r4
 8008b2a:	bf0c      	ite	eq
 8008b2c:	6032      	streq	r2, [r6, #0]
 8008b2e:	605a      	strne	r2, [r3, #4]
 8008b30:	e7ec      	b.n	8008b0c <_malloc_r+0xa0>
 8008b32:	4623      	mov	r3, r4
 8008b34:	6864      	ldr	r4, [r4, #4]
 8008b36:	e7b2      	b.n	8008a9e <_malloc_r+0x32>
 8008b38:	4634      	mov	r4, r6
 8008b3a:	6876      	ldr	r6, [r6, #4]
 8008b3c:	e7b9      	b.n	8008ab2 <_malloc_r+0x46>
 8008b3e:	230c      	movs	r3, #12
 8008b40:	603b      	str	r3, [r7, #0]
 8008b42:	4638      	mov	r0, r7
 8008b44:	f000 f84c 	bl	8008be0 <__malloc_unlock>
 8008b48:	e7a1      	b.n	8008a8e <_malloc_r+0x22>
 8008b4a:	6025      	str	r5, [r4, #0]
 8008b4c:	e7de      	b.n	8008b0c <_malloc_r+0xa0>
 8008b4e:	bf00      	nop
 8008b50:	20008928 	.word	0x20008928

08008b54 <_realloc_r>:
 8008b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b58:	4680      	mov	r8, r0
 8008b5a:	4614      	mov	r4, r2
 8008b5c:	460e      	mov	r6, r1
 8008b5e:	b921      	cbnz	r1, 8008b6a <_realloc_r+0x16>
 8008b60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b64:	4611      	mov	r1, r2
 8008b66:	f7ff bf81 	b.w	8008a6c <_malloc_r>
 8008b6a:	b92a      	cbnz	r2, 8008b78 <_realloc_r+0x24>
 8008b6c:	f000 f83e 	bl	8008bec <_free_r>
 8008b70:	4625      	mov	r5, r4
 8008b72:	4628      	mov	r0, r5
 8008b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b78:	f000 f884 	bl	8008c84 <_malloc_usable_size_r>
 8008b7c:	4284      	cmp	r4, r0
 8008b7e:	4607      	mov	r7, r0
 8008b80:	d802      	bhi.n	8008b88 <_realloc_r+0x34>
 8008b82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b86:	d812      	bhi.n	8008bae <_realloc_r+0x5a>
 8008b88:	4621      	mov	r1, r4
 8008b8a:	4640      	mov	r0, r8
 8008b8c:	f7ff ff6e 	bl	8008a6c <_malloc_r>
 8008b90:	4605      	mov	r5, r0
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d0ed      	beq.n	8008b72 <_realloc_r+0x1e>
 8008b96:	42bc      	cmp	r4, r7
 8008b98:	4622      	mov	r2, r4
 8008b9a:	4631      	mov	r1, r6
 8008b9c:	bf28      	it	cs
 8008b9e:	463a      	movcs	r2, r7
 8008ba0:	f7ff fee2 	bl	8008968 <memcpy>
 8008ba4:	4631      	mov	r1, r6
 8008ba6:	4640      	mov	r0, r8
 8008ba8:	f000 f820 	bl	8008bec <_free_r>
 8008bac:	e7e1      	b.n	8008b72 <_realloc_r+0x1e>
 8008bae:	4635      	mov	r5, r6
 8008bb0:	e7df      	b.n	8008b72 <_realloc_r+0x1e>
	...

08008bb4 <_sbrk_r>:
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	4d06      	ldr	r5, [pc, #24]	; (8008bd0 <_sbrk_r+0x1c>)
 8008bb8:	2300      	movs	r3, #0
 8008bba:	4604      	mov	r4, r0
 8008bbc:	4608      	mov	r0, r1
 8008bbe:	602b      	str	r3, [r5, #0]
 8008bc0:	f7fb f856 	bl	8003c70 <_sbrk>
 8008bc4:	1c43      	adds	r3, r0, #1
 8008bc6:	d102      	bne.n	8008bce <_sbrk_r+0x1a>
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	b103      	cbz	r3, 8008bce <_sbrk_r+0x1a>
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	bd38      	pop	{r3, r4, r5, pc}
 8008bd0:	20008930 	.word	0x20008930

08008bd4 <__malloc_lock>:
 8008bd4:	4801      	ldr	r0, [pc, #4]	; (8008bdc <__malloc_lock+0x8>)
 8008bd6:	f000 b85d 	b.w	8008c94 <__retarget_lock_acquire_recursive>
 8008bda:	bf00      	nop
 8008bdc:	20008934 	.word	0x20008934

08008be0 <__malloc_unlock>:
 8008be0:	4801      	ldr	r0, [pc, #4]	; (8008be8 <__malloc_unlock+0x8>)
 8008be2:	f000 b858 	b.w	8008c96 <__retarget_lock_release_recursive>
 8008be6:	bf00      	nop
 8008be8:	20008934 	.word	0x20008934

08008bec <_free_r>:
 8008bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bee:	2900      	cmp	r1, #0
 8008bf0:	d044      	beq.n	8008c7c <_free_r+0x90>
 8008bf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bf6:	9001      	str	r0, [sp, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f1a1 0404 	sub.w	r4, r1, #4
 8008bfe:	bfb8      	it	lt
 8008c00:	18e4      	addlt	r4, r4, r3
 8008c02:	f7ff ffe7 	bl	8008bd4 <__malloc_lock>
 8008c06:	4a1e      	ldr	r2, [pc, #120]	; (8008c80 <_free_r+0x94>)
 8008c08:	9801      	ldr	r0, [sp, #4]
 8008c0a:	6813      	ldr	r3, [r2, #0]
 8008c0c:	b933      	cbnz	r3, 8008c1c <_free_r+0x30>
 8008c0e:	6063      	str	r3, [r4, #4]
 8008c10:	6014      	str	r4, [r2, #0]
 8008c12:	b003      	add	sp, #12
 8008c14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c18:	f7ff bfe2 	b.w	8008be0 <__malloc_unlock>
 8008c1c:	42a3      	cmp	r3, r4
 8008c1e:	d908      	bls.n	8008c32 <_free_r+0x46>
 8008c20:	6825      	ldr	r5, [r4, #0]
 8008c22:	1961      	adds	r1, r4, r5
 8008c24:	428b      	cmp	r3, r1
 8008c26:	bf01      	itttt	eq
 8008c28:	6819      	ldreq	r1, [r3, #0]
 8008c2a:	685b      	ldreq	r3, [r3, #4]
 8008c2c:	1949      	addeq	r1, r1, r5
 8008c2e:	6021      	streq	r1, [r4, #0]
 8008c30:	e7ed      	b.n	8008c0e <_free_r+0x22>
 8008c32:	461a      	mov	r2, r3
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	b10b      	cbz	r3, 8008c3c <_free_r+0x50>
 8008c38:	42a3      	cmp	r3, r4
 8008c3a:	d9fa      	bls.n	8008c32 <_free_r+0x46>
 8008c3c:	6811      	ldr	r1, [r2, #0]
 8008c3e:	1855      	adds	r5, r2, r1
 8008c40:	42a5      	cmp	r5, r4
 8008c42:	d10b      	bne.n	8008c5c <_free_r+0x70>
 8008c44:	6824      	ldr	r4, [r4, #0]
 8008c46:	4421      	add	r1, r4
 8008c48:	1854      	adds	r4, r2, r1
 8008c4a:	42a3      	cmp	r3, r4
 8008c4c:	6011      	str	r1, [r2, #0]
 8008c4e:	d1e0      	bne.n	8008c12 <_free_r+0x26>
 8008c50:	681c      	ldr	r4, [r3, #0]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	6053      	str	r3, [r2, #4]
 8008c56:	4421      	add	r1, r4
 8008c58:	6011      	str	r1, [r2, #0]
 8008c5a:	e7da      	b.n	8008c12 <_free_r+0x26>
 8008c5c:	d902      	bls.n	8008c64 <_free_r+0x78>
 8008c5e:	230c      	movs	r3, #12
 8008c60:	6003      	str	r3, [r0, #0]
 8008c62:	e7d6      	b.n	8008c12 <_free_r+0x26>
 8008c64:	6825      	ldr	r5, [r4, #0]
 8008c66:	1961      	adds	r1, r4, r5
 8008c68:	428b      	cmp	r3, r1
 8008c6a:	bf04      	itt	eq
 8008c6c:	6819      	ldreq	r1, [r3, #0]
 8008c6e:	685b      	ldreq	r3, [r3, #4]
 8008c70:	6063      	str	r3, [r4, #4]
 8008c72:	bf04      	itt	eq
 8008c74:	1949      	addeq	r1, r1, r5
 8008c76:	6021      	streq	r1, [r4, #0]
 8008c78:	6054      	str	r4, [r2, #4]
 8008c7a:	e7ca      	b.n	8008c12 <_free_r+0x26>
 8008c7c:	b003      	add	sp, #12
 8008c7e:	bd30      	pop	{r4, r5, pc}
 8008c80:	20008928 	.word	0x20008928

08008c84 <_malloc_usable_size_r>:
 8008c84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c88:	1f18      	subs	r0, r3, #4
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	bfbc      	itt	lt
 8008c8e:	580b      	ldrlt	r3, [r1, r0]
 8008c90:	18c0      	addlt	r0, r0, r3
 8008c92:	4770      	bx	lr

08008c94 <__retarget_lock_acquire_recursive>:
 8008c94:	4770      	bx	lr

08008c96 <__retarget_lock_release_recursive>:
 8008c96:	4770      	bx	lr

08008c98 <_init>:
 8008c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9a:	bf00      	nop
 8008c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c9e:	bc08      	pop	{r3}
 8008ca0:	469e      	mov	lr, r3
 8008ca2:	4770      	bx	lr

08008ca4 <_fini>:
 8008ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca6:	bf00      	nop
 8008ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008caa:	bc08      	pop	{r3}
 8008cac:	469e      	mov	lr, r3
 8008cae:	4770      	bx	lr
